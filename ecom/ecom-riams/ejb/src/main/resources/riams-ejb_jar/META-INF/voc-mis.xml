<vocconfig>
	<!-- Справочник значений из пользовательского справочника-->
	<voc id="vocUserDomainNameById" type="NativeVocService">
		<NativeVocService
				from="uservalue as voc"
				names="voc.name"
				nameId="voc.name"
				queried ="(voc.name like :query)"
				parent="domain_id=:parent"
		/>
	</voc>

	<voc id="vocClassificationCriterionActual" type="NativeVocService">
		<NativeVocService
				from="VocClassificationCriterion as voc"
				names="voc.name"
				nameId="voc.name"
				queried ="(voc.name like :query)"
				queryAppend="isNoActual is null or isNoActual is false"
		/>
	</voc>

	<voc id="vocYesNoMaybe" type="NativeVocService">
		<NativeVocService
				from="vocYesNoMaybe as voc"
				names="voc.name"
				nameId="voc.id"
				queried ="(voc.name like :query)"
		/>
	</voc>
	<voc id="vocTicketQueue" type="NativeVocService">
		<NativeVocService
				from="VocQueue as voc"
				names="coalesce(voc.prefix,'')|| ' '||voc.name"
				nameId="voc.id"
				queried ="(voc.code like :query or voc.name like :query)"
		/>
	</voc>
	<voc id="vocPigeonHole" type="NativeVocService">
		<NativeVocService
				from="VocPigeonHole as voc"
				names="voc.name"
				nameId="voc.id"
				queried ="(voc.code like :query or voc.name like :query)"
		/>
	</voc>

<voc id="vocDispensaryEndReason" type="NativeVocService">
	<NativeVocService 
	from="VocDispensaryEnd as voc"

	names="voc.name ||' '||voc.comment"
	nameId="voc.id"
	queried ="(voc.code like :query or voc.name like :query)"
/>	
</voc>
<voc id="vocEntry" type="NativeVocService">
	<NativeVocService
	from="entry as e"
	join="left join WorkFunction as wf on wf.id= e.person_id
		left join Worker as w on w.id=wf.worker_id
		left join Patient as p on p.id=w.person_id
		left join VocWorkFunction vwf on vwf.id=wf.workFunction_id
		left join department d on d.id=e.department_id
		left join mislpu m on m.id=d.department_id"
	queryAppend="wf.dtype='PersonalWorkFunction' and (wf.archival is null or wf.archival='0')"
	names="e.comment||' - '||p.lastname||' '||p.firstname||' '||p.middlename||'('||m.name||')' as name"
	nameId="e.id"
	queriedSplitCount="3"
	queried =" voc.name like :querInd or voc.code like "
/>
</voc>


<voc id="vocPersonShort" type="NativeVocService">
	<NativeVocService 
	from="workfunction as wf"
	join="left join Worker as w on w.id=wf.worker_id
		  left join Patient as p on p.id=w.person_id
		  left join VocWorkFunction vwf on vwf.id=wf.workFunction_id" 
	queryAppend="wf.dtype='PersonalWorkFunction' and (wf.archival is null or wf.archival='0')" 
	names="p.lastname||' '||p.firstname||' '||p.middlename" 
	nameId="wf.id"
	queriedSplitCount="3"
	queried =" (cast(wf.id as varchar(20))= :querInd or vwf.name like UPPER(:quer1) or p.lastname like UPPER(:quer1) or (p.lastname like UPPER(:quer1) and (UPPER(:quer2) is null or p.firstname like UPPER(:quer2)) and (UPPER(:quer3) is null or p.middlename like UPPER(:quer3))) )"
/>	
</voc>

<voc id="vocDepartmentFull" type="NativeVocService">
	<NativeVocService 
	from="department as d"
	join="left join mislpu m on m.id = d.department_id
    	  left join vocbuildinglevel vbl on vbl.id = d.buildinglevel_id
		  left join vocbuilding vb on vb.id = d.building_id"
	nameId="d.id" 
	names="vb.name||' - '||m.name||'('||vbl.name||')'"
	queriedSplitCount="1"
	queried ="(cast(d.id as varchar(20))= :querInd or m.name like :quer1 or vbl.name like :quer1 or vb.name like :quer1)"/>
</voc>

<voc id="vocBuildingShort" type="NativeVocService">
	<NativeVocService 
	from="vocBuilding as vb " 
	nameId="vb.id"
	names="vb.name" />
</voc>
	
<voc id="vocBuildingLevelShort" type="NativeVocService">
	<NativeVocService 
	from="vocBuildingLevel as vbl "
	nameId="vbl.id" 
	names="vbl.name" />
</voc>

<voc id="vocDepartmet" type="NativeVocService">
	<NativeVocService 
	from="mislpu as m " 
	nameId="m.id"
	queryAppend="m.parent_id = 1"
	order="m.name"
	names="m.name"
	queriedSplitCount="1"
	queried ="(cast(m.id as varchar(20)) = :querInd or m.name like UPPER(:query))"
	/>
</voc>

<voc id="vocWorkFunctionShort" type="NativeVocService">
	<NativeVocService 
	from="vocworkfunction as vwf " 
	nameId="vwf.id"
	queryAppend="vwf.code is not null" 
	names="vwf.name"
	queriedSplitCount="1"
	queried ="(cast(vwf.id as varchar(20)) = :querInd or vwf.name like UPPER(:query))" />
</voc>


<!--  Справочник калькуляторы -->
<voc id='vocCalculator' type='NativeVocService'>
       <NativeVocService
	from="calculator c"
	nameId="c.id"
	names="c.name"
	>
	</NativeVocService>
    </voc>

<!--  Справочник назначения в калькуляторе -->
<voc id='vocCalcRiskparent' type='NativeVocService'>
	<NativeVocService
			from="calcrisk r"
			nameId="r.id"
			names="r.riskvalue,r.lowscore,r.upscore"
			parent="r.calculator_id=:parent"
	>
	</NativeVocService>
</voc>

	<!--  Справочник НДС  -->
<voc id='vocVat' type='NativeVocService'>
       <NativeVocService
	from="vocvat vv"
	nameId="vv.id"
	names="vv.name"
	>
	</NativeVocService>
    </voc> 
    
<!--  Список гарантийных писем по пациенту  -->
<voc id='guaranteeByPatient' type='NativeVocService'>
       <NativeVocService
	from="contractguarantee cg"
	nameId="cg.id"
	names="'№ '||cg.numberDoc ||' от '||to_char(cg.issuedate,'dd.MM.yyyy')||' (Договор №'||mc.contractNumber||')'"
	join="left join medcontract mc on mc.id=cg.contract_id
	 		left join contractperson cp on cp.id=cg.contractperson_id"
	parent="cp.patient_id=:parent"
	>
	</NativeVocService>
    </voc> 


<!--  Список доверенностей -->
<voc id='vocAttorney' type='NativeVocService'>
       <NativeVocService
	from="attorney uv"
	nameId="uv.id"
	names="'№ '||uv.attorneynumber||' от '||to_char(uv.attorneyStartDate,'dd.MM.yyyy')||' '||pat.lastname"
	queryAppend="(uv.isArchive is null or uv.isArchive='0')"
	join="left join patient pat on pat.id=uv.person_id"
	queried="pat.lastname like upper(:query) "
	>
	</NativeVocService>
    </voc> 
    
<!--  Справочник типов доверенностей -->
<voc id='vocAttorneyType' type='NativeVocService'>
       <NativeVocService
	from="vocAttorneyType uv"
	nameId="uv.id"
	names="uv.name"
	queryAppend="(uv.isArchival is null or uv.isArchival='0')"
	>
	</NativeVocService>
    </voc> 
    
    
<!--  Справочник значений по пользовательскому справочнику -->
<voc id='vocUserValueByDomain' type='NativeVocService'>
       <NativeVocService
	from="userValue uv"
	nameId="uv.id"
	names="uv.name"
	parent="uv.domain_id=:parent"
	>
	</NativeVocService>
    </voc> 
    <voc id='vocEquipmentTypeByLpu' type='NativeVocService'>
       <NativeVocService
	from="vocTypeEquip vte"
	nameId="vte.id"
	names="vte.name"
	join="left join medicalequipmentposition mep on mep.equipmenttype_id=vte.id
		left join medicalstandard ms on ms.id=mep.standard_id
		left join mislpu ml on ml.medicalstandard_id=ms.id"
	parent="ml.id=:parent"
	queried="upper(vte.name) like upper(:querId) "
	>
	</NativeVocService>
    </voc> 
    
<voc id='vocEquipmentType' type='EntityVocService'>
        <EntityVocService
                entity  = 'ru.ecom.mis.ejb.domain.equipment.voc.VocTypeEquip'
                names   = 'name'
                queried = 'name'
        />
    </voc> 
<voc id='vocMedicalStandard' type='EntityVocService'>
        <EntityVocService
                entity  = 'ru.ecom.mis.ejb.domain.medstandard.MedicalStandard'
                names   = 'name'
                queried = 'name'
        />
    </voc> 
<voc id='vocKiliDefect' type='EntityVocService'>
        <EntityVocService
                entity  = 'ru.ecom.mis.ejb.domain.medcase.voc.VocKiliDefect'
                names   = 'name'
                queried = 'name'
        />
    </voc> 

<!--  Справочник профилей КИЛИ -->
<voc id='vocKiliProfile' type='EntityVocService'>
        <EntityVocService
                entity  = 'ru.ecom.mis.ejb.domain.medcase.voc.VocKiliProfile'
                names   = 'name'
                queried = 'name'
        />
    </voc> 
    
<!--  Справочник решений КИЛИ -->
<voc id="vocKiliConclusion" type="NativeVocService">
	<NativeVocService
	from="vocKiliConclusion vkc"
	nameId="vkc.id"
	names="vkc.name"
	>
	</NativeVocService>
	</voc> 
	
<voc id="vocIndicationHospital" type="NativeVocService">
	<NativeVocService
	from="vocIndicationHospitalization vih"
	nameId="vih.id"
	names="vih.name"
	>
	</NativeVocService>
	</voc> 
	
<voc id="vocAssessmentCard" type="NativeVocService">
	<NativeVocService
	from="assessmentCardTemplate act"
	nameId="act.id"
	names="act.name"
	queryAppend="(act.IsArchive is null or act.IsArchive='0')"
	>
	</NativeVocService>
	</voc> 

<voc id="vocAssessmentsByTemplate" type="NativeVocService">
	<NativeVocService
	from="assessment ass"
	nameId="ass.id"
	names="ass.name"
	join="left join assessmentcardtemplate act on act.id = ass.assessmentcard" 
    parent="act.id =:parent"
	>
	</NativeVocService>
	</voc>

<voc id="vocExternalDocumentTypeByParent" type="NativeVocService">
	<NativeVocService
	from="vocExternalDocumentType vedt"
	nameId="vedt.id"
	names="vedt.name"
	parent="vedt.groupName =:parent"
	>
	</NativeVocService>
	</voc>
<voc id="patientListType" type="NativeVocService">
	<NativeVocService
	from="VocPatientListType vplt"
	nameId="vplt.id"
	names="vplt.name"
	>
	</NativeVocService>
	</voc>
	
<voc id="vocQualityEstimationKind" type="NativeVocService">
	<NativeVocService
	from="vocQualityEstimationKind vqek"
	nameId="vqek.id"
	names="vqek.name"
	>
	</NativeVocService>
	</voc>

	<voc id="vocQualityEstimationKindReport" type="NativeVocService">
		<NativeVocService
				from="vocQualityEstimationKind vqek"
				nameId="vqek.id"
				names="vqek.name"
				queryAppend=" (vqek.code='1' or vqek.code='2') "
		>
		</NativeVocService>
	</voc>
<voc id="vocAccountByJuridicalPerson" type="NativeVocService">
	<NativeVocService
		from="ContractAccount ca"
		nameId="ca.id"
		order=""
		names="ca.accountNumber||' '||CASE WHEN cp.dtype='NaturalPerson' THEN 'Физ.лицо: ' ||p.lastname ||' '|| p.firstname|| ' '|| p.middlename||' г.р. '|| to_char(p.birthday,'DD.MM.YYYY')
				when cp.dtype='JuridicalPerson' 
				  then coalesce(vjp.name||' ','')||case   
					when reg.id is not null then 'Страх.комп. '
					when lpu.id is not null then 'ЛПУ '
					when vjp.code='SILOVIK' then 'Сил. стр-ра:'
					else 'Юрид.лицо: ' end ||cp.name
				END"
		join="
			left join MedContract mc on mc.id=ca.contract_id
			left join contractperson cp on cp.id=mc.Customer_id
			 left join patient p on p.id=cp.patient_id left join VocJuridicalPerson vjp on vjp.id=cp.juridicalPersonType_id
    			left join MisLpu lpu on lpu.id=cp.lpu_id
			left join REG_IC reg on reg.id=cp.regCompany_id
			"
		queried="upper(ca.accountNumber) like upper(:querId) "
		parent=""
		queryAppend="cp.dtype='JuridicalPerson' and (ca.isFinished='0' or ca.isFinished is null) "
	/>
</voc>
<voc id="executorsByCurrentUserName" type="NativeVocService">
	<NativeVocService
		from="SecUser suu"
		nameId="su.login"
		order="pat.lastname, pat.firstname, pat.middlename"
		names=" pat.lastname||' ' ||pat.firstname||' '||pat.middlename"
		join="
			left join workfunction wf on wf.secuser_id=suu.id
			left join workfunction allwf on allwf.group_id=wf.group_id
			left join worker w on w.id=allwf.worker_id
			left join worker allw on allw.person_id=w.person_id
			left join workfunction aallwf on aallwf.worker_id=allw.id
			left join secuser su on su.id=aallwf.secuser_id		
			left join patient pat on pat.id=allw.person_id
			"
		queried="upper(pat.lastname) like upper(:querId) or upper(su.login) like upper(:query) "
		parent="suu.login=:parent"
		queryAppend="su.id is not null and (su.disable is null or su.disable='0') and (su.disabled is null or su.disabled='0') 
		and (aallwf.archival is null or aallwf.archival='0')"
	/>
</voc>

<voc id="userDocumentGroup" type="NativeVocService">
	<NativeVocService
		from="VocUserDocumentGroup vudg"
		nameId="vudg.id"
		order="vudg.name"
		names="vudg.name"
		queried="upper(vudg.name) like upper(:querId) "
	/>
</voc>


<voc id="executorByClaimType" type="NativeVocService">
	<NativeVocService
		from="SecUser su"
		nameId="su.login"
		order="pat.lastname, pat.firstname, pat.middlename"
		names=" pat.lastname||' ' ||pat.firstname||' '||pat.middlename"
		join=" 
	left join WorkFunction pwf on pwf.secuser_id=su.id
	left join Worker wp on wp.id=pwf.worker_id
	left join Patient pat on pat.id=wp.person_id			
	left join Worker allw on allw.person_id=pat.id
	left join WorkFunction allwf on allwf.worker_id=allw.id 
	left join WorkFunction gwf on gwf.id=allwf.group_id
	left join WorkFunctionClaimType wfct on wfct.workfunction=gwf.id
	left join VocClaimType vct on vct.id=wfct.claimtype	
			"
			queryAppend="(allwf.archival is null or allwf.archival='0')"
		queried="upper(pat.lastname) like upper(:querId) or upper(su.login) like upper(:query) "
		parent="vct.id=:parent"
	/>
</voc>

<voc id="vocClaimType" type="NativeVocService">
	<NativeVocService
		from="VocClaimType vct"
		nameId="vct.id"
		order="vct.name, vct.code"
		names="vct.name"
		queried="cast(vct.id as varchar(2)) like :querId or upper(vct.name) like upper(:query) "
	/>
</voc>

<voc id="operationRoom" type="NativeVocService">
	<NativeVocService
		from="Workfunction wf"
		nameId="wf.id"
		order="wf.groupname"
		names="wf.groupname"
		queryAppend="wf.dtype='OperatingRoom'"
		queried="cast(wf.id as varchar(2)) like :querId or upper(wf.groupname) like upper(:query) "
	/>
</voc>

<voc id="vocMedPolicy" type="NativeVocService">
	<NativeVocService
		from="VocMedPolicy vmp"
		nameId="vmp.id"
		order="vmp.name"
		names="vmp.name"
		queried="cast(vmp.id as varchar(2)) like :querId or upper(vmp.name) like upper(:query) "
	/>
</voc>

<voc id="vocReasonDischarge" type="NativeVocService">
	<NativeVocService
		from="VocReasonDischarge vrd"
		nameId="vrd.id"
		order="vrd.name"
		names="vrd.name"
		queried="cast(vrd.id as varchar(2)) like :querId or upper(vrd.name) like upper(:query) "
	/>
</voc>
<!-- Полный справочник мед. оборудования -->
<voc id="allMedicalEquipment" type="NativeVocService">
	<NativeVocService
		from="equipment e"
		nameId="e.id"
		order="e.name"
		names="coalesce(e.inventoryNumber,'')||' '|| e.name"
		queryAppend="e.dtype='MedicalEquipment'"
		queried=" upper(e.name) like upper(:query) or upper(e.inventoryNumber) like upper(:query) "
	/>
</voc>

<!-- Справочник мед. оборудования, закрепленного за отделением (parent=lpu_id) -->
<voc id="medicalEquipmentByLpu" type="NativeVocService">
	<NativeVocService
		from="equipment e"
		nameId="e.id"
		order="e.name"
		names="coalesce(e.inventoryNumber,'')||' '|| e.name"
		queryAppend="e.dtype='MedicalEquipment'"
		queried=" upper(e.name) like upper(:query) or upper(e.inventoryNumber) like upper(:query) "
		parent="e.lpu_id=:parent"
	/>
</voc>

<!-- Справочник мед. оборудования указанного типа, закрепленного за отделением (parent=lpu_id#equiptype_id) -->
<voc id="medicalEquipmentByLpuAndType" type="NativeVocService">
	<NativeVocService
		parentSplitCount="2"
		from="equipment e"
		nameId="e.id"
		order="e.name"
		names="coalesce(e.inventoryNumber,'')||' '|| e.name"
		queryAppend="e.dtype='MedicalEquipment'"
		queried=" upper(e.name) like upper(:query) or upper(e.inventoryNumber) like upper(:query) "
		parent="e.lpu_id=:par1 and e.typeequip_id=:par2 "
	/>
</voc>

<!-- Справочник мед. оборудования указанного типа(parent=equiptype_id) -->
<voc id="medicalEquipmentByType" type="NativeVocService">
	<NativeVocService
		from="equipment e"
		nameId="e.id"
		order="e.name"
		names="coalesce(e.inventoryNumber,'')||' '|| e.name"
		queryAppend="e.dtype='MedicalEquipment'"
		queried=" upper(e.name) like upper(:query) or upper(e.inventoryNumber) like upper(:query) "
		parent="e.typeequip_id=:parent"
	/>
</voc>

<voc id="patientAttachmentFormats" type="NativeVocService">
	<NativeVocService
		from="efformat ef"
		nameId="ef.id"
		order="ef.comment"
		names="ef.id||' '|| ef.comment"
		join="left join impdoc id on id.id=ef.document_id"
		queryAppend="ef.actualdateto is null and id.entityclassname='ru.ecom.mis.ejb.domain.patient.PatientAttachedImport'"
		queried=" upper(ms.name) like upper(:query) "
	/>
</voc>
<voc id="hospitalDataFondFormats" type="NativeVocService">
	<NativeVocService
		from="efformat ef"
		nameId="ef.id"
		order="ef.comment"
		names="ef.id||' '|| ef.comment"
		join="left join impdoc id on id.id=ef.document_id"
		queryAppend="ef.actualdateto is null and id.entityclassname='ru.ecom.mis.ejb.domain.medcase.hospital.HospitalDataFond'"
		queried=" upper(ms.name) like upper(:query) "
	/>
</voc>

<voc id="vocMedStandard" type="NativeVocService">
	<NativeVocService
		from="MedicalStandard ms"
		nameId="ms.id"
		order="ms.name"
		names="ms.code||' '|| ms.name"
		queryAppend="(ms.finishDate is null or ms.finishDate>=current_date)"
		queried=" upper(ms.name) like upper(:query) "
	/>
</voc>
<!-- Полный справочник видов оборудования -->
<voc id="vocEquipmentType" type="NativeVocService">
	<NativeVocService
		from="VocTypeEquip vte"
		nameId="vte.id"
		order="vte.name"
		names="vte.id||' '|| vte.name"
		queried=" upper(vte.name) like upper(:query) "
	/>
</voc>

<!-- Полный справочник видов оборудования -->
<voc id="vocEquipmentTypeByLpu" type="NativeVocService">
	<NativeVocService
		from="VocTypeEquip vte"
		nameId="vte.id"
		order="vte.name"
		names="vte.id||' '|| vte.name"
		queried=" upper(vte.name) like upper(:query) "
		join="left join medicalEquipmentPosition mep on mep.equipmenttype_id=vte.id
			left join mislpu ml on ml.medicalstandard_id=mep.standard_id"
		parent="ml.id=:parent"
	/>
</voc>

<voc id="medServiceAnesthesia" type="NativeVocService">
	<NativeVocService
		from="MedService ms"
		nameId="ms.id"
		queryAppend="vst.code = 'ANESTHESIA' and (ms.finishDate is null or ms.finishDate>=current_date)"
		join=" left join VocServiceType vst on vst.id=ms.serviceType_id  " order=""
		names="ms.code||' '|| ms.name"
		queried=" upper(ms.name) like upper(:query) or upper(ms.code) like upper(:query) "
	/>
</voc>
	
<voc id="surgicalOperations" type="NativeVocService">
	<NativeVocService
		from="MedService ms"
		nameId="ms.id"
		queryAppend="vst.code = 'OPERATION'  and (ms.finishDate is null or ms.finishDate>=current_date)"
		join=" left join VocServiceType vst on vst.id=ms.serviceType_id  " order=""
		names="ms.code||' '|| ms.name"
		queried=" upper(ms.name) like upper(:query) or upper(ms.code) like upper(:query) "
	/>
</voc>

<voc id='serviceWorkFunction' type='NativeVocService'>
    	<NativeVocService
    			from = 'WorkFunction as wf '
    			parent = ''
    			names  = "case when wf.dtype='GroupWorkFunction' then vwf.name||' '||wf.groupname else vwf.name||' '|| p.lastname||' '||p.firstname||' '||p.middlename end ||' ' || case when wf.dtype='PersonalWorkFunction' then ml2.name else ml1.name end"
    			queried =" (cast(wf.id as varchar(20))= :querInd or vwf.name like UPPER(:quer1) or wf.groupname like UPPER(:quer1) or p.lastname like :quer1 or (p.lastname like :quer1 and (:quer2 is null or p.firstname like :quer2) and (:quer3 is null or p.middlename like :quer3)) )"
    			queryAppend = " (wf.dtype='PersonalWorkFunction' and wf.group_id is null or wf.dtype='GroupWorkFunction') and (wf.archival is null or wf.archival='0')"
    			queriedSplitCount="3"
    			order =''
    			nameId='wf.id'
    			join='left join Worker as w on w.id=wf.worker_id 
    			left join MisLpu ml1 on ml1.id=wf.lpu_id
    			left join MisLpu ml2 on ml2.id=w.lpu_id
    			
    			left join Patient as p on p.id=w.person_id 
    			left join VocWorkFunction vwf on vwf.id=wf.workFunction_id'
    	/>
    </voc>  

<voc id="actualPriceList" type="NativeVocService">
	<NativeVocService
		from="pricelist as pl"
		nameId='pl.id'
		queryAppend="current_date >= pl.datefrom and (pl.dateto is null or pl.dateto >= current_date)" 
		order=""
		names= "pl.name "
    	queried="upper(pl.name) like upper(:query)" 
	/>
</voc>
<!--справочник действующих льгот-->
	<voc id="actualPrivilege" type="NativeVocService">
		<NativeVocService
				from="contractperson as cp"
				nameId='p.id'
				parent="cp.id=:parent"
				join="left join privilege p on p.person_id=cp.patient_id and (p.enddate >= current_date or p.enddate is null) or p.person_id is null
				      left join vocprivilegecategory vpc on vpc.id = p.category_id"
				order="p.id"
				names= "max(case when p.serialdoc is null and p.category_id is null then p.numberdoc else p.serialdoc||' '||p.numberdoc||' ('||vpc.name||')' end)"
				queried="upper(p.numberdoc) like upper(:query)"
				groupBy="p.id,vpc.name"
		/>
	</voc>

	<voc id="vocExtDisp" type="NativeVocService">
		<NativeVocService
				from="vocExtDisp as ved"
				nameId='ved.id'
				queryAppend="(ved.isArchival is null or ved.isArchival='0') and (ved.isComission is null or ved.isComission='0')"
				order=""
				names= "ved.name "
				queried="upper(ved.name) like upper(:query)"
		/>
	</voc>
	<voc id="vocExtDispAll" type="NativeVocService">
		<NativeVocService
				from="vocExtDisp as ved"
				nameId='ved.id'
				queryAppend="ved.isComission is null or ved.isComission='0'"
				order=""
				names= "ved.name "
				queried="upper(ved.name) like upper(:query)"
		/>
	</voc>

<voc id="extDispCom" type="NativeVocService">
	<NativeVocService
		from="vocExtDisp as ved"
		nameId='ved.id'
		queryAppend="(ved.isComission='1') and (ved.isArchival is null or ved.isArchival='0')"
		order=""
		names= "ved.name "
    	queried="upper(ved.name) like upper(:query)" 
	/>
</voc>


<voc id="workFunctionByCode" type="NativeVocService">
	<NativeVocService
		from="workFunction as wf"
		parent="vedsf.name = :parent"
		nameId='wf.id'
		queryAppend="wf.dtype = 'PersonalWorkFunction' and (archival is null or archival='0') and vlf.code in ('2','4','5')" 
		join="left join VocWorkFunction as vwf on vwf.id=wf.workFunction_id
		left join Worker as w on w.id=wf.worker_id
		left join Patient as p on p.id=w.person_id
		left join VocExtDispServiceFunction vedsf on vedsf.code=vwf.code
		left join MisLpu ml on ml.id=w.lpu_id
		left join VocLpuFunction vlf on vlf.id=ml.lpuFunction_id
		" 
		order=""
		names  = "vwf.name||' '|| p.lastname||' '||p.firstname||' '||p.middlename||' ('||ml.name||')' "
    	queried="upper(p.lastname) like upper(:query)" 
	/>
</voc>
	<!--
<voc id="prescriptTypeNotEmergency" type="NativeVocService">
	<NativeVocService
		from="vocPrescriptType vpt"
		nameId="vpt.id"
		queryAppend="vpt.code != 'EMERGENCY'" 
		join="" order=""
		names="vpt.code||' '|| vpt.name"
		queried=" upper(vpt.name) like upper(:query) or upper(vpt.code) like upper(:query) "
	/>
</voc> -->
<voc id="vocMkbAdc" type="NativeVocService">
	<NativeVocService
		from="VocMkbAdc vma"
		nameId="vma.code"
		queryAppend="" 
		parent=" mkb.id=:parent "
		join="left join VocIdc10 mkb on mkb.code=vma.name" order=""
		names="'('||vma.code||') '||coalesce(vma.mkb,'')"
		queried=" upper(vma.code) like upper(:query) "
	/>
</voc>

	<!-- Функциональная диагностика в стационаре по потоку обслуживания (раб.функция#поток обслуживания-->

<voc id="funcMedServiceStacByServiceStream" type="NativeVocService">
	<NativeVocService
		from="MedService ms"
		nameId="ms.id"
		parent=" wf.id = :par1 and 1=(select count(vss.id) from vocServiceStream vss where vss.id=:par2 and (
					  (vss.isCalcOmcHosp='1' and (ms.isNoOmc is null or ms.isNoOmc='0'))
					  or ((vss.isCalcOmcHosp is null or vss.isCalcOmcHosp='0') and pl.id is not null)))"
		queryAppend="MS.DTYPE='MedService'  and (ms.finishDate is null or ms.finishDate>=current_date)"
		join="
		left join WorkFunctionService wfs on wfs.medservice_id =ms.id
		left join WorkFunction wf on wf.workfunction_id=wfs.vocworkfunction_id
		left join VocServiceType vst on vst.id=ms.serviceType_id
		left join priceMedService pms on pms.medservice_id=ms.id
		left join priceposition pp on pp.id=pms.priceposition_id and pp.dateTo is null
		left join pricelist pl on pl.id=pp.pricelist_id and pl.isDefault='1'
		" order="ms.code"
		names="ms.code||' '|| ms.name"
		queried=" upper(ms.name) like upper(:query) or upper(ms.code) like upper(:query) "
		groupBy=" ms.id , ms.code,ms.name "
		parentSplitCount="2"
	/>
</voc>

	<!-- Функциональная диагностика в поликлинике по потоку обслуживания (раб.функция#поток обслуживания-->
	<voc id="funcMedServicePolByServiceStream" type="NativeVocService">
		<NativeVocService
				from="MedService ms"
				nameId="ms.id"
				parent=" wf.id = :par1 and 1=(select count(vss.id) from vocServiceStream vss where vss.id=:par2 and (
					  (vss.code in ('BUDGET','OBLIGATORYINSURANCE') and (ms.isNoOmc is null or ms.isNoOmc='0'))
					  or (vss.code not in ('BUDGET','OBLIGATORYINSURANCE') and pl.id is not null)))"
				queryAppend="MS.DTYPE='MedService'  and (ms.finishDate is null or ms.finishDate>=current_date)"
				join="
		left join WorkFunctionService wfs on wfs.medservice_id =ms.id
		left join WorkFunction wf on wf.workfunction_id=wfs.vocworkfunction_id
		left join VocServiceType vst on vst.id=ms.serviceType_id
		left join priceMedService pms on pms.medservice_id=ms.id
		left join priceposition pp on pp.id=pms.priceposition_id and pp.dateTo is null
		left join pricelist pl on pl.id=pp.pricelist_id and pl.isDefault='1'

		" order="ms.code"
				names="ms.code||' '|| ms.name"
				queried=" upper(ms.name) like upper(:query) or upper(ms.code) like upper(:query) "
				groupBy=" ms.id , ms.code,ms.name "
				parentSplitCount="2"
		/>
	</voc>

	<!-- Функциональная диагностика-->
<voc id="funcMedService" type="NativeVocService">
	<NativeVocService
		from="MedService ms"
		nameId="ms.id"
		parent=" wf.id = :parent "
		queryAppend="MS.DTYPE='MedService'  and (ms.finishDate is null or ms.finishDate>=current_date)"
		join="
		left join WorkFunctionService wfs on wfs.medservice_id =ms.id
		left join WorkFunction wf on wf.workfunction_id=wfs.vocworkfunction_id
		left join VocServiceType vst on vst.id=ms.serviceType_id
		" order="ms.code"
		names="ms.code||' '|| ms.name"
		queried=" upper(ms.name) like upper(:query) or upper(ms.code) like upper(:query) "
		groupBy=" ms.id , ms.code,ms.name "
	/>
</voc>
<voc id="funcMedServiceRoom" type="NativeVocService">
	<NativeVocService
		from="WorkFunction wf "
		nameId="wf.id"
		queryAppend="wf.dtype = 'GroupWorkFunction' " 
		join=" " order=""
		names="wf.id||' '|| wf.groupname"
		queried=" upper(wf.groupname) like upper(:query) "
	/>
</voc>
<voc id="labMedServiceForLabDoctor" type="NativeVocService">
	<NativeVocService
		from="MedService ms"
		nameId=" ms.id"
		queryAppend="vst.code = 'LABSURVEY' and ms.dtype='MedService' and (ms.finishDate is null or ms.finishDate>=current_date) and ms.isForLabDoctor='1'" 
		join=" left join workfunctionservice wfs on wfs.medservice_id=ms.id 
				left join vocprescripttype vpt on vpt.id=wfs.prescripttype_id 
				left join vocservicetype vst on vst.id=ms.servicetype_id " 
		groupBy="ms.id, ms.name, ms.code"
		order="ms.name"
		names="ms.code||' '|| ms.name"
		queried=" upper(ms.name) like upper(:query) or upper(ms.code) like upper(:query) "
	/>
</voc>

    <!--Лабораторные исследования по типу назначения -->
<voc id="labMedService" type="NativeVocService">
	<NativeVocService
		from="MedService ms"
		parent="vst.code = 'LABSURVEY' and ms.dtype='MedService' and (ms.finishDate is null or ms.finishDate>=current_date) and ms.id not in (select mss.id from medservice mss
	left join workfunctionservice wfss on wfss.medservice_id=mss.id
	left join vocprescripttype vpts on vpts.id=wfss.prescripttype_id
	left join vocservicetype vsts on vsts.id=mss.servicetype_id where vpts.id= :parent 
	and mss.dtype='MedService'
	and vsts.code='LABSURVEY'
	)"
		nameId=" ms.id"
		join=" left join workfunctionservice wfs on wfs.medservice_id=ms.id
				left join vocprescripttype vpt on vpt.id=wfs.prescripttype_id 
				left join vocservicetype vst on vst.id=ms.servicetype_id " 
		groupBy="ms.id, ms.name, ms.code"
		order="ms.name"
		names="ms.code||' '|| ms.name"
		queried=" upper(ms.name) like upper(:query) or upper(ms.code) like upper(:query) "
	/>
</voc>

	<!--Лабораторные исследования в поликлинике по типу назначения и потоку обслуживания тип назначения/поток обслуживания-->
	<voc id="labMedServiceByServiceStreamPol" type="NativeVocService">
		<NativeVocService
				from="MedService ms"
				parent="vst.code = 'LABSURVEY' and ms.dtype='MedService' and (ms.finishDate is null or ms.finishDate>=current_date)
				and ms.id not in (select mss.id from medservice mss
	left join workfunctionservice wfss on wfss.medservice_id=mss.id
	left join vocprescripttype vpts on vpts.id=wfss.prescripttype_id
	left join vocservicetype vsts on vsts.id=mss.servicetype_id where vpts.id= :par1
	and mss.dtype='MedService'
	and vsts.code='LABSURVEY'
	) and 1=(select count(vss.id) from vocServiceStream vss where vss.id=:par2 and (
					  (vss.isCalcOmcHosp='1' and (ms.isNoOmc is null or ms.isNoOmc='0'))
					  or ((vss.isCalcOmcHosp is null or vss.isCalcOmcHosp='0') and pl.id is not null)))"
				nameId=" ms.id"
				join="
				left join vocservicetype vst on vst.id=ms.servicetype_id
				left join workfunctionservice wfs on wfs.medservice_id=ms.id
				left join vocprescripttype vpt on vpt.id=wfs.prescripttype_id
				left join priceMedService pms on pms.medservice_id=ms.id
				left join priceposition pp on pp.id=pms.priceposition_id and pp.dateTo is null
				left join pricelist pl on pl.id=pp.pricelist_id and pl.isDefault='1'
"
				groupBy="ms.id, ms.name, ms.code"
				order="ms.name"
				names="ms.code||' '|| ms.name"
				queried=" upper(ms.name) like upper(:query) or upper(ms.code) like upper(:query) "
				parentSplitCount="2"
		/>
	</voc>

	<!--Лабораторные исследования в стационаре по типу назначения и потоку обслуживания тип назначения/поток обслуживания-->
	<voc id="labMedServiceByServiceStreamStac" type="NativeVocService">
		<NativeVocService
				from="MedService ms"
				parent="vst.code = 'LABSURVEY' and ms.dtype='MedService' and (ms.finishDate is null or ms.finishDate>=current_date)
				and ms.id not in (select mss.id from medservice mss
	left join workfunctionservice wfss on wfss.medservice_id=mss.id
	left join vocprescripttype vpts on vpts.id=wfss.prescripttype_id
	left join vocservicetype vsts on vsts.id=mss.servicetype_id where vpts.id= :par1
	and mss.dtype='MedService'
	and vsts.code='LABSURVEY'
	) and 1=(select count(vss.id) from vocServiceStream vss where vss.id=:par2 and (
					  (vss.isCalcOmcHosp='1' and (ms.isNoOmc is null or ms.isNoOmc='0'))
					  or ((vss.isCalcOmcHosp is null or vss.isCalcOmcHosp='0') and pl.id is not null)))"
				nameId=" ms.id"
				join="
				left join vocservicetype vst on vst.id=ms.servicetype_id
				left join workfunctionservice wfs on wfs.medservice_id=ms.id
				left join vocprescripttype vpt on vpt.id=wfs.prescripttype_id
				left join priceMedService pms on pms.medservice_id=ms.id
				left join priceposition pp on pp.id=pms.priceposition_id and pp.dateTo is null
				left join pricelist pl on pl.id=pp.pricelist_id and pl.isDefault='1'
"
				groupBy="ms.id, ms.name, ms.code"
				order="ms.name"
				names="ms.code||' '|| ms.name"
				queried=" upper(ms.name) like upper(:query) or upper(ms.code) like upper(:query) "
				parentSplitCount="2"
		/>
	</voc>

<voc id="vocServiceSubTypeByCode" type="NativeVocService">
	<NativeVocService
		from="VocServiceSubType vsst"
		nameId="vsst.id"
		queryAppend=""
		parent="vsst.serviceType = :parent" 
		join="" order=""
		names="vsst.name"
		queried="upper(vsst.name) like upper(:query)"
	/>
</voc>
<voc id="vocServiceSubType" type="NativeVocService">
	<NativeVocService
		from="VocServiceSubType vsst"
		parent="vst.id = :parent"
		nameId="vsst.id"
		queryAppend="" join="left join VocServiceType vst on vst.code=vsst.serviceType" order=""
		names="vsst.name"
		queried="upper(vsst.name) like upper(:query)"
	/>
</voc>
<voc id="vocTransfusionReason" type="NativeVocService">
	<NativeVocService
		from="VocTransfusionReason vtr"
		parent="vpb.id = :parent"
		nameId="vtr.id"
		queryAppend=" (vtr.dateFinish is null or vtr.dateFinish>current_date) "
		join="left join VocBloodPreparation vpb on vpb.code=vtr.codePreparation" order=""
		names="vtr.name"
		queried="upper(vtr.name) like upper(:query)"
	/>
</voc>
<voc id="vocExtDispHealthGroupByDispType" type="NativeVocService">
	<NativeVocService
		from="VocExtDispHealthGroup vedhg"
		parent="vedhg.dispType_id = :parent"
		nameId="vedhg.id"
		queryAppend="" join="" order=""
		names="vedhg.name"
		queried="upper(vedhg.name) like upper(:query)"
	/>
</voc>
<voc id="vocReportStr" type="NativeVocService">
	<NativeVocService
		    	from=" VocReportSetParameterType "
		    	parent='classname=:parent'
		    	nameId="id"
		    	join=""
		    	queryAppend=""
		    	order=""
		    	queried=" code like upper(:query) or strCode like upper(:querId) "
		    	names = "strCode||'. '||code||'-'||name"
		/>
</voc>
<voc id="vocQualityEstimationCritByKind" type="NativeVocService">
	<NativeVocService
		from="VocQualityEstimationCrit vqec"
		parent="vqec.kind_id = :parent"
		nameId="vqec.id"
		queryAppend="" join="" order=""
		names="vqec.code||' '||vedhg.name"
		queried="upper(vedhg.name) like upper(:query) or upper(vedhg.code) like upper(:query)"
	/>
</voc>
<voc id="vocExtDispAgeReportGroupByDispType" type="NativeVocService">
	<NativeVocService
		from="VocExtDispAgeReportGroup vedhg"
		parent="vedhg.dispType_id = :parent"
		nameId="vedhg.id"
		queryAppend="" join="" order=""
		names="vedhg.name"
		queried="upper(vedhg.name) like upper(:query)"
	/>
</voc>
<voc id="vocExtDispAgeGroupByDispType" type="NativeVocService">
	<NativeVocService
		from="VocExtDispAgeGroup vedhg"
		parent="vedhg.dispType_id = :parent"
		nameId="vedhg.id"
		queryAppend="(vedhg.isArchival is null or vedhg.isArchival='0' )" join="" order=""
		names="vedhg.name"
		queried="upper(vedhg.name) like upper(:query)"
	/>
</voc>
<voc id="vocExtDispAgeGroupByDispPlan" type="NativeVocService">
	<NativeVocService
		from="VocExtDispAgeGroup vedhg"
		parent="edp.id = :parent"
		nameId="vedhg.id"
		queryAppend="" join="left join ExtDispPlan edp on edp.dispType_id=vedhg.dispType_id " order=""
		names="vedhg.name"
		queried="upper(vedhg.name) like upper(:query)"
	/>
</voc>
<voc id="copyingEquipment" type="NativeVocService">
	<NativeVocService
		from="CopyingEquipment ce"
		nameId="ce.id"
		queryAppend="" join="" order=""
		names="ce.name"
		queried="upper(ce.name) like upper(:query)"
	/>
</voc>
<voc id="kkmEquipment" type="NativeVocService">
	<NativeVocService
			from="Equipment e"
			nameId="e.id"
			queryAppend=" dtype='KkmEquipment' " join="" order=""
			names="e.name"
			queried="upper(e.name) like upper(:query)"
	/>
</voc>
	<!--Список позиций прейскуранта по прейскуранту-->
	<voc id="pricePositionByPriceList" type="NativeVocService">
		<NativeVocService
				from="PricePosition PP"
				parent='PP.priceList_id = :parent'
				nameId="PP.id"
				queryAppend=""
				order=""
				names   = "PP.code || ' ' || PP.name|| ' ('||PP.cost||')'"
				queried=" (upper(PP.code) like upper(:query) or upper(replace(PP.code,'.','')) like upper(:query) or upper(PP.name) like upper(:query) or upper(''||pp.id) like upper(:query)) "
		/>
	</voc>
<voc id="priceMedServiceByPriceList" type="NativeVocService">
		<NativeVocService
			from="PriceMedService PMS"
                parent='PP.priceList_id = :parent'
                nameId="PMS.id"
                queryAppend=" pms.dateTo is null and pp.dateTo is null"
                join="
                	left join PricePosition PP ON PP.id = PMS.pricePosition_id
				"
                order=""
                names   = "PP.code || ' ' || PP.name|| ' ('||PP.cost||')'"
	    		queried=" (upper(PP.code) like upper(:query) or upper(replace(PP.code,'.','')) like upper(:query) or upper(PP.name) like upper(:query)) "
			/>
	</voc>
<voc id="priceMedServiceByContractAccout" type="NativeVocService">
		<NativeVocService
			from="PriceMedService PMS"
                parent='CA.id = :parent'
                nameId="PMS.id"
                queryAppend=""
                join="
                	left join PricePosition PP ON PP.id = PMS.pricePosition_id
					left join MedContract MC ON MC.priceList_id = PP.priceList_id
					left join ContractAccount CA ON CA.contract_id=mc.id
				"
                order=""
                names   = "PP.code || ' ' || PP.name|| ' ('||PP.cost||')'"
	    		queried=" (upper(PP.code) like upper(:query) or upper(PP.name) like upper(:query)) "
			/>
	</voc>
<voc id="priceMedServiceByJuridicalContractAccout" type="NativeVocService">
		<NativeVocService
			from="PriceMedService PMS"
                parent='CA.id = :parent'
                nameId="PMS.id"
                queryAppend=""
                join="
                	left join PricePosition PP ON PP.id = PMS.pricePosition_id
					left join MedContract MC ON MC.priceList_id = PP.priceList_id
					left join ContractAccount CA ON CA.contract_id=MC.id
				"
                order=""
                names   = "PP.code || ' ' || PP.name|| ' ('||PP.cost||')'"
	    		queried=" (upper(PP.code) like upper(:query) or upper(PP.name) like upper(:query)) "
			/>
	</voc>
		
	<voc id="contractAccountOperation" type="NativeVocService">
		<NativeVocService
			from="ContractAccountOperation CAO"
                parent='CA.id = :parent'
                nameId="CAO.id"
                queryAppend=" "
                join="
					left join ContractAccount CA ON CAO.account_id = CA.id
					left join VocAccountOperation VAO ON  CAO.type_id=VAO.id           
				"
                order=""
                names   = "CAO.id||' '||VAO.name || ' '||to_char(CAO.operationDate,'dd.mm.yyyy')"
	    		queried=" cast(CAO.id as varchar(20)) like :query"
			/>
	</voc>
	
	<voc id='vocAccountOperation' type='EntityVocService'>
        <EntityVocService
                entity  = 'ru.ecom.mis.ejb.domain.contract.voc.VocAccountOperation'
                names   = 'name'
                queried = 'name'
                />
    </voc>
	<voc id='vocIllnesPrimary' type='EntityVocService'>
        <EntityVocService
                entity  = 'ru.ecom.poly.ejb.domain.voc.VocIllnesPrimary'
                names   = 'name'
                queried = 'code,name'
                queryAppend="(deprecated is null or deprecated=false)"
                />
    </voc>

	<voc id="workCalendarPatternByLpu" type="NativeVocService">
		<NativeVocService
			from="WorkCalendarPattern wcp"
                parent='wcp.lpu_id = :parent'
                nameId="wcp.id"
                queryAppend=" wcp.workFunction_id is null "
                join=""
                order=""
                names   = "wcp.name"
	    		queried=" wcp.name like :query"
			/>
	</voc>
	<voc id="workCalendarPattern" type="NativeVocService">
		<NativeVocService
			from="WorkCalendarPattern wcp"
                parent='(wc.id = :parent or wc1.id=:parent)'
                nameId="wcp.id"
                queryAppend=" (wcp.workFunction_id is null or wcp.workFunction_id = wc.workFunction_id)"
                join="
                left join worker w on w.lpu_id=wcp.lpu_id
                left join workfunction wf1 on wf1.lpu_id=wcp.lpu_id and (wf1.DTYPE='GroupWorkFunction' or wf1.DTYPE='OperatingRoom')
                left join workcalendar wc1 on wc1.workfunction_id=wf1.id
                left join workfunction wf on wf.worker_id=w.id and wf.dtype='PersonalWorkFunction'
                left join workcalendar wc on wc.workfunction_id=wf.id
                
				"
                order=""
                names   = "wcp.name"
	    		queried=" (cast(wcp.id as varchar(5)) like :querId or wcp.name like :query) "
	    		groupBy="wcp.id,wcp.name"
			/>
	</voc>
	<voc id='vocMedPolicyOmc' type='NativeVocService'>
		<NativeVocService
				from = ' vocmedpolicyomc voc '
				names="voc.code||' '||voc.name"
				nameId=" voc.id "
				queried=" ( upper(voc.code) like upper(:query) or upper(voc.name) like upper(:query) )"
				queryAppend=" (voc.isDeleted is null or voc.isDeleted='0')"
				order="voc.code"
		/>
	</voc>


	<voc id="medPolicy" type="NativeVocService">
		<NativeVocService
                from  = 'MedPolicy mp'
                parent=''
                nameId="mp.id"
                queryAppend=""
                join=" left join Patient p on p.id=mp.patient_id "
                order=""
                names   = "mp.series|| ' '||mp.polNumber||' '||p.lastname ||' '|| p.firstname|| ' '|| p.middlename||' г.р. '|| to_char(p.birthday,'DD.MM.YYYY') "
	    		queried=" mp.id like :querId or (mp.series like $piece(:querId,' ',1)||'%' and (mp.polNumber like $piece(:querId,' ',2)||'%' or $piece(:querId,' ',2) is null)) or p.lastname like upper(:querId) or (p.lastname like $piece(upper(:querId),' ',1)||'%' and (p.firstname like $piece(upper(:querId),' ',2)||'%' or $piece(upper(:querId),' ',2) is null) and (p.middlename like $piece(upper(:querId),' ',3)||'%' or $piece(:querId,' ',3) is null))"
	    		
			/>
	</voc>
	<voc id="vocExpertConclusionSent" type="NativeVocService">
		<NativeVocService
                from  = 'VocExpertConclusionSent vecs'
                parent='vec.id=:parent'
                nameId="vecs.id"
                queryAppend="(vecs.noActuality is null or vecs.noActuality='0')"
                join=" left join VocExpertConclusion vec on vec.code=vecs.conclusionCode "
                order=""
                names   = "vecs.name "
	    		queried="(cast(vecs.id as varchar(5)) like :querId or upper(vecs.name) like UPPER(:query))"
	    		
			/>
	</voc>
	<voc id="vocExpertOrderConclusion" type="NativeVocService">
		<NativeVocService
                from  = 'VocExpertOrderConclusion vecs'
                parent='vet.id=:parent'
                nameId="vecs.id"
                queryAppend="(vecs.noActuality is null or vecs.noActuality='0')"
                join=" left join VocExpertType vet on vet.code=vecs.typeCode"
                order=""
                names   = "vecs.name "
	    		queried="(cast(vecs.id as varchar(5)) like :querId or upper(vecs.name) like UPPER(:query))"
	    		
			/>
	</voc>
	<voc id="vocExpertReason" type="NativeVocService">
		<NativeVocService
                from  = 'VocExpertReason vecs'
                parent='vet.id=:parent'
                nameId="vecs.id"
                queryAppend="(vecs.noActuality is null or vecs.noActuality='0')"
                join=" left join VocExpertType vet on vet.code=vecs.typeCode"
                order=""
                names   = "vecs.name "
	    		queried="(cast(vecs.id as varchar(5)) like :querId or upper(vecs.name) like UPPER(:query))"
	    		
			/>
	</voc>
	<voc id="vocExpertConclusion" type="NativeVocService">
		<NativeVocService
                from  = 'VocExpertConclusion vecs'
                parent=''
                nameId="vecs.id"
                queryAppend="(vecs.noActuality is null or vecs.noActuality='0')"
                join=""
                order=""
                names   = "vecs.name "
	    		queried="(cast(vecs.id as varchar(5)) like :querId or upper(vecs.name) like UPPER(:query))"
	    		
			/>
	</voc>
	<voc id="childBirthByMedCase" type="NativeVocService">
		<NativeVocService
                from  = 'ChildBirth cb'
                parent=''
                nameId="cb.id"
                queryAppend=""
                join=""
                order=""
                names   = "to_char(cb.birthFinishDate,'DD.MM.YYYY') "
	    		queried=" mp.id like :querId or (to_char(cb.birthFinishDate,'DD.MM.YYYY') like $piece(:querId,' ',1)||'%'"
	    		
			/>
	</voc>

    <voc id='patient' type='NativeVocService'>
        <NativeVocService
                from  = 'Patient p'
                parent=''
                nameId="p.id"
                queryAppend=""
                join=""
                order=""
                names   = "p.lastname ||' '|| p.firstname|| ' '|| p.middlename||' г.р. '|| to_char(p.birthday,'DD.MM.YYYY') "
    		queried=" cast(p.id as varchar(20)) = :querInd or p.lastname like :querId or (p.lastname like :quer1 and (:quer2 is null or p.firstname like :quer2) and (:quer3 is null or p.middlename like :quer3))"
    		queriedSplitCount="3"
        />
    </voc> 
    
    <voc id='medcardByPatient' type='NativeVocService'>
        <NativeVocService 
                from  = 'medcard m'
                parent="m.person_id=:parent"
                nameId="m.id"
                queryAppend=""
                join=""
                order=""
                names   = "'Номер '|| m.number  "
    		queried=" "
    		queriedSplitCount="3"
        />
    </voc>
    <!-- Медконтракт -->
    <voc id='servedPerson' type='NativeVocService'>
        <NativeVocService
                from  = 'ServedPerson sp'
    			parent=" sp.contract_id=:parent "
    			names = "CASE WHEN cp.dtype='NaturalPerson' THEN 'Физ.лицо: '||p.lastname ||' '|| p.firstname|| ' '|| p.middlename||' г.р. '|| to_char(p.birthday,'DD.MM.YYYY') when cp.dtype='JuridicalPerson' then 'Юрид.лицо: '||cp.name else ''  END"
    			nameId="sp.id"
    			queryAppend=''
    			join=' left join ContractPerson cp on cp.id=sp.person_id left join patient p on p.id=cp.patient_id '
    			order=''
    			queried = " cast(sp.id as varchar(20)) like :querId  or cp.name like upper(:query) or (p.lastname like :querId or (p.lastname like :quer1 and (:quer2 is null or p.firstname like :quer2) and (:quer3 is null or p.middlename like :quer3)))"
    			
    		queriedSplitCount="3"
                />
    </voc>
    <voc id='priceList' type='NativeVocService'>
    	<NativeVocService
    			from = 'PriceList'
    			parent=""
    			names = "name"
    			nameId="id"
    			queryAppend=''
    			join=''
    			order=''
    			queried = "(id like :query or name like UPPER(:query))"
    			 			
    	/>
    </voc>
    <voc id='contractPerson' type='NativeVocService'>
        <NativeVocService
                from  = 'ContractPerson cp'
    			parent=""
    			names = "
    			CASE WHEN cp.dtype='NaturalPerson' THEN 'Физ.лицо: ' ||p.lastname ||' '|| p.firstname|| ' '|| p.middlename||' г.р. '|| to_char(p.birthday,'DD.MM.YYYY')
				when cp.dtype='JuridicalPerson' 
				  then coalesce(vjp.name||' ','')||case   
					when reg.id is not null then 'Страх.комп. '
					when lpu.id is not null then 'ЛПУ '
					when vjp.code='SILOVIK' then 'Сил. стр-ра:'
					else 'Юрид.лицо: ' end ||cp.name
				END
    			"
    			nameId="cp.id"
    			queryAppend=''
    			join=' left join patient p on p.id=cp.patient_id left join VocJuridicalPerson vjp on vjp.id=cp.juridicalPersonType_id
    			left join MisLpu lpu on lpu.id=cp.lpu_id
			left join REG_IC reg on reg.id=cp.regCompany_id'
    			order=''
    			queried = " cast(cp.id as varchar(10)) like :querId or UPPER(cp.name) like :query 
    				or 
    				p.lastname like upper(:querId) 
    				or 
    				(p.lastname like upper(:quer1) and (p.firstname like upper(:quer2) 
    				or 
    				:quer2='%') and (p.middlename like upper(:quer3)
    				 or :quer3='%')) "
    			queriedSplitCount="3"
                />
    </voc>
    <voc id='contractNosologyGroup' type='EntityVocService'>
        <EntityVocService
                entity  = 'ru.ecom.mis.ejb.domain.contract.ContractNosologyGroup'
                names   = 'name'
                queried = 'name'
                />
    </voc>
    <voc id='contractMedServiceGroup' type='EntityVocService'>
        <EntityVocService
                entity  = 'ru.ecom.mis.ejb.domain.contract.ContractMedServiceGroup'
                names   = 'name'
                queried = 'name'
                />
    </voc>
    <voc id='contractGuaranteeGroup' type='EntityVocService'>
        <EntityVocService
                entity  = 'ru.ecom.mis.ejb.domain.contract.ContractGuaranteeGroup'
                names   = 'name'
                queried = 'name'
                />
    </voc>
    
    <!--  -->
    <voc id='vocPermission' type='NativeVocService'>
    	<NativeVocService
    			from = 'vocPermission vp'
    			parent=" (vp.object_id=:parent or (vop1.id=:parent and vp.object_id is null))"
    			names = "vp.name"
    			nameId="vp.id"
    			queryAppend=''
    			join=' left join VocObjectPermission vop on vop.id=vp.object_id left join VocObjectPermission vop1 on vop1.code=vp.objectCode'
    			order=''
    			queried = "(cast(vp.id as varchar(20)) like :querId or vp.name like UPPER(:query))"
    			 			
    	/>
    </voc>
    <voc id='vocObjectPermission' type='EntityVocService'>
        <EntityVocService
                entity  = 'ru.ecom.jaas.ejb.domain.voc.VocObjectPermission'
                names   = 'name'
                queried = 'name'
                />
    </voc>

    <voc id='lpu' type='AllValueHelper'>
        <IAllValue>ru.ecom.mis.ejb.service.lpu.LpuAllValueVoc</IAllValue>
    </voc>

	<!-- Справочник всех действующих услуг-->
    <voc id='medService' type='NativeVocService'>
    	<NativeVocService
    			from = 'MedService'
    			parent=""
    			names = "code||' '||name"
    			nameId="id"
    			queryAppend="dtype='MedService' and (ms.finishDate is null or ms.finishDate>=current_date)"
    			join=''
    			order=''
    			queried = "(cast(id as varchar(10)) like :query or upper(name) like UPPER(:query) or code like UPPER(:query) or replace(code,'.','') like UPPER(:query))"
    			parentSplitCount="2"
    			 			
    	/>
    
    </voc>
    <voc id='medServiceAll' type='NativeVocService'>
    	<NativeVocService
    			from = 'MedService'
    			parent=""
    			names = "code||' '||name"
    			nameId="id"
    			queryAppend="dtype='MedService' and (ms.finishDate is null or ms.finishDate>=current_date)"
    			join=''
    			order=''
    			queried = "((cast(id as varchar(10)) like :query or name like UPPER(:query)) or (replace(upper(code),'.','') like (upper(:query))) or upper(name) like upper(:query) or upper(code) like upper(:query))"
    			 			
    	/>
    
    </voc>

	<voc id='medServiceGroupAll' type='NativeVocService'>
		<NativeVocService
				from = 'MedService'
				parent=""
				names = "code||' '||name"
				nameId="id"
				queryAppend=" dtype='MedServiceGroup' "
				join=''
				order=''
				queried = "((cast(id as varchar(10)) like :query or name like UPPER(:query)) or (replace(upper(code),'.','') like (upper(:query))) or upper(name) like upper(:query) or upper(code) like upper(:query))"

		/>

	</voc>
	<!-- Услуги, доступные для выбора в пол-ке, по ОМС раб. функция/дата услуги/поток обслуживания -->
    <voc id='medServiceForSpec' type='NativeVocService'>
    	<NativeVocService
    			from = 'MedService ms'
    			parent="wf.id=:par1
    			and (ms.startDate is null or to_date(:par2,'dd.mm.yyyy')  >=ms.startDate)
    			and (ms.finishDate is null or ms.finishDate>=to_date(:par2,'dd.mm.yyyy'))
				and (wfs.lpu_id is null or wfs.lpu_id=coalesce(wf.lpu_id,w.lpu_id))
				and (wfs.workfunction_id is null or wfs.workfunction_id=:par1)
				and 1=(select count(vss.id) from vocServiceStream vss where vss.id=:par3 and (
					  (vss.code in ('BUDGET','OBLIGATORYINSURANCE') and (ms.isNoOmc is null or ms.isNoOmc='0'))
					  or (vss.code not in ('BUDGET','OBLIGATORYINSURANCE') and pl.id is not null)))
				"
    			parentSplitCount='3'
    			names = "ms.code||' '||ms.name"
    			nameId="ms.id"
    			queryAppend="ms.dtype='MedService' and ms.isPoliclinic='1'"
    			join=" left join WorkFunctionService wfs on wfs.medService_id=ms.id
    			left join WorkFunction wf on case when wfs.workfunction_id is null then wf.workFunction_id=wfs.vocWorkFunction_id else wf.id=wfs.workfunction_id end
    			left join worker w on w.id=wf.worker_id
    			left join pricemedservice pms on pms.medservice_id=ms.id
    			left join priceposition pp on pp.id=pms.priceposition_id
    			left join pricelist pl on pl.id=pp.pricelist_id and pl.isDefault='1'

				"
    			order=''
    			queried = "(upper(ms.code) like upper(:query) or upper(ms.code) like replace(upper(:query),'.','') or upper(ms.name) like UPPER(:query))"
    			groupBy="ms.id, ms.code, ms.name"

    	/>
    </voc>
<!-- Платные услуги в пол-ке раб. функция/дата услуги-->
	<voc id='medServiceForSpecCharged' type='NativeVocService'>
		<NativeVocService
				from = 'priceposition pp'
				parent="wf.id=:par1
    			and (ms.startDate is null or to_date(:par2,'dd.mm.yyyy')  >=ms.startDate)
    			and (ms.finishDate is null or ms.finishDate>=to_date(:par2,'dd.mm.yyyy'))"
				parentSplitCount='2'
				names = "ms.code||' '||ms.name"
				nameId="ms.id"
				queryAppend="ms.dtype='MedService' and ms.isPoliclinic='1' and pl.isDefault='1' and pp.dateto is null"
				join="
				left join pricelist pl on pl.id=pp.pricelist_id
				left join pricemedservice pms on pms.priceposition_id=pp.id
				left join medservice ms on ms.id=pms.medservice_id
 				left join WorkFunctionService wfs on wfs.medService_id=ms.id
 				left join WorkFunction wf on case when wfs.workfunction_id is null then wf.workFunction_id=wfs.vocWorkFunction_id else wf.id=wfs.workfunction_id end
				"
				order=''
				queried = "(upper(ms.code) like upper(:query) or upper(ms.code) like replace(upper(:query),'.','') or upper(ms.name) like UPPER(:query))"
				groupBy="ms.id, ms.code, ms.name"

		/>
	</voc>

	<!-- Услуги для стационара по потоку обслуживания-->
	<voc id='medServiceForStac' type='NativeVocService'>
		<NativeVocService
				from = 'MedService ms'
				parent=" (ms.startDate is null or current_date >= ms.startDate )
					and (ms.finishDate is null or ms.finishDate>=current_date)
					and 1=(select count(vss.id) from vocServiceStream vss where vss.id=:parent and (
					  (vss.isCalcOmcHosp='1' and (ms.isNoOmc is null or ms.isNoOmc='0'))
					  or ((vss.isCalcOmcHosp is null or vss.isCalcOmcHosp='0') and pl.id is not null)))"
				names = "ms.code||' '||ms.name"
				nameId=" ms.id"
				queryAppend="ms.dtype='MedService' and (ms.isDayHospital='1' or ms.isHospital='1')"
				join=" left join pricemedservice pms on pms.medservice_id=ms.id
					left join priceposition pp on pp.id=pms.priceposition_id and pp.dateTo is null
            		left join pricelist pl on pl.id=pp.pricelist_id and pl.isDefault='1'
					"
				order='ms.code, ms.name'
				queried = "(upper(ms.code) like upper(:query) or upper(ms.code) like replace(upper(:query),'.','') or upper(ms.name) like UPPER(:query))"
				groupBy="ms.id, ms.code, ms.name"

		/>
	</voc>

	<!-- Услуги для стационара - раф. функция/дата/поток обслуживания-->
        <voc id='medServiceForSpecStac' type='NativeVocService'>
			<NativeVocService
					from = 'MedService ms'
					parent="wf.id=:par1
					and (ms.startDate is null or to_date(:par2,'dd.mm.yyyy')  >=ms.startDate)
					and (ms.finishDate is null or ms.finishDate>=to_date(:par2,'dd.mm.yyyy'))
					and 1=(select count(vss.id) from vocServiceStream vss where vss.id=:par3 and (
					  (vss.isCalcOmcHosp='1' and (ms.isNoOmc is null or ms.isNoOmc='0'))
					  or ((vss.isCalcOmcHosp is null or vss.isCalcOmcHosp='0') and pl.id is not null)))"
					parentSplitCount='3'
					names = "ms.code||' '||ms.name"
					nameId="ms.id"
					queryAppend="ms.dtype='MedService' and (ms.isDayHospital='1' or ms.isHospital='1') and vst.code!='OPERATION'"
					join=" left join WorkFunctionService wfs on wfs.medService_id=ms.id
					left join WorkFunction wf on case when wfs.workfunction_id is null then wf.workFunction_id=wfs.vocWorkFunction_id else wf.id=wfs.workfunction_id end
					left join vocServiceType vst on ms.servicetype_id=vst.id
					left join pricemedservice pms on pms.medservice_id=ms.id
					left join priceposition pp on pp.id=pms.priceposition_id and pp.dateTo is null
            		left join pricelist pl on pl.id=pp.pricelist_id and pl.isDefault='1'
					"
					order='ms.code, ms.name'
					queried = "(upper(ms.code) like upper(:query) or upper(ms.code) like replace(upper(:query),'.','') or upper(ms.name) like UPPER(:query))"
					groupBy="ms.id, ms.code, ms.name"

			/>
		</voc>

    <voc id='medServiceByVocWorkFunction' type='NativeVocService'>
    	<NativeVocService
    			from = 'MedService ms'
    			parent="wfs.vocWorkFunction_id=:parent 
    			and (ms.startDate is null or current_date  >=ms.startDate) 
    			and (ms.finishDate is null or ms.finishDate>=current_date)"
    			names = "ms.code||' '||coalesce(case when ms.shortname='' then null else ms.shortname end,ms.name)"
    			nameId="ms.id"
    			queryAppend="ms.dtype='MedService' and ms.isPoliclinic='1'"
    			join=' left join WorkFunctionService wfs on wfs.medService_id=ms.id '
    			order=''
    			queried = "(upper(ms.code) like upper(:query) or upper(ms.code) like replace(upper(:query),'.','') or upper(ms.name) like UPPER(:query) or upper(ms.shortname) like UPPER(:query)) "
				groupBy="ms.id, ms.code, ms.name, ms.shortname"
    			 			
    	/>
    
    </voc>
    <voc id='medServiceForDirect' type='NativeVocService'>
    	<NativeVocService
    			from = 'MedService ms'
    			parent="m.id=:parent 
    			and (wfs.lpu_id is null or wf.dtype='PersonalWorkFunction' and wfs.lpu_id=w.lpu_id or wf.dtype='GroupWorkFunction' and wfs.lpu_id=wf.lpu_id )
    			and (ms.startDate is null or wcd.calendardate  >=ms.startDate) 
    			and (ms.finishDate is null or ms.finishDate>=wcd.calendardate)
    			"
    			
    			names = "ms.code||' '||ms.name"
    			nameId="ms.id"
    			queryAppend="ms.dtype='MedService' and ms.isPoliclinic='1'"
    			join=' left join WorkFunctionService wfs on wfs.medService_id=ms.id left join WorkFunction wf on wf.workFunction_id=wfs.vocWorkFunction_id left join medcase m on m.workFunctionPlan_id=wf.id left join WorkCalendarDay wcd on wcd.id=m.datePlan_id left join worker w on w.id=wf.worker_id'
    			order=''
    			queried = "(upper(ms.code) like upper(:query) or upper(ms.code) like replace(upper(:query),'.','') or upper(ms.name) like UPPER(:query))"
    			 			
    	/>
    
    </voc>

    <voc id='pregnancyByWoman' type='AllValueHelper'>
        <IAllValue>ru.ecom.mis.ejb.service.birth.PregnancyByWomanVoc</IAllValue>
    </voc>
    <voc id='pregnancyByPatient' type="NativeVocService">
    	<NativeVocService
    			from = 'Pregnancy preg'
    			names = "'Беременность: '||preg.orderNumber||' роды: '||preg.childbirthAmount"
    			nameId="preg.id"
    			queryAppend=''
    			parent=" pat.id=:parent "
    			join=' left join Patient pat on pat.id=preg.patient_id'
    			order=''
    			queried = " (cast(preg.id as varchar(20)) like :querId or cast(preg.orderNumber as varchar(5)) like :querId)"
    	/>
    </voc>
    

   <voc id='mainLpu' type='EntityVocService'>
        <EntityVocService
                entity  = 'ru.ecom.mis.ejb.domain.lpu.MisLpu'
                names   = 'omcCode,name'
                queried = 'name'
            queryAppend = "parent_id is null and (isArchive is null or isArchive='0') "
       queryConvertType = "UPPER_CASE"                
                />
    </voc>

    <voc id='groupWorkFunction' type='AllValueHelper'>
    	  <IAllValue>ru.ecom.mis.ejb.service.worker.GroupWorkFunctionVoc</IAllValue>
    </voc>
    
        
   <voc id='vocWorkCalendarType' type='EntityVocService'>
        <EntityVocService
                entity  = 'ru.ecom.mis.ejb.domain.workcalendar.voc.VocWorkCalendarType'
                names   = 'name'
                queried = 'name'
       queryConvertType = "UPPER_CASE"
                />
    </voc>
   <voc id='vocDisabilityDocumentType' type='EntityVocService'>
        <EntityVocService
                entity  = 'ru.ecom.mis.ejb.domain.disability.voc.VocDisabilityDocumentType'
                names   = 'name'
                queried = 'name'
                queryConvertType = 'UPPER_CASE'
                />
    </voc>
   <voc id='vocDisabilityStatus' type='EntityVocService'>
        <EntityVocService
                entity  = 'ru.ecom.mis.ejb.domain.disability.voc.VocDisabilityStatus'
                names   = 'name'
                queried = 'name'
                queryConvertType = 'UPPER_CASE'
                />
    </voc>
   <voc id='vocDisabilityStatusForDuplicate' type='EntityVocService'>
        <EntityVocService
                entity  = 'ru.ecom.mis.ejb.domain.disability.voc.VocDisabilityStatus'
                names   = 'name'
                queried = 'name'
                queryAppend="code!='0'"
                queryConvertType = 'UPPER_CASE'
                />
    </voc>
   <voc id='vocLpuFunction' type='EntityVocService'>
        <EntityVocService
                entity  = 'ru.ecom.mis.ejb.domain.lpu.voc.VocLpuFunction'
                names   = 'name'
                queried = 'name'
                />
    </voc>

    <voc id='lpuArea' type='EntityVocService'>
        <EntityVocService
                entity  = 'ru.ecom.mis.ejb.domain.lpu.LpuArea'
                names   = 'typeName,number'
                queried = 'number'
                />
    </voc>

    <voc id='lpuAreaWithParent' type='EntityVocService'>
        <EntityVocService
                entity  = 'ru.ecom.mis.ejb.domain.lpu.LpuArea'
                names   = 'typeName,number,comment'
                parent  = 'lpu'
                queried = 'number,comment'
                />
    </voc>
    <voc id='kinsmanByTicket' type='NativeVocService'>f
		    <NativeVocService
		    	from=" Kinsman as k "
		    	parent='k.person_id=(select m.person_id from medcard m where m.id=:parent)'
		    	nameId="k.id"
		    	join=" left join Patient as pk on pk.id=k.kinsman_id "
		    	queryAppend=""
		    	order=""
		    	queried=" pk.lastname like UPPER(:query) "
		    	names = " pk.lastname ||' '|| pk.firstname ||' '|| pk.middlename ||' гр ' || to_char(pk.birthday,'DD.MM.YYYY')"
		    />

    </voc>
    <voc id='kinsmanBySMO' type='NativeVocService'>
		    <NativeVocService
		    	from=" Kinsman as k "
		    	parent='k.person_id=:parent '
		    	nameId="k.id"
		    	join=" left join Patient as pk on pk.id=k.kinsman_id "
		    	queryAppend=""
		    	order=""
		    	queried=" pk.lastname like UPPER(:query) "
		    	names = " pk.lastname ||' '|| pk.firstname ||' '|| pk.middlename ||' гр ' || to_char(pk.birthday,'DD.MM.YYYY')"
		    />

    </voc>
    <voc id='kinsmanByDis' type='NativeVocService'>
		    <NativeVocService
		    	from=" Kinsman as k "
		    	parent='(k.person_id=:parent or  k.kinsman_id=:parent)'
		    	nameId="k.id"
		    	join="
		    	 left join Patient as pk on pk.id=k.kinsman_id 
		    	 left join Patient as pk1 on pk1.id=k.person_id 
		    	"
		    	queryAppend=""
		    	order=""
		    	queried=" pk.lastname like UPPER(:query) "
		    	names = " pk.lastname||'('||pk1.lastname||')' ||' '|| pk.firstname ||' '|| pk.middlename ||' гр ' || to_char(pk.birthday,'DD.MM.YYYY')"
		    />

    </voc>

    <voc id='lpuAreaAddressText' type='EntityVocService'>
        <EntityVocService
                entity  = 'ru.ecom.mis.ejb.domain.lpu.LpuAreaAddressText'
                names   = 'AddressText'
                queried = 'id'
                />
    </voc>


    <voc id='vocSex' type='EntityVocService'>
        <EntityVocService
                entity  = 'ru.ecom.mis.ejb.domain.patient.voc.VocSex'
                names   = 'name'
                queried = 'name'
                />
    </voc>

    <voc id='vocSocialStatus' type='NativeVocService'>
		    <NativeVocService
		    	from=" VocSocialStatus "
		    	parent=''
		    	nameId="id"
		    	join=""
		    	queryAppend=""
		    	order=""
		    	queried=" (omcCode like (:query) or name like UPPER(:query) or cast(id as varchar(20)) like (:querId)) "
		    	names = " omcCode ||' '|| name"
		    />
    </voc>
    <voc id='vocAdditionStatus' type='EntityVocService'>
        <EntityVocService
                entity  = 'ru.ecom.mis.ejb.domain.patient.voc.VocAdditionStatus'
                names   = 'name'
                queried = 'name'
                />
    </voc>

    <voc id='vocInsuranceCompany' type='EntityVocService'>
        <EntityVocService
                entity  = 'ru.ecom.expomc.ejb.domain.registry.RegInsuranceCompany'
                names   = 'omcCode,name'
                queried = 'omcCode,name'
                queryAppend = '(deprecated is null or deprecated = false) and (isRegion=true)'
                />
    </voc>
    <voc id='vocInsuranceCompanyAll' type='EntityVocService'>
        <EntityVocService
                entity  = 'ru.ecom.expomc.ejb.domain.registry.RegInsuranceCompany'
                names   = 'omcCode,name'
                queried = 'omcCode,name'
                queryAppend = '(deprecated is null or deprecated = false)'
                />
    </voc>

    <voc id='vocOrg' type='EntityVocService'>
        <EntityVocService
                entity  = 'ru.ecom.mis.ejb.domain.patient.voc.VocOrg'
                names   = 'oldFondNumber,name,fondNumber'
                queried = 'oldFondNumber,name,fondNumber'
                queryConvertType="UPPER_CASE"
                />
    </voc>

    <voc id='vocPassportWhomIssue' type="NativeVocService">
    	<NativeVocService
    			from = 'VocPassportWhomIssue vpwi'
    			names = "vpwi.code||' '||vpwi.name"
    			nameId="vpwi.id"
    			queryAppend=''
    			parent=""
    			join=''
    			order=''
    			queried = " (vpwi.code like :querId or vpwi.name like :query)"
    	/>

    </voc>
    <voc id='vocPassportBirthPlace' type="NativeVocService">
    	<NativeVocService
    			from = 'VocPassportBirthPlace vpbp'
    			names = "vpbp.name"
    			nameId="vpbp.id"
    			queryAppend=''
    			parent=""
    			join=''
    			order=''
    			queried = " (vpbp.name like :query)"
    	/>

    </voc>

    <voc id='Address-1' type='EntityVocService'>
        <EntityVocService
                entity  = 'ru.ecom.address.ejb.domain.address.Address'
                names   = 'name'
                queried = 'name'
                queryAppend = 'domen = 1'
       queryConvertType = 'FIRST_UPPER'
                />
    </voc>

    <voc id='Address-2' type='EntityVocService'>
        <EntityVocService
                entity  = 'ru.ecom.address.ejb.domain.address.Address'
                names   = 'name,typeName'
                queried = 'name'
                parent  = 'parent'
                queryAppend = 'domen = 2'
                queryConvertType = 'FIRST_UPPER'
                />
    </voc>

    <voc id='Address-3' type='EntityVocService'>
        <EntityVocService
                entity  = 'ru.ecom.address.ejb.domain.address.Address'
                names   = 'name,typeName'
                queried = 'name'
                parent  = 'parent'
                queryAppend = 'domen = 3'
                queryConvertType = 'FIRST_UPPER'
                />
    </voc>

    <voc id='Address-4' type='EntityVocService'>
        <EntityVocService
                entity  = 'ru.ecom.address.ejb.domain.address.Address'
                names   = 'name,typeName'
                queried = 'name'
                parent  = 'parent'
                queryAppend = 'domen = 4'
                queryConvertType = 'FIRST_UPPER'
                />
    </voc>

    <voc id='Address-5' type='EntityVocService'>
        <EntityVocService
                entity  = 'ru.ecom.address.ejb.domain.address.Address'
                names   = 'name,typeName'
                queried = 'name'
                parent  = 'parent'
                queryAppend = 'domen = 5'
                queryConvertType = 'FIRST_UPPER'
                />
    </voc>

    <voc id='Address-6' type='EntityVocService'>
        <EntityVocService
                entity  = 'ru.ecom.address.ejb.domain.address.Address'
                names   = 'name,typeName,postIndex'
                queried = 'name'
                parent  = 'parent'
                queryAppend = 'domen = 6'
                queryConvertType = 'FIRST_UPPER'
                />
    </voc>

    <voc id='vocAreaType' type='EntityVocService'>
        <EntityVocService
                entity  = 'ru.ecom.mis.ejb.domain.lpu.voc.VocAreaType'
                names   = 'name'
                queried = 'name'
                />
    </voc>

    <!-- Тип удостоверения личности -->
    <voc id='vocIdentityCard' type='EntityVocService'>
        <EntityVocService
                entity  = 'ru.ecom.mis.ejb.domain.patient.voc.VocIdentityCard'
                names   = 'name'
                queried = 'name'
            queryAppend = "(deprecated is null or deprecated=true)"
                />
    </voc>

    <!-- Оборудование -->
    <voc id='vocTypeEquip' type='EntityVocService'>
         <EntityVocService
                 entity  = 'ru.ecom.mis.ejb.domain.equipment.voc.VocTypeEquip'
                 names   = 'name'
                 queried = 'name'
                 />
     </voc>

     <voc id='vocMarka' type='EntityVocService'>
         <EntityVocService
                 entity  = 'ru.ecom.mis.ejb.domain.equipment.voc.VocMarka'
                 names   = 'name'
                 queried = 'name'
                 />
     </voc>

     <voc id='vocCreater' type='EntityVocService'>
         <EntityVocService
                 entity  = 'ru.ecom.mis.ejb.domain.equipment.voc.VocCreater'
                 names   = 'name'
                 queried = 'name'
                 />
     </voc>

     <voc id='vocProvider' type='EntityVocService'>
         <EntityVocService
                 entity  = 'ru.ecom.mis.ejb.domain.equipment.voc.VocProvider'
                 names   = 'name'
                 queried = 'name'
                 />
     </voc>
    
     <voc id='vocPrivilegeCategory' type='EntityVocService'>
         <EntityVocService
                 entity  = 'ru.ecom.mis.ejb.uc.privilege.domain.VocPrivilegeCategory'
                 names   = 'name'
                 queried = 'name'
                 />
     </voc>

     <voc id='vocPrivilegeCode' type='EntityVocService'>
         <EntityVocService
                 entity  = 'ru.ecom.mis.ejb.uc.privilege.domain.VocPrivilegeCode'
                 names   = 'code,name'
                 queried = 'code,name'
                 />
     </voc>

     <voc id='vocDrugForm' type='EntityVocService'>
         <EntityVocService
                 entity  = 'ru.ecom.mis.ejb.uc.privilege.domain.VocDrugForm'
                 names   = 'code,name'
                 queried = 'code,name'
                 />
     </voc>
     <voc id='vocDrugClassify' type='EntityVocService'>
         <EntityVocService
                 entity  = 'ru.ecom.mis.ejb.uc.privilege.domain.VocDrugClassify'
                 names   = 'code,name'
                 queried = 'code,name'
                 />
     </voc>
     <voc id='drugClassificator' type='EntityVocService'>
         <EntityVocService
                 entity  = 'ru.ecom.mis.ejb.uc.privilege.domain.DrugClassificator'
                 names   = 'name'
                 queried = 'name'
                 />
     </voc>

    <voc id='policyByPatient' type='EntityVocService'>
        <EntityVocService
                entity  = 'ru.ecom.mis.ejb.domain.patient.MedPolicyOmc'
                names   = 'text'
                parent  = 'patient'
                queried = 'polNumber'
                />
    </voc>
        <!-- Вакцинация -->
    <voc id='vaccineVocCommonReaction' type='EntityVocService'>
        <EntityVocService
                entity  = 'ru.ecom.mis.ejb.domain.vaccination.voc.VaccineVocCommonReaction'
                names   = 'name'
                queried = 'name'
                />
    </voc>  
    <voc id='vocVaccinationReaction' type='EntityVocService'>
        <EntityVocService
                entity  = 'ru.ecom.mis.ejb.domain.vaccination.voc.VocVaccinationReaction'
                names   = 'name'
                queried = 'name'
                />
    </voc>  
    <voc id='vocVaccinationCommonReaction' type='EntityVocService'>
        <EntityVocService
                entity  = 'ru.ecom.mis.ejb.domain.vaccination.voc.VocVaccinationCommonReaction'
                names   = 'name'
                queried = 'name'
                />
    </voc>    
    <voc id='vaccineVocLocalReaction' type='EntityVocService'>
        <EntityVocService
                entity  = 'ru.ecom.mis.ejb.domain.vaccination.voc.VaccineVocLocalReaction'
                names   = 'name'
                queried = 'name'
                />
    </voc> 
    <voc id='vocVaccinationLocalReaction' type='EntityVocService'>
        <EntityVocService
                entity  = 'ru.ecom.mis.ejb.domain.vaccination.voc.VocVaccinationLocalReaction'
                names   = 'name'
                queried = 'name'
                />
    </voc> 
    <voc id='vocVaccinationMaterial' type='EntityVocService'>
        <EntityVocService
                entity  = 'ru.ecom.mis.ejb.domain.vaccination.voc.VocVaccinationMaterial'
                names   = 'name'
                queried = 'name'
                 parent  = 'vaccine'  
                />
    </voc> 
    <voc id='vaccineVocMethod' type='EntityVocService'>
        <EntityVocService
                entity  = 'ru.ecom.mis.ejb.domain.vaccination.voc.VaccineVocMethod'
                names   = 'name'
                queried = 'name'
                />
    </voc> 
    <voc id='vocVaccinationMethod' type='EntityVocService'>
        <EntityVocService
                entity  = 'ru.ecom.mis.ejb.domain.vaccination.voc.VocVaccinationMethod'
                names   = 'name'
                queried = 'name'
       queryConvertType = 'UPPER_CASE'
                />
    </voc> 
    <voc id='vocVaccinationPhase' type='EntityVocService'>
        <EntityVocService
                entity  = 'ru.ecom.mis.ejb.domain.vaccination.voc.VocVaccinationPhase'
                names   = 'name'
                queried = 'name'
       queryConvertType = 'UPPER_CASE'
                />
    </voc> 

    <voc id='vocVaccinationReasonType' type='EntityVocService'>
        <EntityVocService                                         
                entity  = 'ru.ecom.mis.ejb.domain.vaccination.voc.VocVaccinationReasonType'
                names   = 'name'
                queried = 'name'
       queryConvertType = 'UPPER_CASE'
                />
    </voc>
    <voc id='vocEstopType' type='EntityVocService'>
        <EntityVocService
                entity  = 'ru.ecom.mis.ejb.domain.vaccination.voc.VocVaccinationEstopType'
                names   = 'name'
                queried = 'name'
                />
    </voc> 
    <voc id='vaccine' type='EntityVocService'>
        <EntityVocService
                entity  = 'ru.ecom.mis.ejb.domain.vaccination.Vaccine'
                names   = 'name'
                queried = 'name'
       queryConvertType = 'UPPER_CASE'
                
                />
    </voc> 
    <voc id='vaccineVocNosology' type='EntityVocService'>
        <EntityVocService
                entity  = 'ru.ecom.mis.ejb.domain.vaccination.voc.VaccineVocNosology'
                names   = 'name'
                queried = 'name'
                />
    </voc>     
    <voc id='vaccinationNosology' type='EntityVocService'>
        <EntityVocService
                entity  = 'ru.ecom.mis.ejb.domain.vaccination.VaccinationNosology'
                names   = 'name'
                queried = 'name'
                />
    </voc>     
    <!--Сотрудник-->
    <voc id='vocWorker' type='EntityVocService'>
        <EntityVocService
                entity  = 'ru.ecom.mis.ejb.domain.worker.Worker'
                names   = 'person.lastname, person.firstname, person.middlename'
                queried = 'person.lastname, person.firstname, person.middlename'
                />
    </voc>

     <voc id='vocWorkCalendarDayByWorkFunction' type='NativeVocService'>
    	<NativeVocService
    			from = 'WorkCalendarDay as wcd '
    			parent = " wc.workFunction_id = :parent "
    			names  = "to_char(wcd.calendarDate,'DD.MM.YYYY')"
    			queried =" (to_char(wcd.calendarDate,'DD.MM.YYYY') like :query ) "
    			queryAppend = "(wcd.isDeleted is null or wcd.isDeleted='0')"
    			order ='wcd.calendarDate'
    			nameId='wcd.id'
    			join='left join WorkCalendar as wc on wc.id=wcd.workCalendar_id '
    	/>
    </voc>
     <voc id='disabilityDocumentByCase'  type='EntityVocService'>
     	<EntityVocService
     			entity='ru.ecom.mis.ejb.domain.disability.DisabilityDocument'
     			names = 'series,number'
     			queried="number"
     			parent = 'disabilityCase_id'
     	/>
     </voc>
     <voc id='disabilityDocumentByPatient'  type='NativeVocService'>
    	<NativeVocService
    			from = 'DisabilityDocument as dd '
    			parent = " dc.patient_id = :parent "
    			names  = " dd.number "
    			queried =" (dd.number like :query ) "
    			queryAppend = " "
    			order =''
    			nameId='dd.id'
    			join=' left join DisabilityCase dc on dc.id=dd.disabilityCase_id'
    	/>
     </voc>

      <voc id='vocWorkCalendarTimeWorkCalendarDayAndPatient' type='NativeVocService'>
    	<NativeVocService  

    			from = 'WorkCalendarTime as wct '
    			parent = " wct.workCalendarDay_id = :par1 and ((mc.patient_id= :par2 and mc.dateStart is null) or ( wct.medCase_id is null and wct.prescription is null and wct.prepatient_id is null and (wct.prepatientinfo is null or wct.prepatientinfo='') and vsrt.id is null))"
    			names  = " cast(wct.timeFrom as varchar(5)) "
    			queried =" (cast(wct.timeFrom as varchar(5)) like :query ) "
    			order =''
				queryAppend =" (wct.isDeleted is null or wct.isDeleted='0')"
    			nameId='wct.id'
    			join=' left join VocServiceReserveType vsrt on vsrt.id=wct.reserveType_id
    			left join MedCase mc on mc.id=wct.medCase_id'
    			parentSplitCount="2"
    	/>
    </voc>
	<voc id="vocWayOfRecord" type="NativeVocService">
		<NativeVocService
				from="VocWayOfRecord voc"
				nameId="voc.id"
				order="voc.name"
				names="voc.name"
		/>
	</voc>
     <voc id='vocWorkCalendarTimeWorkCalendarDay' type='NativeVocService'>
    	<NativeVocService  
    			from = 'WorkCalendarTime as wct '
    			parent = " wct.workCalendarDay_id = :parent "
    			names  = " cast(wct.timeFrom as varchar(5)) "
    			queried =" (cast(wct.timeFrom as varchar(5)) like :query ) "
    			queryAppend = " wct.medCase_id is null and wct.prescription is null and wct.prepatient_id is null and (wct.prepatientinfo is null or wct.prepatientinfo='') and vsrt.id is null and (wct.isDeleted is null or wct.isDeleted='0')"
    			order =''
    			nameId='wct.id'
    			join=' left join VocServiceReserveType vsrt on vsrt.id=wct.reserveType_id'
    	/>
    </voc>
     <voc id='workCalendarTimeByDate' type='NativeVocService'>
    	<NativeVocService
    			from = 'WorkCalendarTime as wct '
    			parent = " wc.workFunction_id = :par1 and wcd.calendarDate = to_date(:par2,'dd.mm.yyyy')"
    			names  = " to_char(wcd.calendarDate,'dd.mm.yyyy')||' '||cast(wct.timeFrom as varchar(5)) "
    			queried =" (cast(wct.timeFrom as varchar(5)) like :query ) "
    			queryAppend = " wct.medCase_id is null and wct.prescription is null and wct.prepatient_id is null and (wct.prepatientinfo is null or wct.prepatientinfo='') and (wct.isDeleted is null or wct.isDeleted='0') "
    			order =''
    			nameId='wct.id'
    			join=' left join WorkCalendarDay wcd on wcd.id=wct.workCalendarDay_id left join WorkCalendar wc on wc.id=wcd.workCalendar_id'
    			parentSplitCount="2"
    			
    	/>
    </voc>
    <!-- Закрытые СПО у пациента -->
    <voc id='vocClosedSpoByPatient' type='NativeVocService'>
    	<NativeVocService
    			from = 'MedCase as smc '
    			parent = "smc.patient_id=:par1 and smc.datefinish+coalesce(:par3,30)>=to_date(:par2,'dd.MM.yyyy')"
    			names  = "coalesce(to_char(smc.dateStart,'dd.mm.yyyy'),'нет даты начала ')||coalesce('-'||to_char(smc.dateFinish,'dd.mm.yyyy'),'')||' '||vwf.name||' '|| p.lastname||' '||p.firstname||' '||p.middlename "
    			queried =" (cast(wf.id as varchar(20))= :querId or vwf.name like UPPER(:query) or p.lastname like UPPER(:query) )"
    			queryAppend = " smc.dtype='PolyclinicMedCase' and smc.dateFinish is not null "
    			order =''
    			nameId='smc.id'
    			join='left join WorkFunction wf on wf.id=smc.ownerFunction_id left join Worker as w on w.id=wf.worker_id left join Patient as p on p.id=w.person_id left join VocWorkFunction vwf on vwf.id=wf.workFunction_id'
    			parentSplitCount="3"
    	/>
        <EntityVocService
                entity  = 'ru.ecom.mis.ejb.domain.medcase.PolyclinicMedCase'
                names   = 'dateStart,dateFinish,ownerFunction.workFunctionInfo'
                queried = 'ownerFunction.worker.person.lastname'
            queryAppend = 'dateFinish is not null'
                parent  = 'patient_id'
        />
     </voc> 
    <!-- Открытые СПО у пациента -->
    <voc id='vocOpenedSpoByPatient' type='NativeVocService'>
    	<NativeVocService
    			from = 'MedCase as smc '
    			parent = 'smc.patient_id=:parent'
    			names  = "coalesce(to_char(smc.dateStart,'dd.mm.yyyy'),'нет даты начала ')||coalesce('-'||to_char(smc.dateFinish,'dd.mm.yyyy'),'')||' '||vwf.name||' '|| p.lastname||' '||p.firstname||' '||p.middlename "
    			queried =" (cast(wf.id as varchar(20))= :querId or vwf.name like UPPER(:query) or p.lastname like UPPER(:query) )"
    			queryAppend = " smc.dtype='PolyclinicMedCase' and smc.dateFinish is null "
    			order =''
    			nameId='smc.id'
    			join='left join WorkFunction wf on wf.id=smc.ownerFunction_id left join Worker as w on w.id=wf.worker_id left join Patient as p on p.id=w.person_id left join VocWorkFunction vwf on vwf.id=wf.workFunction_id'
    	/>
        <EntityVocService
                entity  = 'ru.ecom.mis.ejb.domain.medcase.PolyclinicMedCase'
                names   = 'dateStart,dateFinish,ownerFunction.workFunctionInfo'
                queried = 'ownerFunction.worker.person.lastname'
            queryAppend = 'dateFinish is null'
                parent  = 'patient_id'
        />
     </voc> 


	<!-- Рабочая функция -->

    <voc id='workFunction' type='NativeVocService'>
    	<NativeVocService
    			from = 'WorkFunction as wf '
    			parent = ''
    			names  = "vwf.name||' '|| p.lastname||' '||p.firstname||' '||p.middlename ||' ' ||case when wf.dtype='PersonalWorkFunction' then ml2.name else ml1.name end"
    			queried =" (cast(wf.id as varchar(20))= :querInd or
    			upper(vwf.name) like UPPER(:query) or
    			 (upper(p.lastname) like upper(:quer1)
    			 and (:quer2 is null or upper(p.firstname) like upper(:quer2))
    			and (:quer3 is null or upper(p.middlename) like upper(:quer3))) )"
    			queryAppend = " wf.dtype='PersonalWorkFunction' and (wf.archival is null or wf.archival='0')"
    			queriedSplitCount="3"
    			
    			order =''
    			nameId='wf.id'
    			join='left join Worker as w on w.id=wf.worker_id 
    			left join MisLpu ml1 on ml1.id=wf.lpu_id
    			left join MisLpu ml2 on ml2.id=w.lpu_id
    			
    			left join Patient as p on p.id=w.person_id 
    			left join VocWorkFunction vwf on vwf.id=wf.workFunction_id'
    	/>
    </voc>
	<voc id='workFunctionCons' type='NativeVocService'>
		<NativeVocService
				from = 'WorkFunction as wf '
				parent = ''
				names  = "wf.groupname"
				queried =" (cast(wf.id as varchar(20))= :querInd or
    			upper(vwf.name) like UPPER(:query)  )"
				queryAppend = "wf.dtype='GroupWorkFunction' and (wf.archival is null or wf.archival='0')
				and (vwf.isfuncdiag  is null or vwf.isfuncdiag='0')
				and (vwf.islab  is null or vwf.islab='0')
				and (vwf.isradiationdiagnosis  is null or vwf.isradiationdiagnosis='0')
				and vlf.code='3'
				"
				queriedSplitCount="3"

				order =''
				nameId='wf.id'
				join='left join VocWorkFunction vwf on vwf.id=wf.workFunction_id
				left join MisLpu ml on ml.id=wf.lpu_id
				left join VocLpuFunction vlf on vlf.id=ml.lpuFunction_id'
		/>
	</voc>
	<voc id='workFunctionAllForExpert' type='NativeVocService'>
		<NativeVocService
				from = 'WorkFunction as wf '
				parent = ''
				names  = "vwf.name||' '|| p.lastname||' '||p.firstname||' '||p.middlename ||' ' ||case when wf.dtype='PersonalWorkFunction' then ml2.name else ml1.name end"
				queried =" (cast(wf.id as varchar(20))= :querInd or
    			upper(vwf.name) like UPPER(:query) or
    			 (upper(p.lastname) like upper(:quer1)
    			 and (:quer2 is null or upper(p.firstname) like upper(:quer2))
    			and (:quer3 is null or upper(p.middlename) like upper(:quer3))) )"
				queryAppend = " wf.dtype='PersonalWorkFunction'"
				queriedSplitCount="3"

				order =''
				nameId='wf.id'
				join='left join Worker as w on w.id=wf.worker_id
    			left join MisLpu ml1 on ml1.id=wf.lpu_id
    			left join MisLpu ml2 on ml2.id=w.lpu_id

    			left join Patient as p on p.id=w.person_id
    			left join VocWorkFunction vwf on vwf.id=wf.workFunction_id'
		/>
	</voc>
	<voc id='workFunctionByDirect' type='NativeVocService'>
    	<NativeVocService
    			from = 'WorkFunction as wf '
    			parent = ''
    			names  = "vwf.name||' '||case when w.person_id is null then wf.groupName||' ('||mlGr.name||')' else p.lastname||' '||p.firstname||' '||p.middlename||' ('||mlW.name||')' end "
    			queried =" (cast(wf.id as varchar(20)) = :querInd or vwf.name like UPPER(:query) or p.lastname like UPPER(:query) or wf.groupName like UPPER(:query) )"
    			queryAppend = "wc.id is not null and wf.group_id is null and (wf.archival is null or wf.archival='0')"
    			order =''
    			nameId='wf.id'
    			join='left join Worker as w on w.id=wf.worker_id left join Patient as p on p.id=w.person_id inner join VocWorkFunction vwf on vwf.id=wf.workFunction_id left join WorkCalendar wc on wc.workFunction_id=wf.id left join mislpu mlGr on mlGr.id=wf.lpu_id left join mislpu mlW on mlW.id=w.lpu_id '
    	/>
    </voc>
   <voc id='role' type='EntityVocService'>
        <EntityVocService
                entity  = 'ru.ecom.jaas.ejb.domain.SecRole'
                names   = 'key,name'
                queried = 'key,name'
       queryConvertType = "UPPER_CASE"                
       			 parent = ""
                />
    </voc>
    <voc id='workFunctionByTicket' type='NativeVocService'>
    	<NativeVocService
    			from = 'WorkFunction as wf '
    			parent = " (select m.id from medcard as m where m.id=:parent and (m.lpu_id is null or w.lpu_id=m.lpu_id))>0 "
    			names  = "vwf.name||' '|| p.lastname||' '||p.firstname||' '||p.middlename ||' ('||ml.name||')'"
    			queried =" (cast(wf.id as varchar(6)) like :querId or wf.code like :querId or p.lastname like UPPER(:query)) "
    			queryAppend = "wf.DTYPE ='PersonalWorkFunction' and (wf.archival is null or wf.archival='0')"
    			order =''
    			nameId='wf.id'
    			join='left join Worker as w on w.id=wf.worker_id left join Patient as p on p.id=w.person_id left join VocWorkFunction vwf on vwf.id=wf.workFunction_id left join MisLpu ml on ml.id=w.lpu_id'
    	/>
    </voc>
    <voc id='workFunctionByLpu' type='NativeVocService'>
    	<NativeVocService
    			from = 'WorkFunction as wf '
    			parent = "  (w.lpu_id=:parent) "
    			names  = "case when wf.code is null then '' else wf.code||' ' end || vwf.name||' '|| p.lastname||' '||p.firstname||' '||p.middlename "
    			queried =" (cast(wf.id as varchar(10)) like :querId or wf.code like :querId or p.lastname like UPPER(:query)) "
    			queryAppend = "wf.DTYPE ='PersonalWorkFunction' and (wf.archival is null or cast(wf.archival as integer)=0)"
    			order =''
    			nameId='wf.id'
    			join='left join Worker as w on w.id=wf.worker_id left join Patient as p on p.id=w.person_id inner join VocWorkFunction vwf on vwf.id=wf.workFunction_id '
    	/>
    </voc>
    <voc id='workFunctionIsSurgical' type='NativeVocService'>
    	<NativeVocService
    			from = 'WorkFunction as wf '
    			parent = ""
    			names  = "case when wf.code is null then '' else wf.code||' ' end || vwf.name||' '|| p.lastname||' '||p.firstname||' '||p.middlename "
    			queried =" (cast(wf.id as varchar(10)) like :querId or wf.code like :querId or p.lastname like UPPER(:query)) "
    			queryAppend = "wf.DTYPE ='PersonalWorkFunction' and (wf.archival is null or wf.archival='0') and (wf.isSurgical='1')"
    			order =''
    			nameId='wf.id'
    			join='left join Worker as w on w.id=wf.worker_id left join Patient as p on p.id=w.person_id inner join VocWorkFunction vwf on vwf.id=wf.workFunction_id '
    	/>
    </voc>
    <voc id='workFunctionIsInstrumentNurse' type='NativeVocService'>
    	<NativeVocService
    			from = 'WorkFunction as wf '
    			parent = ""
    			names  = "case when wf.code is null then '' else wf.code||' ' end || vwf.name||' '|| p.lastname||' '||p.firstname||' '||p.middlename "
    			queried =" (cast(wf.id as varchar(10)) like :querId or wf.code like :querId or p.lastname like UPPER(:query)) "
    			queryAppend = "wf.DTYPE ='PersonalWorkFunction' and (wf.archival is null or wf.archival='0') and (wf.isInstrumentNurse='1')"
    			order =''
    			nameId='wf.id'
    			join='left join Worker as w on w.id=wf.worker_id left join Patient as p on p.id=w.person_id inner join VocWorkFunction vwf on vwf.id=wf.workFunction_id '
    	/>
    </voc>
    <voc id="medcardLast" type="NativeVocService">
    	<NativeVocService
    		from="Medcard m"
    		nameId="m.id"
    		queryAppend=""
    		names="m.number "
    		queried="m.number like UPPER(:query)"
    	/>
    </voc>
    <voc id="psychiatricCareCard" type="NativeVocService">
    	<NativeVocService
    		from="PsychiatricCareCard pcc"
    		names="pcc.cardNumber ||' '||  coalesce((select vpac.code||' '||to_char(po.startDate,'dd.mm.yyyy') from PsychiaticObservation po left join VocPsychAmbulatoryCare vpac on vpac.id=po.ambulatoryCare_id where po.carecard_id=pcc.id  having po.startDate=max(po.startDate)),'-')"
    		nameId="pcc.id"
    		join=""
    		queried="pcc.cardNumber like UPPER(:query)"
    		
    	/>
    </voc>
    <voc id="psychiatricCareCardBySuiMes" type="NativeVocService">
    	<NativeVocService
    		from="PsychiatricCareCard pcc"
    		names="pcc.cardNumber "
    		nameId="pcc.id"
    		join="
    		left join suicidemessage sm on sm.patient_id=pcc.patient_id
    		"
    		queried="pcc.cardNumber like UPPER(:query)"
    		parent="sm.id=:parent"
    		
    	/>
    </voc>

    <voc id='workFunctionByDoctor' type='NativeVocService'>
    	<NativeVocService
    			from = 'WorkFunction as wf '
    			parent=' wf1.id = :parent '
    			names  = "vwf.name||' '|| p.lastname||' '||p.firstname||' '||p.middlename "
    			queried =" (wf.id like :query or p.lastname like UPPER(:query)) "
    			queryAppend = "wf.DTYPE ='PersonalWorkFunction' and (wf.archival is null or cast(wf.archival as integer)=0)"
    			order =''
    			nameId='wf.id'
    			join='left join WorkFunction wf1 on wf1.worker_id=wf.worker_id left join SecUser su on su.id=wf1.secuser_id left join Worker as w on w.id=wf.worker_id left join Patient as p on p.id=w.person_id inner join VocWorkFunction vwf on vwf.id=wf.workFunction_id '
    			
    	/>
    </voc>

    <!-- Находим страховую компанию по окато территории, не по коду фонда, ибо в противном случае находится не то что нужно-->
   <voc id='omcSprSmo' type='NativeVocService'>
		    <NativeVocService
		    	from=" OMC_SPRSMO as oss "
		    	parent='okt.id=:parent'
		    	nameId="oss.id"
		    	join=" left join Omc_KodTer as okt on oss.smocode like okt.voc_code||'%' "
		    	queryAppend=" oss.smoCode is not null and (oss.finishDate is null or oss.finishDate>=current_date)"
		    	order=""
		    	queried=" oss.name like UPPER(:query) "
		    	names = " oss.name"
		    />

    </voc>

    <voc id='allSMO' type="NativeVocService">
    	<NativeVocService
    		from = ' MedCase as smo '
    		parent=''
    		names=" case when smo.dtype='POLYCLINICMEDCASE' then 'СПО: '||smo.id when smo.dtype='HOSPITALMEDCASE' and smo.statisticstub_id is not null then 'СЛС: '||ss.code else 'СЛС: нет №стат.карты' end  || ' ' || p.lastname||' '||p.firstname||' '||p.middlename" 
    		nameId=" smo.id "
    		queried=" ss.code like :query or smo.id like :query  or p.lastname like upper(:query) or (p.lastname like $piece(upper(:query),' ',1)||'%' and (p.firstname like $piece(upper(:query),' ',2)||'%' or $piece(upper(:query),' ',2) is null) and (p.middlename like $piece(upper(:query),' ',3)||'%' or $piece(:query,' ',3) is null))"
    		queryAppend=" (smo.DTYPE='HOSPITALMEDCASE' or smo.DTYPE='POLYCLINICMEDCASE') "
    		join=' left join statisticstub ss on smo.statisticstub_id=ss.id  left join patient p on p.id=smo.patient_id '
    		order=""
    		/>
    </voc>

     <voc id='sloBySLS' type='NativeVocService'>
    	<NativeVocService 
    		from = ' medcase smoD '
    		parent='  smoD.parent_id = :parent '
    		names=" dep.name || ' ' || vwf.name||' '||wp.lastname|| ' '||wp.firstname||' '||wp.middlename " 
    		nameId=" smoD.id "
    		queried=" upper(dep.name) like upper(:query) "
    		queryAppend=" smoD.DTYPE='DepartmentMedCase' "
    		join= "left join MisLpu dep on smoD.department_id=dep.id
left join workfunction wf on wf.id=smoD.ownerFunction_id
left join VocWorkfunction vwf on vwf.id=wf.workFunction_id
left join worker w on w.id=wf.worker_id
left join patient wp on wp.id=w.person_id "
    		order=""
    	/>
    </voc>
     <voc id='departmentBySMO' type='NativeVocService'>
    	<NativeVocService 
    		from = ' MisLpu dep '
    		parent='  smoD.parent_id = :parent '
    		names=" dep.name " 
    		nameId=" dep.id "
    		queried=" upper(dep.name) like upper(:query) "
    		queryAppend=""
    		join= "left join medcase smoD on smoD.department_id =dep.id and smoD.DTYPE='DepartmentMedCase' "
    		order=""
    	/>
    </voc>
     <voc id='departmentIntake' type='NativeVocService'>
    	<NativeVocService 
    		from = ' MisLpu dep '
    		parent=' '
    		names=" dep.name " 
    		nameId=" dep.id "
    		queried=" upper(dep.name) like upper(:query) "
    		queryAppend="dep.isIntakeBioMaterial='1'"
    		join= ""
    		order=""
    	/>
    </voc>

    <voc id='workCalendar' type='EntityVocService'>
        <EntityVocService
                entity  = 'ru.ecom.mis.ejb.domain.workcalendar.WorkCalendar'
                names   = 'id'
                queried = ''
        />
    </voc> 
    
    <voc id='secUser' type='EntityVocService'>
        <EntityVocService
                entity  = 'ru.ecom.jaas.ejb.domain.SecUser'
                names   = 'login, fullname'
                queried = 'login, fullname'
        />
    </voc>

	<voc id='secUserEnabledCopy' type='EntityVocService'>
		<EntityVocService
				entity  = 'ru.ecom.jaas.ejb.domain.SecUser'
				names   = 'login, fullname'
				queried = 'login, fullname'
				queryAppend="enabledForCopy='1'"
		/>
	</voc>

    <voc id='secGroup' type='EntityVocService'>
        <EntityVocService
                entity  = 'ru.ecom.jaas.ejb.domain.SecGroup'
                names   = 'name'
                queried = 'name'
        />
    </voc> 

    <!-- Диагнозы -->
    <!-- FIXME дописать -->
    <voc id='diagnosisByDiagnosisSpo' type='EntityVocService'>
        <EntityVocService
                entity  = 'ru.ecom.mis.ejb.domain.medcase.Diagnosis'
                names   = 'name, idc10.code'
                queried = ''
        />
    </voc> 
    

    <!--unused
    <voc id='vocSexPermission' type='EntityVocService'>
        <EntityVocService
                entity  = 'ru.ecom.expomc.ejb.domain.med.voc.VocSexPermission'
                names   = 'name'
                queried = 'name'
        />
    </voc>  -->

    <voc id='vocWorkPlaceType' type='EntityVocService'>
        <EntityVocService
                entity  = 'ru.ecom.mis.ejb.domain.patient.voc.VocWorkPlaceType'
                names   = 'name'
                queried = 'name'
        />
    </voc> 

    <voc id='vocServiceStream' type='EntityVocService'>
        <EntityVocService
                entity  = 'ru.ecom.mis.ejb.domain.workcalendar.voc.VocServiceStream'
                names   = 'name'
                queried = 'name'
                queryConvertType="UPPER_CASE"
                queryAppend=" (deprecated is null or deprecated=false) "
        />
    </voc> 

    
    <voc id='vocDiagnosisRegistrationType' type='EntityVocService'>
        <EntityVocService
                entity  = 'ru.ecom.mis.ejb.domain.medcase.voc.VocDiagnosisRegistrationType'
                names   = 'name'
                queried = 'name'
       queryConvertType = "UPPER_CASE"                
        />
    </voc> 
    <!-- Диетология -->

    <voc id='vocDishType' type='EntityVocService'>
        <EntityVocService
                entity  = 'ru.ecom.mis.ejb.domain.diet.voc.VocDishType'
                names   = 'name'
                queried = 'name'
        />
    </voc> 
    <voc id='Diet' type='EntityVocService'>
        <EntityVocService
                entity  = 'ru.ecom.mis.ejb.domain.diet.Diet'
                names   = 'name'
                queried = 'name'
                queryAppend="(isArchival is null or isArchival='0')"
        />
    </voc> 
    <voc id='parentDiet' type='EntityVocService'>
        <EntityVocService
                entity  = 'ru.ecom.mis.ejb.domain.diet.Diet'
                names   = 'name'
                queried = 'name'
                queryAppend = 'parent_id is null'
        />
    </voc>     

     <voc id='vocMealTime' type='EntityVocService'>
        <EntityVocService
                entity  = 'ru.ecom.mis.ejb.domain.diet.voc.VocMealTime'
                names   = 'name'
                queried = 'name'
        />
    </voc> 

    <voc id='vocWeekDay' type='EntityVocService'>
        <EntityVocService
                entity  = 'ru.ecom.mis.ejb.domain.workcalendar.voc.VocWeekDay'
                names   = 'name'
                queried = 'name'
        />
    </voc> 
    
    <voc id='Dish' type='EntityVocService'>
        <EntityVocService
                entity  = 'ru.ecom.mis.ejb.domain.diet.Dish'
                names   = 'name'
                queried = 'name'
        />
    </voc> 
    
    <voc id='vocProcessingType' type='EntityVocService'>
        <EntityVocService
                entity  = 'ru.ecom.mis.ejb.domain.diet.voc.VocProcessingType'
                names   = 'name'
                queried = 'name'
        />
    </voc> 
    
    <voc id='vocFoodStuff' type='EntityVocService'>
        <EntityVocService
                entity  = 'ru.ecom.mis.ejb.domain.diet.voc.VocFoodStuff'
                names   = 'name'
                queried = 'name'
        />
    </voc> 
    
    <voc id='vocMonth' type='EntityVocService'>
        <EntityVocService
                entity  = 'ru.ecom.mis.ejb.domain.diet.voc.VocMonth'
                names   = 'name'
                queried = 'name'
        />
    </voc> 
    
<!--Назначения на лечение    -->
	
	<!-- Справочник единиц измерения количества лекарства-->
	<voc id='vocDrugAmountUnit' type = 'EntityVocService'>
		<EntityVocService
				entity = 'ru.ecom.mis.ejb.domain.prescription.voc.VocDrugAmountUnit'
				names = 'name'
				queried = 'name'
		/>
	</voc>
	
	<!-- Справочник длительности использования-->
	<voc id='vocDurationUnit' type = 'EntityVocService'>
		<EntityVocService
				entity = 'ru.ecom.mis.ejb.domain.prescription.voc.VocDurationUnit'
				names = 'name'
				queried = 'name'
		/>
	</voc>
	
	<!-- Справочник единиц частоты использования-->
	<voc id='vocFrequencyUnit' type = 'EntityVocService'>
		<EntityVocService
				entity = 'ru.ecom.mis.ejb.domain.prescription.voc.VocFrequencyUnit'
				names = 'name'
				queried = 'name'
		/>
	</voc>
	
	<!-- Справочник причин отмены назначений-->
	<voc id='vocPrescriptCancelReason' type='EntityVocService'>
        <EntityVocService
                entity  = 'ru.ecom.mis.ejb.domain.prescription.voc.VocPrescriptCancelReason'
                names   = 'name'
                queried = 'name'
        />
    </voc> 
	
	<!-- Справочник состояний завершения назначения-->
	<voc id='vocPrescriptFulfilState' type = 'EntityVocService'>
		<EntityVocService
				entity = 'ru.ecom.mis.ejb.domain.prescription.voc.VocPrescriptFulfilState'
				names = 'name'
				queried = 'name'
		/>
	</voc>
	
	<!-- Справочник типов порядка использования-->
	<voc id='vocPrescriptOrderType' type = 'EntityVocService'>
		<EntityVocService
				entity = 'ru.ecom.mis.ejb.domain.prescription.voc.VocPrescriptOrderType'
				names = 'name'
				queried = 'name'
		/>
	</voc>
	
	<!-- Справочник методов введения-->
	<voc id='vocDrugMethod' type = 'EntityVocService'>
		<EntityVocService
				entity = 'ru.ecom.mis.ejb.uc.privilege.domain.voc.VocDrugMethod'
				names = 'name'
				queried = 'name'
		/>
	</voc>
	
	<!-- Справочник типов свертывания коек-->
	<voc id='vocBedReductionType' type='EntityVocService'>
        <EntityVocService
                entity  = 'ru.ecom.mis.ejb.domain.lpu.voc.VocBedReductionType'
                names   = 'name'
                queried = 'name'
                />
    </voc>
    
    <!-- Справочник типов коек (дневной, круглосуточный)-->
	<voc id='vocBedSubType' type='EntityVocService'>
        <EntityVocService
                entity  = 'ru.ecom.mis.ejb.domain.lpu.voc.VocBedSubType'
                names   = 'name'
                queried = 'name'
                />
    </voc>
    
    <!-- Справочник по ДТП-->
	<voc id='omcRoadTrafficInjury' type='EntityVocService'>
        <EntityVocService
                entity  = 'ru.ecom.expomc.ejb.domain.omcvoc.OmcRoadTrafficInjury'
                names   = 'name'
                queried = 'name'
                />
    </voc>
    <!-- Нетрудоспособность-->
    <!-- Причина закрытия листка нетрудоспособности-->
	<voc id='vocDisabilityDocumentCloseReason' type='EntityVocService'>
        <EntityVocService
                entity  = 'ru.ecom.mis.ejb.domain.disability.voc.VocDisabilityDocumentCloseReason'
                names   = 'codeF,name'
                queried = 'codeF,name'
                queryConvertType = 'UPPER_CASE'
                queryAppend="(disable is null or disable=false)"
                />
    </voc>
    
    <!-- Причина нетрудоспособности-->
	<voc id='vocDisabilityReason' type='NativeVocService'>
		<NativeVocService
			from="VocDisabilityReason"
			nameId="id"
			names="' '||codeF||' '||name"
			queried="codeF like :querId or UPPER(name) like UPPER(:query)"
			queryAppend="(disable is null or cast(disable as int)=0)"
			join=""
			/>
    </voc>
	<!-- Доп. причина нетрудоспособности-->
	<voc id='vocDisabilityReason2' type='NativeVocService'>
		<NativeVocService
				from="VocDisabilityReason2"
				nameId="id"
				names="code||' '||name"
				queried="code like :querId or UPPER(name) like UPPER(:query)"
				queryAppend=""
				join=""
		/>
	</voc>
    <!-- Режим нетрудоспособности-->
	<voc id='vocDisabilityRegime' type='EntityVocService'>
        <EntityVocService
                entity  = 'ru.ecom.mis.ejb.domain.disability.voc.VocDisabilityRegime'
                names   = 'code,name'
                queried = 'code,name'
                queryConvertType = 'UPPER_CASE'
                />
    </voc>
    <!-- Тип нарушения -->
	<voc id='vocRegimeViolationType' type='EntityVocService'>
        <EntityVocService
                entity  = 'ru.ecom.mis.ejb.domain.disability.voc.VocRegimeViolationType'
                names   = 'codeF,name'
                queried = 'codeF,name'
                queryConvertType = 'UPPER_CASE'
                queryAppend="(disable is null or disable=false)"
                />
    </voc>
    <!-- Степень ограничения трудоспособности -->
	<voc id='vocDisabilityDegree' type='EntityVocService'>
        <EntityVocService
                entity  = 'ru.ecom.mis.ejb.domain.disability.voc.VocDisabilityDegree'
                names   = 'name'
                queried = 'name'
                queryConvertType = 'UPPER_CASE'
                />
    </voc>
    
    <!-- Первичность листка нетрудоспособности-->
	<voc id='vocDisabilityDocumentPrimarity' type='EntityVocService'>
        <EntityVocService
                entity  = 'ru.ecom.mis.ejb.domain.disability.voc.VocDisabilityDocumentPrimarity'
                names   = 'name'
                queried = 'name'
                queryConvertType = 'FIRST_UPPER'
                />
                 </voc>

	<!-- Область нахождения СМО-->
	<voc id='omcKodTer' type='EntityVocService'>
        <EntityVocService
                entity  = 'ru.ecom.expomc.ejb.domain.omcvoc.OmcKodTer'
                names   = 'name'
                queried = 'name'
                />
    </voc>
    

    <voc id='omcQnp' type='EntityVocService'>
    	<EntityVocService
    			entity  = 'ru.ecom.expomc.ejb.domain.omcvoc.OmcQnp'
    			names   = 'name'
    			queried = 'name'
    	/>
    </voc>
    
    <voc id='omcStreetT' type='EntityVocService'>
    	<EntityVocService
    			entity  = 'ru.ecom.expomc.ejb.domain.omcvoc.OmcStreetT'
    			names   = 'name'
    			queried = 'name'
    	/>
    </voc>
    
    <voc id='vocStoolType' type='EntityVocService'>
        <EntityVocService
                entity  = 'ru.ecom.mis.ejb.domain.medcase.voc.VocStoolType'
                names   = 'name'
                queried = 'name'
        />
    </voc> 
    
    <voc id='vocDayTime' type='EntityVocService'>
        <EntityVocService
                entity  = 'ru.ecom.mis.ejb.domain.medcase.voc.VocDayTime'
                names   = 'name'
                queried = 'name'
        />
    </voc> 
    
    <voc id='vocEthnicity' type='EntityVocService'>
        <EntityVocService
                entity  = 'ru.ecom.mis.ejb.domain.patient.voc.VocEthnicity'
                names   = 'name'
                queried = 'name'
        />
    </voc> 
    
    <voc id='vocMarriageStatus' type='EntityVocService'>
        <EntityVocService
                entity  = 'ru.ecom.mis.ejb.domain.patient.voc.VocMarriageStatus'
                names   = 'name'
                queried = 'name'
        />
    </voc> 
    
    <voc id='vocEducationType' type='EntityVocService'>
        <EntityVocService
                entity  = 'ru.ecom.mis.ejb.domain.worker.voc.VocEducationType'
                names   = 'name'
                queried = 'name'
        />
    </voc>
	<voc id='vocMedServiceActual' type='EntityVocService'>
		<EntityVocService
				entity  = 'ru.ecom.mis.ejb.domain.medcase.voc.VocMedService'
				names   = 'code,name'
				queried = 'code,name'
				queryAppend="(finishDate is null or finishDate>=current_date)"
		/>
	</voc>

    <voc id='vocMedService' type='EntityVocService'>
        <EntityVocService
                entity  = 'ru.ecom.mis.ejb.domain.medcase.voc.VocMedService'
                names   = 'code,name'
                queried = 'code,name'
				queryAppend="(finishDate is null or finishDate>=current_date)"
        />
    </voc>
    
    <voc id='vocAcuityDiagnosis' type='EntityVocService'>
            <EntityVocService
                    entity  = 'ru.ecom.mis.ejb.domain.medcase.voc.VocAcuityDiagnosis'
                    names   = 'name'
                    queried = 'name'
                    queryConvertType="UPPER_CASE"
                    />
    </voc>
    <voc id='vocPrimaryDiagnosis' type='EntityVocService'>
            <EntityVocService
                    entity  = 'ru.ecom.mis.ejb.domain.medcase.voc.VocPrimaryDiagnosis'
                    names   = 'name'
                    queried = 'name'
                    queryConvertType="UPPER_CASE"
                    />
    </voc>
    <voc id='vocDrugUnlicensedName' type='EntityVocService'>
            <EntityVocService
                    entity  = 'ru.ecom.mis.ejb.uc.privilege.domain.voc.VocDrugUnlicensedName'
                    names   = 'name'
                    queried = 'name'
                    />
    </voc>
    <voc id='vocDrugLicensedName' type='EntityVocService'>
            <EntityVocService
                    entity  = 'ru.ecom.mis.ejb.uc.privilege.domain.voc.VocLicensedName'
                    names   = 'name'
                    queried = 'name'
                    />
    </voc>
    
    <voc id='vocInvalidity' type='EntityVocService'>
            <EntityVocService
                    entity  = 'ru.ecom.mis.ejb.domain.disability.voc.VocInvalidity'
                    names   = 'name'
                    queried = 'name'
                    queryConvertType="UPPER_CASE"
                    />
    </voc>
	<!--  Поток обслуживания для КСГ (Milamesher) -->
	<voc id='vocSstreamE2Entry' type='EntityVocService'>
		<EntityVocService
				entity  = 'ru.ecom.mis.ejb.domain.medcase.voc.VocSstreamE2Entry'
				names   = 'name'
				queried = 'name'
		/>
	</voc>
	<!--  Типы помощи для отчёта jasper по платникам(Milamesher) -->
	<voc id='VocTypeHelpJReport' type='EntityVocService'>
		<EntityVocService
				entity  = 'ru.ecom.mis.ejb.domain.medcase.voc.VocTypeHelpJReport'
				names   = 'name'
				queried = 'name'
		/>
	</voc>
	<!--  Типы стационара для фин. отчёта jasper (Milamesher) -->
	<voc id='vocTypeStacJReport' type='EntityVocService'>
		<EntityVocService
				entity  = 'ru.ecom.mis.ejb.domain.lpu.voc.VocBedSubType'
				names   = 'name'
				queried = 'name'
				queryAppend = "code='1' or code='2'"
		/>
	</voc>
    <!--  ПЕРЕЛИВАНИЕ КРОВИ -->
    
    <voc id='vocBloodGroup' type='EntityVocService'>
            <EntityVocService
                    entity  = 'ru.ecom.mis.ejb.domain.medcase.voc.VocBloodGroup'
                    names   = 'name'
                    queried = 'name'
                    />
    </voc>
    
    <voc id='vocBloodPreparation' type='EntityVocService'>
            <EntityVocService
                    entity  = 'ru.ecom.mis.ejb.domain.medcase.voc.VocBloodPreparation'
                    names   = 'name'
                    queried = 'name'
                    />
    </voc>
    
    <voc id='vocBloodPreparationType' type='EntityVocService'>
            <EntityVocService
                    entity  = 'ru.ecom.mis.ejb.domain.medcase.voc.VocBloodPreparationType'
                    names   = 'name'
                    queried = 'name'
                    />
    </voc>
    
    <voc id='vocOtherTransfusPreparation' type='EntityVocService'>
            <EntityVocService
                    entity  = 'ru.ecom.mis.ejb.domain.medcase.voc.VocOtherTransfusPreparation'
                    names   = 'name'
                    queried = 'name'
                    />
    </voc>
	<voc id='vocBloodBioProbProcedure' type='EntityVocService'>
		<EntityVocService
				entity  = 'ru.ecom.mis.ejb.domain.medcase.voc.VocBloodBioProbProcedure'
				names   = 'name'
				queried = 'name'
		/>
	</voc>
    <voc id='vocRhesusFactor' type='EntityVocService'>
            <EntityVocService
                    entity  = 'ru.ecom.mis.ejb.domain.medcase.voc.VocRhesusFactor'
                    names   = 'name'
                    queried = 'name'
                    />
    </voc>
    
    <voc id='vocTransfusionMethod' type='EntityVocService'>
            <EntityVocService
                    entity  = 'ru.ecom.mis.ejb.domain.medcase.voc.VocTransfusionMethod'
                    names   = 'name'
                    queried = 'name'
                    />
    </voc>
    
    <voc id='vocTransfusionReaction' type='EntityVocService'>
            <EntityVocService
                    entity  = 'ru.ecom.mis.ejb.domain.medcase.voc.VocTransfusionReaction'
                    names   = 'name'
                    queried = 'name'
                    />
    </voc>
    
    <!--  БЕРЕМЕННОСТЬ -->
    
    <voc id='vocApgarMuscleTone' type='EntityVocService'>
            <EntityVocService
                    entity  = 'ru.ecom.mis.ejb.domain.birth.voc.VocApgarMuscleTone'
                    names   = 'name'
                    queried = 'name'
                    />
    </voc>
    
    <voc id='vocApgarPalpitation' type='EntityVocService'>
            <EntityVocService
                    entity  = 'ru.ecom.mis.ejb.domain.birth.voc.VocApgarPalpitation'
                    names   = 'name'
                    queried = 'name'
                    />
    </voc>
    
    <voc id='vocApgarReflexes' type='EntityVocService'>
            <EntityVocService
                    entity  = 'ru.ecom.mis.ejb.domain.birth.voc.VocApgarReflexes'
                    names   = 'name'
                    queried = 'name'
                    />
    </voc>
    
    <voc id='vocApgarRespiration' type='EntityVocService'>
            <EntityVocService
                    entity  = 'ru.ecom.mis.ejb.domain.birth.voc.VocApgarRespiration'
                    names   = 'name'
                    queried = 'name'
                    />
    </voc>
    
    <voc id='vocApgarSkinColor' type='EntityVocService'>
            <EntityVocService
                    entity  = 'ru.ecom.mis.ejb.domain.birth.voc.VocApgarSkinColor'
                    names   = 'name'
                    queried = 'name'
                    />
    </voc>
    
    <voc id='vocInfRiskNewBornWeight' type='EntityVocService'>
            <EntityVocService
                    entity  = 'ru.ecom.mis.ejb.domain.birth.voc.VocInfRiskNewBornWeight'
                    names   = 'name'
                    queried = 'name'
                    />
    </voc>
    
    <voc id='vocInfRiskWaterNature' type='EntityVocService'>
            <EntityVocService
                    entity  = 'ru.ecom.mis.ejb.domain.birth.voc.VocInfRiskWaterNature'
                    names   = 'name'
                    queried = 'name'
                    />
    </voc>
    
    <voc id='vocInfRiskMotherTemperature' type='EntityVocService'>
            <EntityVocService
                    entity  = 'ru.ecom.mis.ejb.domain.birth.voc.VocInfRiskMotherTemperature'
                    names   = 'name'
                    queried = 'name'
                    />
    </voc>
    
    <voc id='vocInfRiskMotherDiseases' type='EntityVocService'>
            <EntityVocService
                    entity  = 'ru.ecom.mis.ejb.domain.birth.voc.VocInfRiskMotherDiseases'
                    names   = 'name'
                    queried = 'name'
                    />
    </voc>
    
    <voc id='vocInfRiskApgar' type='EntityVocService'>
            <EntityVocService
                    entity  = 'ru.ecom.mis.ejb.domain.birth.voc.VocInfRiskMotherDiseases'
                    names   = 'name'
                    queried = 'name'
                    />
    </voc>
    <voc id='vocInfRiskWaterless' type='EntityVocService'>
            <EntityVocService
                    entity  = 'ru.ecom.mis.ejb.domain.birth.voc.VocInfRiskWaterless'
                    names   = 'name'
                    queried = 'name'
                    />
    </voc>
    <voc id='vocNewBornCordAttaching' type='EntityVocService'>
    	<EntityVocService 
    	  	 entity = 'ru.ecom.mis.ejb.domain.birth.voc.VocNewBornCordAttaching'
    		  names = 'name'
    		queried = 'name'
    	/>
    </voc>
    <voc id='vocInspectionCondition' type='EntityVocService'>
    	<EntityVocService 
    	  	 entity = 'ru.ecom.mis.ejb.domain.birth.voc.VocInspectionCondition'
    		  names = 'name'
    		queried = 'name'
    	/>
    </voc>
    <voc id='vocPlacentaIntegrity' type='EntityVocService'>
    	<EntityVocService 
    	  	 entity = 'ru.ecom.mis.ejb.domain.birth.voc.VocPlacentaIntegrity'
    		  names = 'name'
    		queried = 'name'
    	/>
    </voc>
    <voc id='vocMembranesBreakPlace' type='EntityVocService'>
    	<EntityVocService 
    	  	 entity = 'ru.ecom.mis.ejb.domain.birth.voc.VocMembranesBreakPlace'
    		  names = 'name'
    		queried = 'name'
    	/>
    </voc>

    <voc id='vocDocumentParameter' type='EntityVocService'>
		<EntityVocService
			entity  = 'ru.ecom.mis.ejb.domain.licence.voc.VocDocumentParameter'
			names   = 'name'
			queried = 'name'
		/>
	</voc>
	<voc id='vocDocumentParameterGroup' type='EntityVocService'>
		<EntityVocService
			entity  = 'ru.ecom.mis.ejb.domain.licence.voc.VocDocumentParameterGroup'
			names   = 'name'
			queried = 'name'
		/>
	</voc>
	<voc id='vocExternalDocumentType' type='EntityVocService'>
		<EntityVocService
			entity  = 'ru.ecom.mis.ejb.domain.licence.voc.VocExternalDocumentType'
			names   = 'name'
			queried = 'name'
		/>
	</voc>

	<voc id="vocBranch" type="NativeVocService">
		<NativeVocService
				from="vocbranch vb "
				nameId="vb.branchid"
				join=" " order=""
				names="vb.branch"
				queried=" upper(vb.branch) like upper(:query) "
		/>
	</voc>
	<voc id="vocRobsonClass" type="NativeVocService">
		<NativeVocService
				from="vocrobsonclass vb "
				nameId="vb.id"
				join=" " order=""
				names="vb.name"
				queried=" upper(vb.name) like upper(:query) "
		/>
	</voc>
	<!-- Все цвета -->
	<voc id="vocColor" type="NativeVocService">
		<NativeVocService
				from="voccolor vc "
				nameId="vc.id"
				join=" " order=""
				names="vc.name"
				queried=" upper(vc.name) like upper(:query) "
		/>
	</voc>
	<!-- Все цвета, которые ещё не связаны с болезнью/примечанием в ColorIdentity -->
	<voc id="vocColorFree" type="NativeVocService">
		<NativeVocService
				from="voccolor vc "
				nameId="vc.id"
				join=" left join voccoloridentitypatient vcip on vcip.color_id=vc.id " order=""
				names="vc.name"
				queried=" upper(vc.name) like upper(:query) "
				queryAppend = ''
				parent=" (vcip.id is null or vcip.id=:parent) "
		/>
	</voc>
	<!-- Браслеты -->
	<voc id="vocColorIdentityPatient" type="NativeVocService">
		<NativeVocService
				from="vocColorIdentityPatient vcip "
				nameId="vcip.id"
				join=" left join voccolor vc on vcip.color_id=vc.id " order=""
				names="vc.name||' ('||vcip.name||')'"
				queried=" upper(vc.name||' ('||vcip.name||')') like upper(:query) "
				queryAppend = ' (isforpatology is null or isforpatology=false)'
		/>
	</voc>
	<!-- Браслеты с патологией-->
	<voc id="vocColorIdentityPatientWithPat" type="NativeVocService">
		<NativeVocService
				from="vocColorIdentityPatient vcip "
				nameId="vcip.id"
				join=" left join voccolor vc on vcip.color_id=vc.id " order=""
				names="vc.name||' ('||vcip.name||')'"
				queried=" upper(vc.name||' ('||vcip.name||')') like upper(:query) "
		/>
	</voc>
	<!-- Браслеты, которые могут быть заполнены в родах и инф. по новорожд. -->
	<voc id="vocIdentityPatientNewBorn" type="NativeVocService">
		<NativeVocService
				from="vocColorIdentityPatient vcip "
				nameId="vcip.id"
				join=" left join voccolor vc on vcip.color_id=vc.id " order=""
				names="vcip.name"
				queried=" upper(vc.name||' ('||vcip.name||')') like upper(:query) "
				queryAppend = 'vcip.isfornewborn=true'
		/>
	</voc>
	<!-- Список женских консультаций -->
	<voc id="vocWomenConsult" type="NativeVocService">
		<NativeVocService
				from="vocWomenConsult"
				nameId="id"
				join="" order=""
				names=" name "
				queried=" name "
		/>
	</voc>
	<!-- Исход наблюдения -->
	<voc id="vocObservationResult" type="NativeVocService">
		<NativeVocService
				from="vocObservationResult voc "
				nameId="voc.id"
				join="" order=""
				names="voc.name"
				queried=" upper(voc.cod||' ('||voc.name||')') like upper(:query) "
				queryAppend = ''
		/>
	</voc>
	<!-- Код обследования на ВИЧ -->
	<voc id="vocHIVCodeResearch" type="NativeVocService">
		<NativeVocService
				from="VocHIVCodeResearch voc"
				nameId="voc.code"
				order="voc.name"
				names="voc.code||' '||voc.name"
				queried=" upper(voc.code||' ('||voc.name||')') like upper(:query) "
		/>
	</voc>
</vocconfig>
