# ==================================================================================================
# Замечания
# ---------
# - Переменные с префиксом GL_ являются GitLab-переменными, определенными с помощью Web-интерфейса
#   GitLab'а у проекта (GL_PROJECT_), группы проектов (GL_GROUP_), глобально для всего экземпляра
#   GitLab (GL_INSTANCE_) и при запуске пайплайна вручную (GL_MANUAL_):
#
#     GL_INSTANCE_DOCKER_REGISTRY - host:port для записи в корпоративный Docker-registry
#     GL_PROJECT_ANSIBLE_VAULT_PASSWORD - пароль для расшифровки секретов в Ansible, если они
#                                         встречаются при выполнении плейбука
#     GL_MANUAL_PROD_PASSWORD - пароль для запуска деплоя на production-стенды
#
# - Деплой на production-стенды добавляется в пайплайн только если пайплайн запущен вручную на
#   ветке, название которой начинается с "release/" и определена переменная GL_MANUAL_PROD_PASSWORD,
#   SHA256-хэш которой совпадает с парметром PROD_PASSWORD_SHA.
#
# - В пайплайне сборки-деплоя принята схема, когда все Docker-образы на этапе сборки тэгируются
#   коротким хэшем коммита пайплайна, а на этапе деплоя по этому тэгу происходит их вытягивание на
#   стенд из Docker-репозитория (pull) и запуск.
#   Поэтому важно следить за тем, чтобы заданию деплоя предшествовали задания по сборке ВСЕХ
#   Docker-образов. Лишней работы происходить не будет благодаря механизму кэшированию
#   Docker-образов при их сборке - у неизмененных образов просто сменится тэг.
#
# - Если в пайплайне используется прогреваемый по расписанию кэш, то необходимо следить чтобы
#   очистка раннеров имеющих тип "Docker executor", и хранящих кэш локально, происходила перед
#   прогревом кэша. В противном случае кэш будет удалён.
#   https://docs.gitlab.com/ee/ci/caching/#where-the-caches-are-stored
#
# - Для выполнения некоторых тестов Java-проектов требуются установленные в CI/CD-системах шрифты.
#   Для их установки необходимо выполнить следующую команду:
#     CentOS: sudo yum install -y dejavu-sans-fonts fontconfig
#     Debian: sudo apt-get install -y fontconfig fonts-dejavu
# ==================================================================================================
default:
  image: frekele/ant:1.10.0-jdk8u172 #docker image to run job


variables:
  POSTGRES_USER: user
  POSTGRES_PASSWORD: password
  POSTGRES_DB: db
  ARTIFACT_NAME: current_date.tar


stages:
  - compile
  - test
  - build
  - deploy

.compile-msh:
  inherit:
    default: true
  stage: compile
  cache: { }
  script:
    - chmod +x deploy/fix_config.sh
    - ./deploy/fix_config.sh ${CI_PROJECT_DIR}
    - cd msh
    - ant compile
  #  only:
  #    refs:
  #      - merge_requests
  #    changes:
  #      - msh/**/*
  tags:
    - shell
.compile-riams-ejb:
  inherit:
    default: true
  stage: compile
  cache: { }
  script:
    - chmod +x deploy/fix_config.sh
    - ./deploy/fix_config.sh ${CI_PROJECT_DIR}
    - cd ecom/ecom-riams/ejb
    - ant compile
  #  only:
  #    refs:
  #      - merge_requests
  #    changes:
  #      - msh/**/*
  #      - ecom/ecom-riams/ejb/**/*
  tags:
    - shell


.compile-riams-web:
  inherit:
    default: true
  stage: compile
  cache: { }
  script:
    - chmod +x deploy/fix_config.sh
    - ./deploy/fix_config.sh ${CI_PROJECT_DIR}
    - cd ecom/ecom-riams/web
    - ant compile
  #  only:
  #    refs:
  #      - merge_requests
  #    changes:
  #      - msh/**/*
  #      - ecom/ecom-riams/ejb/**/*
  tags:
    - shell

.compile-skin:
  inherit:
    default: true
  before_script:
    - echo 'compile ecom-skin module'

  stage: compile
  cache: { }
  script:
    - chmod +x deploy/fix_config.sh
    - ./deploy/fix_config.sh ${CI_PROJECT_DIR}
    - cd ecom/skin
    - ant all
  #  only:
  #    refs:
  #      - merge_requests
  #    changes:
  #      - msh/**/*
  #      - ecom/ecom-riams/ejb/**/*
  tags:
    - shell

#собираем архив с текущей датой
build-medos-artifact:
  when: always
  #  variables:
  #    current_date:
  stage: build
  before_script:
    - export CURRENT_DATE=`date +%Y%m%d`
  script:
    - chmod +x deploy/fix_config.sh
    - ./deploy/fix_config.sh ${CI_PROJECT_DIR}
    - cd ${CI_PROJECT_DIR}/ecom/ecom-report
    - ant all
    - cd ${CI_PROJECT_DIR}/msh
    - ant all
    - cd ${CI_PROJECT_DIR}/ecom/ecom-riams/ejb
    - ant clean compile package
    - cd ${CI_PROJECT_DIR}/ecom/ecom-riams/web
    - ant clean all build-war
    - cd ${CI_PROJECT_DIR}/ecom/skin
    - ant all build-war
    - echo 'current_date >> $CURRENT_DATE >> ${CURRENT_DATE} >> %CURRENT_DATE%'
    - tar -cf ${CI_PROJECT_DIR}/${ARTIFACT_NAME} -C ${CI_PROJECT_DIR}/ecom/ecom-riams/ejb/target/ riams-app.ear -C ${CI_PROJECT_DIR}/ecom/ecom-riams/web/target/ riams.war -C ${CI_PROJECT_DIR}/ecom/skin/target/ skin.war
  artifacts:
    name: 'current date tar file'
    paths:
      - '*.tar'
  tags:
    - shell
  only:
    - master

deploy-prod:
  extends: .deploy-server
  environment:
    name: production
  variables:
    V_SERVER: 192.168.10.20
    V_USER: proguser
    V_UPDATE_SCRIPT_NAME: /root/scripts/update_gitlab.sh
  needs:
    - build-medos-artifact

deploy-s13:
  extends: .deploy-server
  environment:
    name: prod13
  variables:
    V_SERVER: 192.168.10.13
    V_USER: proguser
    V_UPDATE_SCRIPT_NAME: /root/scripts/hello.sh
  when: manual
  needs:
    - build-medos-artifact

#deploy to any server
.deploy-server:
  image: ubuntu:latest
  stage: deploy
  environment:
    name: production
  when: manual
  needs:
    - build-medos-artifact
  before_script:
    - 'command -v ssh-agent >/dev/null || ( apt-get update -y && apt-get install openssh-client -y )'
    - eval $(ssh-agent -s)
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
    - echo "$SSH_KNOWN_HOSTS" >> ~/.ssh/known_hosts
    - echo "$SSH_CONFIG" >> /etc/ssh/ssh_config.d/prod.conf
    - cat ~/.ssh/id_rsa
    - cat ~/.ssh/known_hosts
    - cat /etc/ssh/ssh_config.d/prod13.conf
    - chmod 644 ~/.ssh/known_hosts
    - chmod 600 ~/.ssh/id_rsa
  script:
    - /usr/bin/scp ${CI_PROJECT_DIR}/${ARTIFACT_NAME} $V_USER@$V_SERVER:/home/update/`date +%Y%m%d`.tar
    - ssh $V_USER@$V_SERVER $V_UPDATE_SCRIPT_NAME
  tags:
    - shell