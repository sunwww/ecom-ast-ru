/**  Prototype JavaScript framework, version 1.3.1
 *  (c) 2005 Sam Stephenson <sam@conio.net>
 *
 *  THIS FILE IS AUTOMATICALLY GENERATED. When sending patches, please diff
 *  against the source tree, available from the Prototype darcs repository. 
 *
 *  Prototype is freely distributable under the terms of an MIT-style license.
 *
 *  For details, see the Prototype web site: http://prototype.conio.net/
 *
 *  Changes (ESinev)
 *  1. in bindAsEventListener: call -> apply
/*--------------------------------------------------------------------------*/

var Prototype = {
  Version: '1.3.1',
  emptyFunction: function() {}
}

var Class = {
  create: function() {
    return function() { 
      this.initialize.apply(this, arguments);
        
    }
  }
}

var Abstract = new Object();

Object.extend = function(destination, source) {
  for (property in source) {
    destination[property] = source[property];
  }
  return destination;
}

Object.prototype.extend = function(object) {
  return Object.extend.apply(this, [this, object]);
}

Function.prototype.bind = function(object) {
  var __method = this;
  return function() {
    __method.apply(object, arguments);
  }
}

Function.prototype.bindAsEventListener = function(object) {
  var __method = this;
  return function(event) {
      var arr = new Array() ;
      arr[0] = event || window.event ;
      __method.apply(object, arr);
    //__method.call(object, event || window.event);
  }
}

Number.prototype.toColorPart = function() {
  var digits = this.toString(16);
  if (this < 16) return '0' + digits;
  return digits;
}

var Try = {
  these: function() {
    var returnValue;

    for (var i = 0; i < arguments.length; i++) {
      var lambda = arguments[i];
      try {
        returnValue = lambda();
        break;
      } catch (e) {}
    }

    return returnValue;
  }
}

/*--------------------------------------------------------------------------*/

var PeriodicalExecuter = Class.create();
PeriodicalExecuter.prototype = {
  initialize: function(callback, frequency) {
    this.callback = callback;
    this.frequency = frequency;
    this.currentlyExecuting = false;

    this.registerCallback();
  },

  registerCallback: function() {
    setInterval(this.onTimerEvent.bind(this), this.frequency * 1000);
  },

  onTimerEvent: function() {
    if (!this.currentlyExecuting) {
      try { 
        this.currentlyExecuting = true;
        this.callback(); 
      } finally { 
        this.currentlyExecuting = false;
      }
    }
  }
}

/*--------------------------------------------------------------------------*/

function $() {
  var elements = new Array();

  for (var i = 0; i < arguments.length; i++) {
    var element = arguments[i];
    if (typeof element == 'string')
      element = document.getElementById(element);

    if (arguments.length == 1) 
      return element;

    elements.push(element);
  }

  return elements;
}

if (!Array.prototype.push) {
  Array.prototype.push = function() {
		var startLength = this.length;
		for (var i = 0; i < arguments.length; i++)
      this[startLength + i] = arguments[i];
	  return this.length;
  }
}

if (!Function.prototype.apply) {
  // Based on code from http://www.youngpup.net/
  Function.prototype.apply = function(object, parameters) {
    var parameterStrings = new Array();
    if (!object)     object = window;
    if (!parameters) parameters = new Array();
    
    for (var i = 0; i < parameters.length; i++)
      parameterStrings[i] = 'parameters[' + i + ']';
    
    object.__apply__ = this;
    var result = eval('object.__apply__(' + 
      parameterStrings.join(', ') + ')');
    object.__apply__ = null;
    
    return result;
  }
}

String.prototype.extend({
  stripTags: function() {
    return this.replace(/<\/?[^>]+>/gi, '');
  },

  escapeHTML: function() {
    var div = document.createElement('div');
    var text = document.createTextNode(this);
    div.appendChild(text);
    return div.innerHTML;
  },

  unescapeHTML: function() {
    var div = document.createElement('div');
    div.innerHTML = this.stripTags();
    return div.childNodes[0].nodeValue;
  }
});

var Ajax = {
  getTransport: function() {
    return Try.these(
      function() {return new ActiveXObject('Msxml2.XMLHTTP')},
      function() {return new ActiveXObject('Microsoft.XMLHTTP')},
      function() {return new XMLHttpRequest()}
    ) || false;
  }
}

Ajax.Base = function() {};
Ajax.Base.prototype = {
  setOptions: function(options) {
    this.options = {
      method:       'POST',
      asynchronous: true,
      parameters:   ''
    }.extend(options || {});
  },

  responseIsSuccess: function() {
    
    var ret = this.transport.status == 'undefined'
        || this.transport.status == 0 
        || (this.transport.status >= 200 && this.transport.status < 300);
    //alert(this.transport.status) ;
    return ret ;
  },

  responseIsFailure: function() {
    return !this.responseIsSuccess();
  }
}

Ajax.Request = Class.create();
Ajax.Request.Events = 
  ['Uninitialized', 'Loading', 'Loaded', 'Interactive', 'Complete'];

Ajax.Request.prototype = (new Ajax.Base()).extend({
  initialize: function(url, options) {
    this.transport = Ajax.getTransport();
    this.setOptions(options);
    this.request(url);
  },

  request: function(url) {
    var parameters = this.options.parameters || '';
    if (parameters.length > 0) parameters += '&_=';

    try {
      if (this.options.method == 'get')
        url += '?' + parameters;

      this.transport.open(this.options.method, url,
        this.options.asynchronous);

      if (this.options.asynchronous) {
        this.transport.onreadystatechange = this.onStateChange.bind(this);
        setTimeout((function() {this.respondToReadyState(1)}).bind(this), 10);
      }

      this.setRequestHeaders();

      var body = this.options.postBody ? this.options.postBody : parameters;
      //alert(this.options.method) ;
      this.transport.send(this.options.method == 'POST' ? body : null);

    } catch (e) {
    }
  },

  setRequestHeaders: function() {
    var requestHeaders = 
      ['X-Requested-With', 'XMLHttpRequest',
       'X-Prototype-Version', Prototype.Version];

    if (this.options.method == 'POST') {
      requestHeaders.push('Content-type', 
        'application/x-www-form-urlencoded');

      /* Force "Connection: close" for Mozilla browsers to work around
       * a bug where XMLHttpReqeuest sends an incorrect Content-length
       * header. See Mozilla Bugzilla #246651. 
       */
      if (this.transport.overrideMimeType)
        requestHeaders.push('Connection', 'close');
    }

    if (this.options.requestHeaders)
      requestHeaders.push.apply(requestHeaders, this.options.requestHeaders);

    for (var i = 0; i < requestHeaders.length; i += 2)
      this.transport.setRequestHeader(requestHeaders[i], requestHeaders[i+1]);
  },

  onStateChange: function() {
    var readyState = this.transport.readyState;
    if (readyState != 1)
      this.respondToReadyState(this.transport.readyState);
  },

  respondToReadyState: function(readyState) {
    var event = Ajax.Request.Events[readyState];

    if (event == 'Complete')
      (this.options['on' + this.transport.status]
       || this.options['on' + (this.responseIsSuccess() ? 'Success' : 'Failure')]
       || Prototype.emptyFunction)(this.transport);

    (this.options['on' + event] || Prototype.emptyFunction)(this.transport);

    /* Avoid memory leak in MSIE: clean up the oncomplete event handler */
    if (event == 'Complete')
      this.transport.onreadystatechange = Prototype.emptyFunction;
  }
});

Ajax.Updater = Class.create();
Ajax.Updater.ScriptFragment = '(?:<script.*?>)((\n|.)*?)(?:<\/script>)';

Ajax.Updater.prototype.extend(Ajax.Request.prototype).extend({
  initialize: function(container, url, options) {
    this.containers = {
      success: container.success ? $(container.success) : $(container),
      failure: container.failure ? $(container.failure) :
        (container.success ? null : $(container))
    }

    this.transport = Ajax.getTransport();
    this.setOptions(options);

    var onComplete = this.options.onComplete || Prototype.emptyFunction;
    this.options.onComplete = (function() {
      this.updateContent();
      onComplete(this.transport);
    }).bind(this);

    this.request(url);
  },

  updateContent: function() {
    var receiver = this.responseIsSuccess() ?
      this.containers.success : this.containers.failure;

    var match    = new RegExp(Ajax.Updater.ScriptFragment, 'img');
    var response = this.transport.responseText.replace(match, '');
    var scripts  = this.transport.responseText.match(match);

    if (receiver) {
      if (this.options.insertion) {
        new this.options.insertion(receiver, response);
      } else {
        receiver.innerHTML = response;
      }
    }

    if (this.responseIsSuccess()) {
      if (this.onComplete)
        setTimeout((function() {this.onComplete(
          this.transport)}).bind(this), 10);
    }

    if (this.options.evalScripts && scripts) {
      match = new RegExp(Ajax.Updater.ScriptFragment, 'im');
      setTimeout((function() {
        for (var i = 0; i < scripts.length; i++)
          eval(scripts[i].match(match)[1]);
      }).bind(this), 10);
    }
  }
});

Ajax.PeriodicalUpdater = Class.create();
Ajax.PeriodicalUpdater.prototype = (new Ajax.Base()).extend({
  initialize: function(container, url, options) {
    this.setOptions(options);
    this.onComplete = this.options.onComplete;

    this.frequency = (this.options.frequency || 2);
    this.decay = 1;

    this.updater = {};
    this.container = container;
    this.url = url;

    this.start();
  },

  start: function() {
    this.options.onComplete = this.updateComplete.bind(this);
    this.onTimerEvent();
  },

  stop: function() {
    this.updater.onComplete = undefined;
    clearTimeout(this.timer);
    (this.onComplete || Ajax.emptyFunction).apply(this, arguments);
  },

  updateComplete: function(request) {
    if (this.options.decay) {
      this.decay = (request.responseText == this.lastText ? 
        this.decay * this.options.decay : 1);

      this.lastText = request.responseText;
    }
    this.timer = setTimeout(this.onTimerEvent.bind(this), 
      this.decay * this.frequency * 1000);
  },

  onTimerEvent: function() {
    this.updater = new Ajax.Updater(this.container, this.url, this.options);
  }
});

document.getElementsByClassName = function(className) {
  var children = document.getElementsByTagName('*') || document.all;
  var elements = new Array();
  
  for (var i = 0; i < children.length; i++) {
    var child = children[i];
    var classNames = child.className.split(' ');
    for (var j = 0; j < classNames.length; j++) {
      if (classNames[j] == className) {
        elements.push(child);
        break;
      }
    }
  }
  
  return elements;
}

/*--------------------------------------------------------------------------*/

if (!window.Element) {
  var Element = new Object();
}

Object.extend(Element, {
  toggle: function() {
    for (var i = 0; i < arguments.length; i++) {
      var element = $(arguments[i]);
      element.style.display = 
        (element.style.display == 'none' ? '' : 'none');
    }
  },

  hide: function() {
    for (var i = 0; i < arguments.length; i++) {
      var element = $(arguments[i]);
      element.style.display = 'none';
    }
  },

  show: function() {
    for (var i = 0; i < arguments.length; i++) {
      var element = $(arguments[i]);
      element.style.display = '';
    }
  },

  remove: function(element) {
    element = $(element);
    element.parentNode.removeChild(element);
  },
   
  getHeight: function(element) {
    element = $(element);
    return element.offsetHeight; 
  },

  hasClassName: function(element, className) {
    element = $(element);
    if (!element)
      return;
    var a = element.className.split(' ');
    for (var i = 0; i < a.length; i++) {
      if (a[i] == className)
        return true;
    }
    return false;
  },

  addClassName: function(element, className) {
    element = $(element);
    Element.removeClassName(element, className);
    element.className += ' ' + className;
  },

  removeClassName: function(element, className) {
    element = $(element);
    if (!element)
      return;
    var newClassName = '';
    var a = element.className.split(' ');
    for (var i = 0; i < a.length; i++) {
      if (a[i] != className) {
        if (i > 0)
          newClassName += ' ';
        newClassName += a[i];
      }
    }
    element.className = newClassName;
  },
  
  // removes whitespace-only text node children
  cleanWhitespace: function(element) {
    var element = $(element);
    for (var i = 0; i < element.childNodes.length; i++) {
      var node = element.childNodes[i];
      if (node.nodeType == 3 && !/\S/.test(node.nodeValue)) 
        Element.remove(node);
    }
  }
});

var Toggle = new Object();
Toggle.display = Element.toggle;

/*--------------------------------------------------------------------------*/

Abstract.Insertion = function(adjacency) {
  this.adjacency = adjacency;
}

Abstract.Insertion.prototype = {
  initialize: function(element, content) {
    this.element = $(element);
    this.content = content;
    
    if (this.adjacency && this.element.insertAdjacentHTML) {
      this.element.insertAdjacentHTML(this.adjacency, this.content);
    } else {
      this.range = this.element.ownerDocument.createRange();
      if (this.initializeRange) this.initializeRange();
      this.fragment = this.range.createContextualFragment(this.content);
      this.insertContent();
    }
  }
}

var Insertion = new Object();

Insertion.Before = Class.create();
Insertion.Before.prototype = (new Abstract.Insertion('beforeBegin')).extend({
  initializeRange: function() {
    this.range.setStartBefore(this.element);
  },
  
  insertContent: function() {
    this.element.parentNode.insertBefore(this.fragment, this.element);
  }
});

Insertion.Top = Class.create();
Insertion.Top.prototype = (new Abstract.Insertion('afterBegin')).extend({
  initializeRange: function() {
    this.range.selectNodeContents(this.element);
    this.range.collapse(true);
  },
  
  insertContent: function() {  
    this.element.insertBefore(this.fragment, this.element.firstChild);
  }
});

Insertion.Bottom = Class.create();
Insertion.Bottom.prototype = (new Abstract.Insertion('beforeEnd')).extend({
  initializeRange: function() {
    this.range.selectNodeContents(this.element);
    this.range.collapse(this.element);
  },
  
  insertContent: function() {
    this.element.appendChild(this.fragment);
  }
});

Insertion.After = Class.create();
Insertion.After.prototype = (new Abstract.Insertion('afterEnd')).extend({
  initializeRange: function() {
    this.range.setStartAfter(this.element);
  },
  
  insertContent: function() {
    this.element.parentNode.insertBefore(this.fragment, 
      this.element.nextSibling);
  }
});

var Field = {
  clear: function() {
    for (var i = 0; i < arguments.length; i++)
      $(arguments[i]).value = '';
  },

  focus: function(element) {
    $(element).focus();
  },
  
  present: function() {
    for (var i = 0; i < arguments.length; i++)
      if ($(arguments[i]).value == '') return false;
    return true;
  },
  
  select: function(element) {
    $(element).select();
  },
   
  activate: function(element) {
    $(element).focus();
    $(element).select();
  }
}

/*--------------------------------------------------------------------------*/

var Form = {
  serialize: function(form) {
    var elements = Form.getElements($(form));
    var queryComponents = new Array();
    
    for (var i = 0; i < elements.length; i++) {
      var queryComponent = Form.Element.serialize(elements[i]);
      if (queryComponent)
        queryComponents.push(queryComponent);
    }
    
    return queryComponents.join('&');
  },
  
  getElements: function(form) {
    var form = $(form);
    var elements = new Array();

    for (tagName in Form.Element.Serializers) {
      var tagElements = form.getElementsByTagName(tagName);
      for (var j = 0; j < tagElements.length; j++)
        elements.push(tagElements[j]);
    }
    return elements;
  },
  
  getInputs: function(form, typeName, name) {
    var form = $(form);
    var inputs = form.getElementsByTagName('input');
    
    if (!typeName && !name)
      return inputs;
      
    var matchingInputs = new Array();
    for (var i = 0; i < inputs.length; i++) {
      var input = inputs[i];
      if ((typeName && input.type != typeName) ||
          (name && input.name != name)) 
        continue;
      matchingInputs.push(input);
    }

    return matchingInputs;
  },

  disable: function(form) {
    var elements = Form.getElements(form);
    for (var i = 0; i < elements.length; i++) {
      var element = elements[i];
      element.blur();
      element.disabled = 'true';
    }
  },

  enable: function(form) {
    var elements = Form.getElements(form);
    for (var i = 0; i < elements.length; i++) {
      var element = elements[i];
      element.disabled = '';
    }
  },

  focusFirstElement: function(form) {
    var form = $(form);
    var elements = Form.getElements(form);
    for (var i = 0; i < elements.length; i++) {
      var element = elements[i];
      if (element.type != 'hidden' && !element.disabled) {
        Field.activate(element);
        break;
      }
    }
  },

  reset: function(form) {
    $(form).reset();
  }
}

Form.Element = {
  serialize: function(element) {
    var element = $(element);
    var method = element.tagName.toLowerCase();
    var parameter = Form.Element.Serializers[method](element);
    
    if (parameter)
      return encodeURIComponent(parameter[0]) + '=' + 
        encodeURIComponent(parameter[1]);                   
  },
  
  getValue: function(element) {
    var element = $(element);
    var method = element.tagName.toLowerCase();
    var parameter = Form.Element.Serializers[method](element);
    
    if (parameter) 
      return parameter[1];
  }
}

Form.Element.Serializers = {
  input: function(element) {
    switch (element.type.toLowerCase()) {
      case 'submit':
      case 'hidden':
      case 'password':
      case 'text':
        return Form.Element.Serializers.textarea(element);
      case 'checkbox':  
      case 'radio':
        return Form.Element.Serializers.inputSelector(element);
    }
    return false;
  },

  inputSelector: function(element) {
    if (element.checked)
      return [element.name, element.value];
  },

  textarea: function(element) {
    return [element.name, element.value];
  },

  select: function(element) {
    var value = '';
    if (element.type == 'select-one') {
      var index = element.selectedIndex;
      if (index >= 0)
        value = element.options[index].value || element.options[index].text;
    } else {
      value = new Array();
      for (var i = 0; i < element.length; i++) {
        var opt = element.options[i];
        if (opt.selected)
          value.push(opt.value || opt.text);
      }
    }
    return [element.name, value];
  }
}

/*--------------------------------------------------------------------------*/

var $F = Form.Element.getValue;

/*--------------------------------------------------------------------------*/

Abstract.TimedObserver = function() {}
Abstract.TimedObserver.prototype = {
  initialize: function(element, frequency, callback) {
    this.frequency = frequency;
    this.element   = $(element);
    this.callback  = callback;
    
    this.lastValue = this.getValue();
    this.registerCallback();
  },
  
  registerCallback: function() {
    setInterval(this.onTimerEvent.bind(this), this.frequency * 1000);
  },
  
  onTimerEvent: function() {
    var value = this.getValue();
    if (this.lastValue != value) {
      this.callback(this.element, value);
      this.lastValue = value;
    }
  }
}

Form.Element.Observer = Class.create();
Form.Element.Observer.prototype = (new Abstract.TimedObserver()).extend({
  getValue: function() {
    return Form.Element.getValue(this.element);
  }
});

Form.Observer = Class.create();
Form.Observer.prototype = (new Abstract.TimedObserver()).extend({
  getValue: function() {
    return Form.serialize(this.element);
  }
});

/*--------------------------------------------------------------------------*/

Abstract.EventObserver = function() {}
Abstract.EventObserver.prototype = {
  initialize: function(element, callback) {
    this.element  = $(element);
    this.callback = callback;
    
    this.lastValue = this.getValue();
    if (this.element.tagName.toLowerCase() == 'form')
      this.registerFormCallbacks();
    else
      this.registerCallback(this.element);
  },
  
  onElementEvent: function() {
    var value = this.getValue();
    if (this.lastValue != value) {
      this.callback(this.element, value);
      this.lastValue = value;
    }
  },
  
  registerFormCallbacks: function() {
    var elements = Form.getElements(this.element);
    for (var i = 0; i < elements.length; i++)
      this.registerCallback(elements[i]);
  },
  
  registerCallback: function(element) {
    if (element.type) {
      switch (element.type.toLowerCase()) {
        case 'checkbox':  
        case 'radio':
          element.target = this;
          element.prev_onclick = element.onclick || Prototype.emptyFunction;
          element.onclick = function() {
            this.prev_onclick(); 
            this.target.onElementEvent();
          }
          break;
        case 'password':
        case 'text':
        case 'textarea':
        case 'select-one':
        case 'select-multiple':
          element.target = this;
          element.prev_onchange = element.onchange || Prototype.emptyFunction;
          element.onchange = function() {
            this.prev_onchange(); 
            this.target.onElementEvent();
          }
          break;
      }
    }    
  }
}

Form.Element.EventObserver = Class.create();
Form.Element.EventObserver.prototype = (new Abstract.EventObserver()).extend({
  getValue: function() {
    return Form.Element.getValue(this.element);
  }
});

Form.EventObserver = Class.create();
Form.EventObserver.prototype = (new Abstract.EventObserver()).extend({
  getValue: function() {
    return Form.serialize(this.element);
  }
});


if (!window.Event) {
  var Event = new Object();
}

Object.extend(Event, {
  KEY_BACKSPACE: 8,
  KEY_TAB:       9,
  KEY_RETURN:   13,
  KEY_ESC:      27,
  KEY_LEFT:     37,
  KEY_UP:       38,
  KEY_RIGHT:    39,
  KEY_DOWN:     40,
  KEY_DELETE:   46,

  element: function(event) {
    return event.target || event.srcElement;
  },

  isLeftClick: function(event) {
    return (((event.which) && (event.which == 1)) ||
            ((event.button) && (event.button == 1)));
  },

  pointerX: function(event) {
    return event.pageX || (event.clientX + 
      (document.documentElement.scrollLeft || document.body.scrollLeft));
  },

  pointerY: function(event) {
    return event.pageY || (event.clientY + 
      (document.documentElement.scrollTop || document.body.scrollTop));
  },

  stop: function(event) {
    if (event.preventDefault) { 
      event.preventDefault(); 
      event.stopPropagation(); 
    } else {
      event.returnValue = false;
    }
  },

  // find the first node with the given tagName, starting from the
  // node the event was triggered on; traverses the DOM upwards
  findElement: function(event, tagName) {
    var element = Event.element(event);
    while (element.parentNode && (!element.tagName ||
        (element.tagName.toUpperCase() != tagName.toUpperCase())))
      element = element.parentNode;
    return element;
  },

  observers: false,
  
  _observeAndCache: function(element, name, observer, useCapture) {
    if (!this.observers) this.observers = [];
    if (element.addEventListener) {
      this.observers.push([element, name, observer, useCapture]);
      element.addEventListener(name, observer, useCapture);
    } else if (element.attachEvent) {
      this.observers.push([element, name, observer, useCapture]);
      element.attachEvent('on' + name, observer);
    }
  },
  
  unloadCache: function() {
    if (!Event.observers) return;
    for (var i = 0; i < Event.observers.length; i++) {
      Event.stopObserving.apply(this, Event.observers[i]);
      Event.observers[i][0] = null;
    }
    Event.observers = false;
  },

  observe: function(element, name, observer, useCapture) {
    var element = $(element);
    useCapture = useCapture || false;
    
    if (name == 'keypress' &&
        ((navigator.appVersion.indexOf('AppleWebKit') > 0) 
        || element.attachEvent))
      name = 'keydown';
    
    this._observeAndCache(element, name, observer, useCapture);
  },

  stopObserving: function(element, name, observer, useCapture) {
    var element = $(element);
    useCapture = useCapture || false;
    
    if (name == 'keypress' &&
        ((navigator.appVersion.indexOf('AppleWebKit') > 0) 
        || element.detachEvent))
      name = 'keydown';
    
    if (element.removeEventListener) {
      element.removeEventListener(name, observer, useCapture);
    } else if (element.detachEvent) {
      element.detachEvent('on' + name, observer);
    }
  }
});

/* prevent memory leaks in IE */
Event.observe(window, 'unload', Event.unloadCache, false);

var Position = {

  // set to true if needed, warning: firefox performance problems
  // NOT neeeded for page scrolling, only if draggable contained in
  // scrollable elements
  includeScrollOffsets: false, 

  // must be called before calling withinIncludingScrolloffset, every time the
  // page is scrolled
  prepare: function() {
    this.deltaX =  window.pageXOffset 
                || document.documentElement.scrollLeft 
                || document.body.scrollLeft 
                || 0;
    this.deltaY =  window.pageYOffset 
                || document.documentElement.scrollTop 
                || document.body.scrollTop 
                || 0;
  },

  realOffset: function(element) {
    var valueT = 0, valueL = 0;
    do {
      valueT += element.scrollTop  || 0;
      valueL += element.scrollLeft || 0; 
      element = element.parentNode;
    } while (element);
    return [valueL, valueT];
  },

  cumulativeOffset: function(element) {
    var valueT = 0, valueL = 0;
    do {
      valueT += element.offsetTop  || 0;
      valueL += element.offsetLeft || 0;
      element = element.offsetParent;
    } while (element);
    return [valueL, valueT];
  },

  // caches x/y coordinate pair to use with overlap
  within: function(element, x, y) {
    if (this.includeScrollOffsets)
      return this.withinIncludingScrolloffsets(element, x, y);
    this.xcomp = x;
    this.ycomp = y;
    this.offset = this.cumulativeOffset(element);

    return (y >= this.offset[1] &&
            y <  this.offset[1] + element.offsetHeight &&
            x >= this.offset[0] && 
            x <  this.offset[0] + element.offsetWidth);
  },

  withinIncludingScrolloffsets: function(element, x, y) {
    var offsetcache = this.realOffset(element);

    this.xcomp = x + offsetcache[0] - this.deltaX;
    this.ycomp = y + offsetcache[1] - this.deltaY;
    this.offset = this.cumulativeOffset(element);

    return (this.ycomp >= this.offset[1] &&
            this.ycomp <  this.offset[1] + element.offsetHeight &&
            this.xcomp >= this.offset[0] && 
            this.xcomp <  this.offset[0] + element.offsetWidth);
  },

  // within must be called directly before
  overlap: function(mode, element) {  
    if (!mode) return 0;  
    if (mode == 'vertical') 
      return ((this.offset[1] + element.offsetHeight) - this.ycomp) / 
        element.offsetHeight;
    if (mode == 'horizontal')
      return ((this.offset[0] + element.offsetWidth) - this.xcomp) / 
        element.offsetWidth;
  },

  clone: function(source, target) {
    source = $(source);
    target = $(target);
    target.style.position = 'absolute';
    var offsets = this.cumulativeOffset(source);
    target.style.top    = offsets[1] + 'px';
    target.style.left   = offsets[0] + 'px';
    target.style.width  = source.offsetWidth + 'px';
    target.style.height = source.offsetHeight + 'px';
  }
}
var tablearrow = {
    Version: '1.0'
}

var theTableArrow = null ;

tablearrow.TableArrow = function(aTableId) {

    var theTable = document ; //$(aTableId) ;
    var theRows  = null ;
    var theFirstSel = 0 ;
    // последний выбранный элемент
    var theLastSelectedIndex = null ;


    //document.onkey = hello ;

    //function hello(aEvent) {
    //	return false ;
    //}

    // конструктор
    theRows = getRows() ;
    if(theRows!=null && theRows.length!=0) {
        try { document.attachEvent('onkeydown',onKey); } catch (e) {
            try { document.addEventListener("keypress",onKey,false); } catch (e) {}
        }

        selectFirst() ;
    }
    
    this.onCheckBoxClickAll = function(aIdParamName) {
    	var check = aIdParamName.checked ;
    	aIdParamName.checked = false ;
    	var clazz = aIdParamName.id ;
    	var rows = getRows() ;
    	var atr ;
        for(var i=0; i<rows.length; i++) {
            var row = rows[i] ;
            
            if(row!=null && Element.hasClassName(row, clazz) ) {
	             if ((check && Element.hasClassName(row, "inserted"))
		            || (!check && !Element.hasClassName(row, "inserted"))) {
	            } else {
	            	insert(row) ;
	            }
            }
        }
        //aIdParamName.checked = false;
    }
    this.onCheckBoxClickInvert = function(aIdParamName) {
    	var check = aIdParamName.checked ;
     	aIdParamName.checked = false ;
    	var clazz = aIdParamName.id ;
    	var rows = getRows() ;
    	var atr ;
        for(var i=0; i<rows.length; i++) {
            var row = rows[i] ;
            
            if(row!=null && Element.hasClassName(row, clazz) ) {
	            	insert(row) ;
            }
        }
        //aIdParamName.checked = false;
    }

    /**
     * Получение строки параметров
     * Например: id=123&id=234
     * @return null если нет выделенных
     */
    this.getInsertedIdsAsParams = function(aIdParamName,aClass) {
        var ids = this.getInsertedIds(aClass) ;
        if (ids) {
            var str = "";
            for (var i = 0; i < ids.length; i++) {
            	if (ids[i]!="inserted") {
            		if (aIdParamName!=null && aIdParamName!="") {
    	                str += aIdParamName+"=" + ids[i];
    	                if (i != ids.length - 1) {
    	                    str += "&";
    	                }
            		} else {
    	                str += ids[i];
    	                if (i != ids.length - 1) {
    	                    str += ",";
    	                }
            		}
                }
            }
            return str ;
        } else {
            return null ;
        }
    }

    
    this.remove = function() {
        try { document.detachEvent('onkeydown',onKey); } catch (e) {
            try { document.removeEventListener("keypress",onKey,false); } catch (e) {}
        }
    }

    this.onCheckBoxClick = function(aCheckBox) {
        var row = aCheckBox.parentNode.parentNode ;
        insert(row) ;
    }

    //
    this.getInsertedIds = function (clazz) {
        var ret  = new Array();
        var rows = getRows() ;
        for(var i=0; i<rows.length; i++) {
            var row = rows[i] ;
            if(row!=null && (clazz==null||clazz=="" || Element.hasClassName(row, clazz)) && Element.hasClassName(row, "inserted")) {
                var tokens = row.className.split(' ');
                if(tokens.length>1) {
                    ret.push(tokens[1]) ;
                }
            } else {
            }
        }
        return ret.length!=0 ? ret : null ;
    }

    /** Все строки всех таблиц*/
    function getRows() {
        if(theRows==null) {
            theRows = theTable.getElementsByTagName("tr") ;
        }
        return theRows ;
    }

    /**
     * Выбрать строку в таблице
     */
    function select(aRow) {
        Element.addClassName(aRow, "selected") ;

    }

    function deselect(aRow) {
    	Element.removeClassName(aRow, "selected") ;
    }

    function insert(aRow) {
        var classes = aRow.className.split(' ');
        var checkBox = $(classes[0]+'_'+classes[1]) ;

        if(Element.hasClassName(aRow, "inserted")) {
            Element.removeClassName(aRow, "inserted") ;
            if(checkBox) checkBox.checked = false ;
        } else {
            Element.addClassName(aRow, "inserted") ;
            if(checkBox) checkBox.checked = true ;
        }
    }

    function insertCurrent() {
        var row = getSelectedRow() ;
        if(row) {
            insert(row) ;
        }
    }


    function getSelectedIndex() {
        if (theLastSelectedIndex == null) {
            var rows = getRows() ;
            for (var i = 0; i < rows.length; i++) {
                if (Element.hasClassName(rows[i], "selected")) {
                    theLastSelectedIndex = i ;
                    break ;
                }
            }
        }
        return theLastSelectedIndex;
    }

    function isUndefinedRowAction(aRow) {
    	try { return aRow.onclick == undefined } catch (e) {} 
    	try { return aRow.onclick == null } catch (e) {} 
    	return false ;
    }

    function setSelectedIndex(aIndex) {
        var rows  = getRows() ;
//        for (var i=0; i<rows.length; i++) {
//            deselect(rows[i]) ;
//         }
        deselect(rows[theLastSelectedIndex]) ;
        select(rows[aIndex]) ;
        theLastSelectedIndex = aIndex ;
    }

    function selectLast() {
        var rows = getRows() ;
        setSelectedIndex(rows.length-1) ;
    }

    function selectFirst() {
        var rows = getRows() ;
        theFirstSel = 0 ;
        for (var i=0; i<rows.length; i++) {
            if(!isUndefinedRowAction(rows[i])) {
                theFirstSel = i ;
                break ;
            }
        }
        setSelectedIndex(theFirstSel) ;
    }

    function getNextAllowedIndex(aIndex) {
        var rows = getRows() ;
        for (var i=aIndex; i<rows.length; i++) {
            if(!isUndefinedRowAction(rows[i])) {
                return i ;
            }
        }
        return null ;
    }

    function getPreviousAllowedIndex(aIndex) {
        var rows = getRows() ;
        for (var i=aIndex; i>=theFirstSel; i--) {
            if(!isUndefinedRowAction(rows[i])) {
                return i ;
            }
        }
        return null ;
    }

    function selectPageDown() {
        // TODO нажатие на кнопку вперед
        if(getSelectedIndex()!=getRows().length-1) {
             for(var i=0; i<10; i++) {
                selectNext() ;
                if(getSelectedIndex()==getRows().length-1) {
                    break ;
                }
             }
        }
    }

    function selectPageUp() {
        // TODO нажатие на кнопку назад
        if(getSelectedIndex()!=theFirstSel) {
             for(var i=0; i<10; i++) {
                selectPrevious() ;
                if(getSelectedIndex()==theFirstSel) {
                    break ;
                }
             }
        }
    }

    function selectNext() {
        var selIndex = getSelectedIndex() ;
        if(selIndex==null) {
            selectFirst() ;
        } else {
            var sel = getNextAllowedIndex(selIndex+1) ;
            if(sel!=null && sel < getRows().length) {
                setSelectedIndex(sel) ;
            } else {
                selectFirst() ;
            }
        }
    }

    function selectPrevious() {
        var selIndex = getSelectedIndex() ;
        if(selIndex==null) {
            selectLast() ;
        } else {
            var sel = getPreviousAllowedIndex(selIndex-1) ;
            if(sel!=null && sel>=theFirstSel) {
                setSelectedIndex(sel) ;
            } else {
                selectLast() ;
            }
        }
    }

    function getSelectedRow() {
        var sel = getSelectedIndex() ;
        if(sel!=null) {
            return getRows()[sel] ;
        } else {
            return null ;
        }
    }

    function enter() {
        var tr = getSelectedRow() ;
        if(tr!=null) {
            if(!isUndefinedRowAction(tr)) {
                try {
                	var size = tr.childNodes.length-2 ;
                	tr.childNodes[size].onclick() ;
                } catch (e) {
                    tr.childNodes[0].onclick() ;
                }
            }
        }
    }

    function onKey(aEvent) {
        var keyCode = aEvent.keyCode ;
        if(40 == keyCode) { // KEY_DOWN
            selectNext() ;
        } else if ( 38 == keyCode) { // KEY_UP
            selectPrevious() ;
        } else if ( eventutil.VK_INSERT == keyCode) {
            insertCurrent() ;
            selectNext() ;
        } else if( 13 == keyCode ) { // ENTER
            enter() ;
        } else if( 35 == keyCode ) { // END
            selectLast() ;
        } else if (36 == keyCode) { //  HOME
            selectFirst() ;
        } else if( 34 == keyCode ) { // PAGE DOWN
            selectPageDown() ;
        } else if (33 == keyCode) { //  PAGE UP
            selectPageUp() ;
        } else if(112 == keyCode) {
        	window.status = keyCode ;
	     return false ;
        }
        //alert(keyCode) ;
        return false ;

    }



}
/*
Copyright (c) 2005 JSON.org

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The Software shall be used for Good, not Evil.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/

/*
    The global object JSON contains two methods.

    JSON.stringify(value) takes a JavaScript value and produces a JSON text.
    The value must not be cyclical.

    JSON.parse(text) takes a JSON text and produces a JavaScript value. It will
    return false if there is an error.
*/
var JSON = function () {
    var m = {
            '\b': '\\b',
            '\t': '\\t',
            '\n': '\\n',
            '\f': '\\f',
            '\r': '\\r',
            '"' : '\\"',
            '\\': '\\\\'
        },
        s = {
            'boolean': function (x) {
                return String(x);
            },
            number: function (x) {
                return isFinite(x) ? String(x) : 'null';
            },
            string: function (x) {
                if (/["\\\x00-\x1f]/.test(x)) {
                    x = x.replace(/([\x00-\x1f\\"])/g, function(a, b) {
                        var c = m[b];
                        if (c) {
                            return c;
                        }
                        c = b.charCodeAt();
                        return '\\u00' +
                            Math.floor(c / 16).toString(16) +
                            (c % 16).toString(16);
                    });
                }
                return '"' + x + '"';
            },
            object: function (x) {
                if (x) {
                    var a = [], b, f, i, l, v;
                    if (x instanceof Array) {
                        a[0] = '[';
                        l = x.length;
                        for (i = 0; i < l; i += 1) {
                            v = x[i];
                            f = s[typeof v];
                            if (f) {
                                v = f(v);
                                if (typeof v == 'string') {
                                    if (b) {
                                        a[a.length] = ',';
                                    }
                                    a[a.length] = v;
                                    b = true;
                                }
                            }
                        }
                        a[a.length] = ']';
                    } else if (x instanceof Object) {
                        a[0] = '{';
                        for (i in x) {
                            v = x[i];
                            f = s[typeof v];
                            if (f) {
                                v = f(v);
                                if (typeof v == 'string') {
                                    if (b) {
                                        a[a.length] = ',';
                                    }
                                    a.push(s.string(i), ':', v);
                                    b = true;
                                }
                            }
                        }
                        a[a.length] = '}';
                    } else {
                        return;
                    }
                    return a.join('');
                }
                return 'null';
            }
        };
    return {
        copyright: '(c)2005 JSON.org',
        license: 'http://www.JSON.org/license.html',
/*
    Stringify a JavaScript value, producing a JSON text.
*/
        stringify: function (v) {
            var f = s[typeof v];
            if (f) {
                v = f(v);
                if (typeof v == 'string') {
                    return v;
                }
            }
            return null;
        },
/*
    Parse a JSON text, producing a JavaScript value.
    It returns false if there is a syntax error.
*/
        parse: function (text) {
            try {
                return !(/[^,:{}\[\]0-9.\-+Eaeflnr-u \n\r\t]/.test(
                        text.replace(/"(\\.|[^"\\])*"/g, ''))) &&
                    eval('(' + text + ')');
            } catch (e) {
                return false;
            }
        }
    };
}();
/* ---------------------------------------------------------------------- */
/* Example File From "_JavaScript and DHTML Cookbook"
   Published by O'Reilly & Associates
   Copyright 2003 Danny Goodman
*/

// utility function to retrieve a future expiration date in proper format;
// pass three integer parameters for the number of days, hours,
// and minutes from now you want the cookie to expire; all three
// parameters required, so use zeros where appropriate
function getExpDate(days, hours, minutes) {
  var expDate = new Date();
  if (typeof days == "number" && typeof hours == "number" && typeof hours == "number") {
    expDate.setDate(expDate.getDate() + parseInt(days));
    expDate.setHours(expDate.getHours() + parseInt(hours));
    expDate.setMinutes(expDate.getMinutes() + parseInt(minutes));
    return expDate.toGMTString();
  }
}

// utility function called by getCookie()
function getCookieVal(offset) {
  var endstr = document.cookie.indexOf (";", offset);
  if (endstr == -1) {
    endstr = document.cookie.length;
  }
  return unescape(document.cookie.substring(offset, endstr));
}

// primary function to retrieve cookie by name
function getCookie(name) {
  var arg = name + "=";
  var alen = arg.length;
  var clen = document.cookie.length;
  var i = 0;
  while (i < clen) {
    var j = i + alen;
    if (document.cookie.substring(i, j) == arg) {
      return getCookieVal(j);
    }
    i = document.cookie.indexOf(" ", i) + 1;
    if (i == 0) break;
  }
  return null;
}

// store cookie value with optional details as needed
function setCookie(name, value, expires, path, domain, secure) {
  document.cookie = name + "=" + escape (value) +
    ((expires) ? "; expires=" + expires : "") +
    ((path) ? "; path=" + path : "") +
    ((domain) ? "; domain=" + domain : "") +
    ((secure) ? "; secure" : "");
}

// remove the cookie by setting ancient expiration date
function deleteCookie(name,path,domain) {
  if (getCookie(name)) {
    document.cookie = name + "=" +
      ((path) ? "; path=" + path : "") +
      ((domain) ? "; domain=" + domain : "") +
      "; expires=Thu, 01-Jan-70 00:00:01 GMT";
  }
}
/* ---------------------------------------------------------------------- */
/* End Copyright 2003 Danny Goodman */
/**
* @class The MSH global namespace
*/
var msh = function() {
    return {

    /**
    * MSH presentation platform widgets namespace
    */
        widget: {},
    /**
    * MSH presentation platform widgets namespace
    */
        util: {},
    /**
         * Эффекты
         */
        effect: {},

        log: {},

        idemode: {}
    };
}() ;

Function.prototype.bindNoArgs = function (object) {
    var method = this;
    return function () {
        return method.apply(object);
    };
}

function entries(collection) {
    var result = [];
    // This is our real duck.

    for (var i = 0; i < collection.length; i++)
        result.push(collection[i]);

    return result;
}

Function.prototype.bind = function (object) {
    var method = this;
    var oldArguments = entries(arguments).slice(1);
    return function () {
        var newArguments = entries(arguments);
        return method.apply(object, oldArguments.concat(newArguments));
    };
}

Function.prototype.bindRequest = function (object) {
    var method = this;
    return function (aRequest) {
        var args = new Array() ;
        args.push(aRequest);
        //        try {
        return method.apply(object, args);
        //        } catch (e) {
        //            alert(e) ;
        //            return null ;
        //        }
    };
}

msh.log.error = function (aMessage) {
	try {
		console.error(aMessage) ;
	} catch (e) {
	}
}

msh.idemode.goInIdeMode = function() {
	setCookie("showTags","true") ;
	window.location.reload() ;
}	
/**
*
*/
msh.effect.FadeEffect = function() {
}

msh.effect.FadeEffect.putFade = function() {
    var div = $('fadeEffect') ;
    if (div == null) {
        div = document.createElement("div") ;
        div.id = "fadeEffect";

        document.body.insertBefore(div,document.body.firstChild);

//        document.body.appendChild(div) ;
    }
    if(div.style.zIndex==null) {
        div.style.zIndex = 0 ;
    }
    if(div.style.zIndex==1) {
        div.style.zIndex = 2 ;
    }
    div.style.zIndex++ ;
}

msh.effect.FadeEffect.getIndex = function() {
    var div = $('fadeEffect') ;
    if(div.style.zIndex==null) {
        div.style.zIndex = 0 ;
    }
    return div.style.zIndex ;
}

msh.effect.FadeEffect.pushFade = function() {
    var div = $('fadeEffect') ;
    if(div!=null) {
        if(div.style.zIndex==null) {
            div.style.zIndex = 0 ;
        }
        if(div.style.zIndex==2) {
            div.style.zIndex = 1 ;
        }

        div.style.zIndex-- ;
        if(div.style.zIndex==0) {
            div.parentNode.removeChild(div) ;
        }
    }
}
/**
 * @class Диалоговое окно
 *
 * @constructor
 * @param {String} theDialogDiv  элемент диалога
 */
msh.widget.Dialog = function(theDialogElement) {

    /**
        *  Показать диалог
        */
    this.show = function() {
        theDialogElement.style.display = "block";
        theDialogElement.style.visibility = "visible";
        msh.effect.FadeEffect.putFade();
        theDialogElement.style.zIndex = 1 + Math.round(msh.effect.FadeEffect.getIndex());
        theDialogElement.parentNode.removeChild(theDialogElement);
        document.body.appendChild(theDialogElement);
        center(theDialogElement) ;
    }
    /**
        *  Убрать диалог
        */
    this.hide = function() {
        msh.effect.FadeEffect.pushFade();
        theDialogElement.style.display = "none";
        theDialogElement.style.visibility = "hidden";
    }
    
    
    
}

function center(element){
    try{
        element = $(element);
    }catch(e){
        return;
    }

    var my_width  = 0;
    var my_height = 0;

    if ( typeof( window.innerWidth ) == 'number' ){
        my_width  = window.innerWidth;
        my_height = window.innerHeight;
    }else if ( document.documentElement && 
             ( document.documentElement.clientWidth ||
               document.documentElement.clientHeight ) ){
        my_width  = document.documentElement.clientWidth;
        my_height = document.documentElement.clientHeight;
    }
    else if ( document.body && 
            ( document.body.clientWidth || document.body.clientHeight ) ){
        my_width  = document.body.clientWidth;
        my_height = document.body.clientHeight;
    }

    element.style.position = 'absolute';
    element.style.zIndex   = 99;

    var scrollY = 0;

    if ( document.documentElement && document.documentElement.scrollTop ){
        scrollY = document.documentElement.scrollTop;
    }else if ( document.body && document.body.scrollTop ){
        scrollY = document.body.scrollTop;
    }else if ( window.pageYOffset ){
        scrollY = window.pageYOffset;
    }else if ( window.scrollY ){
        scrollY = window.scrollY;
    }

    var elementDimensions = getDimensions(element);

    var setX = ( my_width  - elementDimensions.width  ) / 2;
    var setY = ( my_height - elementDimensions.height ) / 3 + scrollY;

    setX = ( setX < 0 ) ? 0 : setX;
    setY = ( setY < 0 ) ? 0 : setY;

    element.style.left = setX + "px";
    element.style.top  = setY + "px";

    element.style.display  = 'block';
}

function getDimensions(element) {
    element = $(element);
    var display = element.style.display;
    if (display != 'none' && display != null) // Safari bug
      return {width: element.offsetWidth, height: element.offsetHeight};

    // All *Width and *Height properties give 0 on elements with display none,
    // so enable the element temporarily
    var els = element.style;
    var originalVisibility = els.visibility;
    var originalPosition = els.position;
    var originalDisplay = els.display;
    els.visibility = 'hidden';
    els.position = 'absolute';
    els.display = 'block';
    var originalWidth = element.clientWidth;
    var originalHeight = element.clientHeight;
    els.display = originalDisplay;
    els.position = originalPosition;
    els.visibility = originalVisibility;
    return {width: originalWidth, height: originalHeight};
  }
 


msh.widget.TreeTableDialog = function(aName, aTitle, aControlObject) {
    this.theName = aName ;
    this.theDialog = null ;
    this.theTitle = aTitle ;
    this.theDialogId = aName + "Dialog" ;
    this.theDialog = null ;
    this.theRootPane = null ;
    this.theLastSearch = "" ;
    this.theData = null ;
    this.theGoFunction = null ;
    this.theObject = null ;
    this.theControlObject = aControlObject ;

    //
    this.thePageDown = this.createForwardTd() ;
    this.thePageUp = this.createBackTd() ;

    //
    this.init() ;
}


msh.widget.TreeTableDialog.prototype.init = function() {
    var div = document.createElement("div") ;
    div.id = this.theDialogId ;
    div.className = "dialog" ;

    var h2 = document.createElement("h2") ;
    h2.appendChild(document.createTextNode(this.theTitle)) ;

    var rootPane = document.createElement("div") ;
    rootPane.className = "rootPane treeTable" ;

    div.appendChild(h2) ;
    div.appendChild(rootPane) ;

    document.body.appendChild(div) ;
    this.theDialog = new msh.widget.Dialog(div)  ;
    this.theRootPane = rootPane ;

}

msh.widget.TreeTableDialog.prototype.setMessage = function(aMessage) {
    this.theRootPane.appendChild(document.createTextNode(aMessage)) ;
}
msh.widget.TreeTableDialog.prototype.show = function() {
    this.theDialog.show() ;
}

msh.widget.TreeTableDialog.prototype.updateContent = function(aData, aGoFunction, aObject) {
    this.theData = aData ;
    this.theGoFunction = aGoFunction ;
    this.theObject = aObject ;

    // create table
    var table = document.createElement("table") ;
    table.className = "tabview sel tableArrow" ;

    var tbody = document.createElement("tbody") ;
    table.appendChild(tbody) ;

    // header
    var headerRow = document.createElement("tr") ;
    tbody.appendChild(headerRow) ;
    for(i=0; i<aData.titles.length; i++) {
        var th = document.createElement("th") ;
        th.appendChild(document.createTextNode(aData.titles[i])) ;
        headerRow.appendChild(th) ;
    }
    // cells
    for(row=0; row<aData.rows.length; row++) {
        var tr = document.createElement("tr") ;
        tr.onclick = "" ;

        for(col=0; col<aData.rows[row].cols.length; col++) {
            var td = document.createElement("td") ;
            td.appendChild(document.createTextNode(aData.rows[row].cols[col])) ;
            td.onclick = aGoFunction.bind(aObject, null, aData.rows[row].id, true, null) ;
            tr.appendChild(td) ;
        }
        if(row==0) { // back
            tr.appendChild(this.thePageUp) ;
        }
        if(row==1) { // space
            var td = document.createElement("td") ;
            td.appendChild(document.createTextNode(" ")) ;
            td.style.cssText = "background-color: white; color: blue" ;
            td.rowSpan = aData.rows.length - 2;
            tr.appendChild(td) ;
        }
        if(row==aData.rows.length-1) { // back
//            tr.appendChild(this.createForwardTd(aData, aGoFunction, aObject)) ;
            tr.appendChild(this.thePageDown) ;// this.createForwardTd(aData, aGoFunction, aObject)) ;
        }
        tbody.appendChild(tr) ;
    }

    // path
    var ul = document.createElement("ul") ;
    for(i=0; i<aData.path.length; i++) {
        var li = document.createElement("li") ;
        li.appendChild(document.createTextNode(" >> ")) ;
        var a = document.createElement("a") ;
        li.appendChild(a) ;

        a.appendChild(document.createTextNode(aData.path[i].name)) ;
        a.onclick = aGoFunction.bind(aObject, aData.path[i].id, aData.path[i].parentId, true, null) ;
        a.href='#' ;
        li.appendChild(document.createTextNode(" ")) ;
        ul.appendChild(li) ;
    }

    // search
    var link = document.createElement("a") ;
    link.href="#" ;
    link.onclick = this.search.bind(this, aData.firstId, aData.firstParentId, aGoFunction, aObject) ;
    link.appendChild(document.createTextNode("Найти")) ;



    var okLink = document.createElement("input") ;
    okLink.value = 'Выбрать' ;
    okLink.type = "button" ;
    okLink.onclick = aObject.selectCurrent ;

    var clearLink = document.createElement("input") ;
    clearLink.value = 'Сбросить' ;
    clearLink.type = "button" ;
    clearLink.onclick = aObject.clear ;

    this.theRootPane.innerHTML = "" ;
    this.theRootPane.appendChild(ul) ;
    this.theRootPane.appendChild(document.createElement("hr")) ;
    this.theRootPane.appendChild(link) ;
    this.theRootPane.appendChild(document.createElement("hr")) ;
    this.theRootPane.appendChild(table) ;
    this.theRootPane.appendChild(okLink) ;
    this.theRootPane.appendChild(clearLink) ;


//    this.theRootPane.appendChild(link) ;
//    this.theRootPane.appendChild(document.createTextNode(" ")) ;
//    this.theRootPane.appendChild(nextLink) ;
}

msh.widget.TreeTableDialog.prototype.search = function(aFirstId, aParentId, aGoFunction, aObject) {
    this.theLastSearch = prompt("Найти", this.theLastSearch) ;
    var args = new Array() ;
    args.push(aFirstId) ;
    args.push(aParentId) ;
    args.push(true) ;
    args.push(this.theLastSearch) ;
    aGoFunction.apply(aObject, args) ;
    //aObject.aGoFunction(aFirstId, aParentId, true, this.theLastSearch) ;
}

msh.widget.TreeTableDialog.prototype.createBackTd = function() {
    var link = document.createElement("td") ;
    link.appendChild(document.createTextNode("▲")) ;
    link.style.cssText = "background-color: white; color: blue" ;
    link.onclick = this.theControlObject.onPagePrevious ;
    return link ;
}

//msh.widget.TreeTableDialog.prototype.onPageDown = function() {
//    this.theObject.go(this.theData.lastId, this.theData.lastParentId, true, null) ;
//}

//msh.widget.TreeTableDialog.prototype.onPageUp = function() {
//    this.theObject.go(this.theData.firstId, this.theData.lastParentId, false, null) ;
//}


msh.widget.TreeTableDialog.prototype.createForwardTd = function() {
    var nextLink = document.createElement("td") ;
    nextLink.style.cssText = "background-color: white; color: blue" ;
    nextLink.appendChild(document.createTextNode("▼")) ;
    nextLink.onclick = this.theControlObject.onPageNext ;
    return nextLink ;
}

//msh.widget.TreeTableDialog.prototype.createForwardTd2 = function(aData, aGoFunction, aObject) {
//    var nextLink = document.createElement("td") ;
//    nextLink.style.cssText = "background-color: white; color: blue" ;
//    nextLink.appendChild(document.createTextNode("▼")) ;
//    nextLink.onclick = this.onPageUp.bind(this) ;
//    return nextLink ;
//}

msh.widget.TreeTableDialog.prototype.hide = function() {
    this.theDialog.hide() ;
}
/**
 * Вывод списка в виде таблицы
 */
msh.widget.AutocompleteTableView = function(theElement, theDiv) {

    var theLastSelectedIndex = 0 ;

    ///////////////////////////////////////////////////////
    // PUBLIC FUNCTIONS
    //
    /**
     * Установить поле редактируемым
     */
    this.setEditabled = function(aEditabled) {
        if(aEditabled) {
            Element.addClassName(theElement, "vocEditabled");
            if(theElement.title==null) {
                theElement.title="" ;
            }
            theElement.title = theElement.title + "  Добавить - [ALT+INSERT], изменить - [F2]" ;
        }
    }

    /**
     * Поиск
     */
    this.setSearching = function (aSearching) {
        if (aSearching) {
            Element.addClassName(theElement, "searching");

        } else {
            Element.removeClassName(theElement, "searching");
        }
    }

    /**
     * Выделить следующий
     */
    this.selectNext = function() {
        //return setSelected(theLastSelectedIndex + 1);
    }


    /*
    *  Создание падающего списка
    */
    this.showBox = function(aXml) {
        var id = getValue(aXml, "requestId") ;
//        alert(id) ;
        var table = document.createElement("table") ;
        var tbody = document.createElement("tbody") ;
        var rows = aXml.getElementsByTagName("row") ;
        if(rows.length==0) {
            var tr = createTr(0, null) ;
            tbody.appendChild(tr);
        } else {
            for (var i = 0; i < rows.length; i++) {
                var tr = createTr(i, rows[i]) ;
                tbody.appendChild(tr);
            }
        }
        table.appendChild(tbody) ;


        theDiv.style.display = 'block';
        theDiv.className='autocomplete' ;
        if(theElement.clientWidth) {
            theDiv.style.width = theElement.clientWidth+"px" ;
            table.style.width = theElement.clientWidth+"px" ;
        } else {
            theDiv.style.width = "30em" ;
            table.style.width = "30em" ;
        }
        theDiv.style.visibility = 'visible';

        theDiv.innerHTML = "";
        //document.body.appendChild(theDiv);
        theDiv.appendChild(table);
        if(!setSelectedId(id)) setSelected(0) ;

//        theDiv.innerHTML = "<table><tr><td>heradf</td><td>asdf</td></tr></table>";

    }

    this.hide = function() {
        theDiv.innerHTML = "";
        theDiv.style.visibility = 'hidden';
        theDiv.style.display = 'none';
    }

    this.selectNext = function() {
        return setSelected(theLastSelectedIndex + 1);
    }

    this.selectPrevious = function() {
        return setSelected(theLastSelectedIndex - 1);
    }

    function setSelectedId(aId) {
        var finded = false ;
        var lis = theDiv.getElementsByTagName("tr") ;
        for (var i = 0; i < lis.length; i++) {
            var tr = lis[i] ;
            if(aId==lis[i].myId) {
                setSelected(i) ;
                finded = true ;
                break ;
            }
        }
        return finded ;
    }

    this.getSelectedId = function() {
        var trs = theDiv.getElementsByTagName("tr") ;
        for (var i = 0; i < trs.length; i++) {
            if (trs[i].className == 'selected') {
                return trs[i].myId ;
            }
        }
        return null ;
    }

    this.getSelectedName = function() {
        var trs = theDiv.getElementsByTagName("tr") ;
        for (var i = 0; i < trs.length; i++) {
            if (trs[i].className == 'selected') {
                return trs[i].myName ;
            }
        }
        return null ;
    }

    this.getLastId = function() {
        var trs = theDiv.getElementsByTagName("tr") ;
        if(trs.length>0) {
            var tr = trs[trs.length - 1] ;
            return tr.myId ;
        } else {
            return "" ;
        }
    }

    this.getFirstId = function() {
        var trs = theDiv.getElementsByTagName("tr") ;
        var tr = trs[0] ;
        return tr.myId ;
    }



    /////////////////////////////////////////////////////////
    // PRIVATE
    //

    function setSelected(aIndex) {
        theLastSelectedIndex = aIndex;
        var lis = theDiv.getElementsByTagName("tr") ;
        var selected = false ;
        for (var i = 0; i < lis.length; i++) {
            if (i == aIndex) {
                lis[i].className = "selected";
                selected = true;
            } else {
                lis[i].className = "";
            }
        }
        return selected;
    }

    function test123() {
        alert("hello") ;
    }

    function createTr(aIndex,aXmlRow) {
        var name = getValue(aXmlRow, 'name') ;
        if(name=="") name="-" ; // НЕТ STAC-109
        var id = getValue(aXmlRow, 'id') ;

        var tr = document.createElement("tr") ;
        tr.myId = id ;
        tr.myName = name ;

        var tdId = document.createElement("td") ;
        var tdName = document.createElement("td") ;

        tdId.appendChild(document.createTextNode(id)) ;
        tdName.appendChild(document.createTextNode(name)) ;

        tdId.className = 'id' ;
        tdName.className = 'name' ;


        tr.appendChild(tdId) ;
        tr.appendChild(tdName) ;

//        tdId.onclick = onSelectByMouse ;
//        tdName.onclick = onSelectByMouse ;

        tr.onmousedown = setSelected.bind(this, aIndex) ;
//        eventutil.addEventListener(tr, "mouseover", setSelected.bind(this, aIndex)) ;

        return tr ;
    }

    /*
    * Возвращает значение
    */
    function getValue(aParent, aNodeName) {
        if(aParent==null) return "";
        var elements = aParent.getElementsByTagName(aNodeName) ;
        if (elements.length > 0 && elements[0].firstChild) {
            return elements[0].firstChild.nodeValue;
        } else {
            return "";
        }
    }


}
/**
 * Вывод списка в виде таблицы
 */
msh.widget.TreeAutocompleteTableView = function(theElement, theDiv) {

    var theLastSelectedIndex = 0 ;
    var thePage = 0 ;
    

    ///////////////////////////////////////////////////////
    // PUBLIC FUNCTIONS
    //
    /**
     * Установить поле редактируемым
     */
    this.getPage = function() {
    	return thePage ;
    }
    this.setPage = function(aPage) {
    	thePage = aPage ;
    }
    this.setEditabled = function(aEditabled) {
        if(aEditabled) {
            Element.addClassName(theElement, "vocEditabled");
            if(theElement.title==null) {
                theElement.title="" ;
            }
            theElement.title = theElement.title + "  Добавить - [ALT+INSERT], изменить - [F2]" ;
        }
    }

    /**
     * Поиск
     */
    this.setSearching = function (aSearching) {
        if (aSearching) {
            Element.addClassName(theElement, "searching");

        } else {
            Element.removeClassName(theElement, "searching");
        }
    }

    /**
     * Выделить следующий
     */
    this.selectNext = function() {
        //return setSelected(theLastSelectedIndex + 1);
    }


    /*
    *  Создание падающего списка
    */
    this.showBox = function(aXml) {
        var id = getValue(aXml, "requestId") ;
//        alert(id) ;
        var table = document.createElement("table") ;
        var tbody = document.createElement("tbody") ;
        var rows = aXml.getElementsByTagName("row") ;
        
        if(rows.length==0) {
            var tr = createTr(0, null) ;
            tbody.appendChild(tr);
        } else {
            for (var i = 0; i < rows.length; i++) {
            	var j = 0;
            	if (i==0) j=1;
            	if (i==rows.length-1) j=2 ;
            	document.title = ""+j+document.title ;
                var tr = createTr(i, rows[i],j) ;
                tbody.appendChild(tr);
            }
        }
        table.appendChild(tbody) ;


        theDiv.style.display = 'block';
        theDiv.className='autocomplete' ;
        if(theElement.clientWidth) {
            theDiv.style.width = theElement.clientWidth+"px" ;
            table.style.width = theElement.clientWidth+"px" ;
        } else {
            theDiv.style.width = "30em" ;
            table.style.width = "30em" ;
        }
        theDiv.style.visibility = 'visible';

        theDiv.innerHTML = "";
        //document.body.appendChild(theDiv);
        theDiv.appendChild(table);
        if(!setSelectedId(id)) setSelected(0) ;

//        theDiv.innerHTML = "<table><tr><td>heradf</td><td>asdf</td></tr></table>";

    }

    this.hide = function() {
        theDiv.innerHTML = "";
        theDiv.style.visibility = 'hidden';
        theDiv.style.display = 'none';
    }

    this.selectNext = function() {
        return setSelected(theLastSelectedIndex + 1);
    }

    this.selectPrevious = function() {
        return setSelected(theLastSelectedIndex - 1);
    }

    function setSelectedId(aId) {
        var finded = false ;
        var lis = theDiv.getElementsByTagName("tr") ;
        for (var i = 0; i < lis.length; i++) {
            var tr = lis[i] ;
            if(aId==lis[i].myId) {
                setSelected(i) ;
                finded = true ;
                break ;
            }
        }
        return finded ;
    }

    this.getSelectedId = function() {
        var trs = theDiv.getElementsByTagName("tr") ;
        for (var i = 0; i < trs.length; i++) {
            if (trs[i].className == 'selected') {
                return trs[i].myId ;
            }
        }
        return null ;
    }

    this.getSelectedName = function() {
        var trs = theDiv.getElementsByTagName("tr") ;
        for (var i = 0; i < trs.length; i++) {
            if (trs[i].className == 'selected') {
                return trs[i].myName ;
            }
        }
        return null ;
    }

    this.getLastId = function() {
        var trs = theDiv.getElementsByTagName("tr") ;
        if(trs.length>0) {
            var tr = trs[trs.length - 1] ;
            return tr.myId ;
        } else {
            return "" ;
        }
    }

    this.getFirstId = function() {
        var trs = theDiv.getElementsByTagName("tr") ;
        var tr = trs[0] ;
        return tr.myId ;
    }



    /////////////////////////////////////////////////////////
    // PRIVATE
    //

    function setPage(aPage) {
    	thePage = aPage ;
    }
    function setSelected(aIndex) {
        //alert(thePage);
        switch(thePage) {
        	case 1:
        		document.title = "1down_"+document.title ;
        		
        		return true ;
        		//setSelected(theLastSelectedIndex + 1);
        		break ;
        	case 2:
        		document.title = "2down_"+document.title ;
        		return true ;
        		break ;
        	default:
        		//document.title = "0_"+document.title ;
		        theLastSelectedIndex = aIndex;
		        var lis = theDiv.getElementsByTagName("tr") ;
		        var selected = false ;
		        for (var i = 0; i < lis.length; i++) {
		            if (i == aIndex) {
		                lis[i].className = "selected";
		                document.title = "s"+i+""+document.title ;
		                selected = true;
		            } else {
		                lis[i].className = "";
		            }
		        }
		        document.title = selected+"+"+document.title ;
		        return selected;
        }
    
    }

    function test123(aText) {
        alert(aText) ;
    }

    function createTr(aIndex,aXmlRow,aPage) {
        var name = getValue(aXmlRow, 'name') ;
        if(name=="") name="-" ; // НЕТ STAC-109
        var id = getValue(aXmlRow, 'id') ;

        var tr = document.createElement("tr") ;
        tr.myId = id ;
        tr.myName = name ;

        var tdNext = document.createElement("td") ;
        var tdId = document.createElement("td") ;
        var tdName = document.createElement("td") ;
        var tdPrev = document.createElement("td") ;
        var tdPage = document.createElement("td") ;

        tdId.appendChild(document.createTextNode(id)) ;
        tdPrev.appendChild(document.createTextNode("<")) ;
        tdName.appendChild(document.createTextNode(name)) ;
        tdNext.appendChild(document.createTextNode(">")) ;
        

        tdPrev.className = 'navig' ;
        tdNext.className = 'navig' ;
        tdId.className = 'id' ;
        tdName.className = 'name' ;
        tdPage.className='navig' ;
        
		switch(aPage) {
			case 1:
				tdPage.appendChild(document.createTextNode("^")) ;
				tdPage.onmousedown = setPage.bind(this,1) ;
				break;
			case 2:
				tdPage.appendChild(document.createTextNode("*")) ;
				tdPage.onmousedown = setPage.bind(this,2) ;
				break;
			default:
				break ;
		}
		thePage=0 ;
        tr.appendChild(tdPrev) ;
        tr.appendChild(tdId) ;
        tr.appendChild(tdName) ;
        tr.appendChild(tdNext) ;
        tr.appendChild(tdPage) ;

//        tdId.onclick = onSelectByMouse ;
//        tdName.onclick = onSelectByMouse ;

        tr.onmousedown = setSelected.bind(this, aIndex) ;
        
//        eventutil.addEventListener(tr, "mouseover", setSelected.bind(this, aIndex)) ;

        return tr ;
    }

    /*
    * Возвращает значение
    */
    function getValue(aParent, aNodeName) {
        if(aParent==null) return "";
        var elements = aParent.getElementsByTagName(aNodeName) ;
        if (elements.length > 0 && elements[0].firstChild) {
            return elements[0].firstChild.nodeValue;
        } else {
            return "";
        }
    }


}
/**
 * @class Вложенная таблица
 *
 * @constructor
 * @param {String} aUrl   обработчик
 * @param {String} aName  имя компонента
 * @param {String} aTitle заголовок
 *
 */
msh.widget.TreeTable = function(theUrl, theName, theTitle, theInput) {

    var theLastSearch = "";

    var theNameField = null ;
    var theEditButton = null ;
    var theData = null ;
    var theThis = this ;

    this.onPageNext = function() {
        go(theData.lastId, theData.lastParentId, true, null) ;
    } ;

    this.onPagePrevious = function() {
        go(theData.firstId, theData.lastParentId, false, null) ;
    } ;

    var theDialog = new msh.widget.TreeTableDialog(theName, theTitle, this);


    this.selectCurrent = function() {
        selectData(theData) ;
    }

    this.clear = function() {
        theDialog.hide() ;
        theNameField.innerHTML = "" ;
        theInput.value = "" ;
    }

    function selectData(data) {
        //alert(data) ;
        theDialog.hide() ;
        //alert("dialog="+this.theDialog) ;
        //var i = data.path.length-1 ;
        //this.theIdField = data.path[data.path.length-1].id ;
        var address = "" ;
        for(var i=0; i<data.path.length; i++) {
            address = address + " " + data.path[i].name ;
        }
        theNameField.innerHTML = address ;
        theInput.value = data.path[data.path.length-1].id ;
    }

    this.setCurrentData = function(aData) {
        theData = aData ;
    }

    /** Установить в узел aNode */
    this.installTo = function (aNode) {
        theField = aNode ;
        var parentNode = aNode.parentNode ;
        parentNode.removeChild(aNode);

        var span = document.createElement("span") ;
        theNameField = span ;
        span.appendChild(document.createTextNode(aNode.value));
        parentNode.appendChild(span);

        var input  = document.createElement("input") ;
        input.id   = theName + "EditButton";
        input.type = 'button';
        input.onclick = this.onEditButtonClick ;
        input.value   = "Изменить";
        parentNode.appendChild(input);
        theEditButton = input ;

        var holderDiv = document.createElement("div") ;
        holderDiv.id = theName + "Holder";
        parentNode.appendChild(holderDiv);
    };

    this.onEditButtonClick = function() {
        theEditButton.blur() ;
        theDialog.show();
        go(theInput.value!=""?theInput.value:null, null, true);
    } ;

    function go(aFromId, aParentId, aIsForward, aSearchString) {
        if(aSearchString) {
            theDialog.setMessage("Поиск "+aSearchString+" ...") ;
        } else {
            theDialog.setMessage("Ждите ...") ;
        }
        if (theTableArrow != null) {
            theTableArrow.remove();
        }
        var pars = "" ;
        if (aParentId != null) pars += "parentId=" + aParentId + "&";
        if (aFromId != null) pars += "fromId=" + aFromId + "&";
        if (!aIsForward) pars += "direction=backward&";
        if (aSearchString != null) pars += "search=" + aSearchString + "&";

        //    var ajax = new Ajax.Updater(this.theName + 'Holder', this.theUrl, {method: 'POST'
        //        , parameters: pars
        //        , onComplete: this.onComplete.bind(this)});

        var cObj = YAHOO.util.Connect.asyncRequest('POST', theUrl, {
            success: onComplete ,
            failure: function (response) {
                alert(response.statusText);
            }
        }, pars);
    } ;


    function onComplete(aResponse) {
    //    alert(aResponse.responseText);
        var data = eval('(' + aResponse.responseText + ')') ;
        theData = data ;
        //this.theData = data ;
        //this.setCurrentData(data) ;
        if(data.rows.length==0) {
            theDialog.hide() ;
            //var i = data.path.length-1 ;
            //this.theIdField = data.path[data.path.length-1].id ;
            var address = "" ;
            for(var i=0; i<data.path.length; i++) {
                address = address + " " + data.path[i].name ;
            }
            theNameField.innerHTML = address ;
            theInput.value = data.path[data.path.length-1].id ;
        } else {
            theDialog.updateContent(data
                    , go, theThis);
        }

        if (theTableArrow != null) {
            theTableArrow.remove();
        }
        theTableArrow = new tablearrow.TableArrow('tab1');
    };

    function search(aFromId, aParentId, aIsForward) {
        theLastSearch = prompt("Найти:", "Поиск по КЛАДР", theLastSearch);
        go(aFromId, aParentId, aIsForward, theLastSearch);
    };

};


function createTestData() {
    return ({
        titles : ["hello", "heee123", "asdf"],
        rows: [
        { id: "1", parentId: "123", cols: [123,123,123]},
        { id: "1", parentId: "123", cols: [123,123,123]},
        { id: "1", parentId: "123", cols: [123,123,123]},
        { id: "1", parentId: "123", cols: [123,123,123]},
        { id: "1", parentId: "123", cols: [123,123,123]},
        { id: "1", parentId: "123", cols: [123,123,123]}
                ]
    });
}


var theMainFormDataInstance = null ;

msh.util.FormData = function() {
    var theInitValues = null ;
    var theForm = null ;

    this.init = function(aForm) {
        if(aForm==null) alert("Нет формы") ;
        if(theInitValues==null) {
            theInitValues = Form.serialize(aForm) ;
            theForm = aForm ;
        } else {
            alert("msh.util.FormData: Форма уже проинициализирована") ;
        }
    }

    this.isChanged = function() {
        return theInitValues!=Form.serialize(theForm) ;
    }

    this.isChangedForLink = function() {
        if(theForm==null) return true ;
        var changed = theInitValues!=Form.serialize(theForm) ;
        if(changed) {
            //alert(theInitValues+"\n"+Form.serialize(theForm)) ;
//            var w = window.open(""
//                    , ""
//                    , "height=500,width=600,scrollbars=yes") ;
//
//            w.document.write(theInitValues+"<br>"+Form.serialize(theForm));

            return confirm("Данные в форме изменились. Продолжить без сохранения данных?") ;
        }
        return !changed ;
    }
}

msh.util.FormData.getInstance = function() {
    if(theMainFormDataInstance==null) {
        theMainFormDataInstance = new msh.util.FormData() ;
    }
    return theMainFormDataInstance ;
}



var errorutil = {
    Version: '1.0'
}

errorutil.ShowFieldError = function (aElement, aErrorMessage) {
    var theElement  = aElement ;
    var theErrorMessage = aErrorMessage ;
    aElement.title = aErrorMessage ;
//    aElement.focus() ;
//    aElement.select();

    var errorDiv = document.createElement("DIV") ;
    errorDiv.innerHTML = aErrorMessage ;
    errorDiv.id = 'errorDiv';
    errorDiv.style.borderColor = "#F06" ;
    errorDiv.style.color = '#F06' ;
    aElement.parentNode.style.border = '2px solid #F06' ;
    aElement.parentNode.appendChild(errorDiv) ;

}

errorutil.HideError = function (aElement) {
    var theElement  = aElement ;
    aElement.parentNode.style.border = ''
    aElement.title = "";
    try {
        var aChild=aElement.parentNode.lastChild ;
        if (aChild.tagName == "DIV" && aChild.id == "errorDiv") aElement.parentNode.removeChild(aChild);
    } catch (e){
    }


}
// обработка исключительных ситуаций
errorutil.SetErrorObj = function (msg) {
    var err = new Error(msg) ;
    if (!err.message) {
        err.message = msg ;
    }
    return err ;

}

var eventutil = {
    Version: '1.0'
    , EVENT_BLUR: 'blur'
    , EVENT_KEY_PRESS: 'keypress'
    , EVENT_KEY_UP: 'keyup'
    , EVENT_KEY_DOWN: 'keydown'
    , EVENT_CLICK: 'click'
    , EVENT_MOUSE_OVER: 'mouseover'
    , EVENT_MOUSE_OUT: 'mouseout'

    , VK_BACKSPACE: 8
    , VK_TAB: 9
    , VK_ENTER: 13
    , VK_INSERT: 45
    , VK_BACK_QUOTE: 192
    , VK_SPACE: 32
    , VK_ESCAPE: 27
    , VK_PAGE_DOWN: 34
    , VK_PAGE_UP: 33
    , VK_HOME: 36
    , VK_LEFT: 37
    , VK_UP: 38
    , VK_RIGHT: 39
    , VK_DOWN: 40
    , VK_DEL: 46
    , VK_0: 48
    , VK_1: 49
    , VK_2: 50
    , VK_3: 51
    , VK_4: 52
    , VK_5: 53
    , VK_6: 54
    , VK_7: 55
    , VK_8: 56
    , VK_9: 57

    , VK_A: 65
    , VK_B: 66
    , VK_C: 67
    , VK_D: 68

    , VK_N: 78

    , VK_F12: 123

}

EnterSupporter = function(aCurField, aNextElement) {

    this.select = function(aEvent) {
        var keyCode = aEvent.keyCode ;
//        alert(keyCode) ;
        if(aEvent.shiftKey && eventutil.isKey(aEvent, eventutil.VK_ESCAPE)) {
        //if(aEvent.ctrlKey && eventutil.isKey(aEvent, eventutil.VK_BACK_QUOTE)) {
            $('cancelButton').click() ;
        } else if(aEvent.ctrlKey && eventutil.isKey(aEvent, eventutil.VK_ENTER)){
            $('submitButton').click() ;
        } else if(eventutil.isKey(aEvent, eventutil.VK_ENTER)) {
            aCurField.blur() ;
            try {
                aNextElement.focus() ;
                aNextElement.select() ;
                return false ;
            } catch (e) {}

        }
    }
}

eventutil.addEventListener = function(aElement, aEventName, aListenerFunction) {
    try {
        aElement.attachEvent('on' + aEventName, aListenerFunction);
    } catch (e) {
        try {
            aElement.addEventListener(aEventName, aListenerFunction, false);
        } catch (e) {
            //alert(e);
        }
    }
}

eventutil.removeEventListener = function(aElement, aEventName, aListenerFunction) {
    try {
        aElement.detachEvent('on' + aEventName, aListenerFunction);
    } catch (e) {
        try {
            //alert("removing .."+aEventName) ;
            alert(aListenerFunction) ;
            aElement.removeEventListener(aEventName, aListenerFunction, true);
        } catch (e) {
            alert(e);
        }
    }
}

eventutil.addObserveListener = function(aElement, aEventName, aListenerFunction) {
    Event.observe(aElement, aEventName, aListenerFunction, false);
}

eventutil.addEnterSupport = function(aCurrentElementName, aNextElementName) {
	try {
    var curElm = $(aCurrentElementName) ;
    var nextElm = $(aNextElementName) ;
    if(curElm!=null && nextElm!=null) {
        eventutil.addEventListener(curElm, "keyup", new EnterSupporter(curElm, nextElm).select) ;
        curElm.setAttribute("autocomplete", "off");
        nextElm.setAttribute("autocomplete", "off");
    }
    } catch(e) {
    }
}

eventutil.isKey = function(aEvent, aKeyVk) {
    return aEvent.keyCode == aKeyVk ;
}

PrivateAccessKeyEvent = function(aKeyCode, aIsCtrl, aIsAlt, aIsShift) {
    this.theKeyCode = aKeyCode ;
    this.theIsCtrl  = aIsCtrl  ;
    this.theIsShift = aIsShift ;
    this.theIsAlt   = aIsAlt   ;

//    this.getKeyCode = function() {
//        return theKeyCode ;
//    }
}

function createSingleKey(aKeyCode) {
    return new PrivateAccessKeyEvent(aKeyCode , false, false, false)
}

function createCtrl(aKeyCode) {
    return new PrivateAccessKeyEvent(aKeyCode , true, false, false)
}

function createCtrlShift(aKeyCode) {
    return new PrivateAccessKeyEvent(aKeyCode , true, false, true)
}
function createShift(aKeyCode) {
    return new PrivateAccessKeyEvent(aKeyCode , false, false, true)
}
function createAlt(aKeyCode) {
    return new PrivateAccessKeyEvent(aKeyCode , false, true, false)
}

var accesskeyutil = {
    Version: '1.0'
    , ALT_0 :  createAlt(eventutil.VK_0)
    , ALT_1 :  createAlt(eventutil.VK_1)
    , ALT_2 :  createAlt(eventutil.VK_2)
    , ALT_3 :  createAlt(eventutil.VK_3)
    , ALT_4 :  createAlt(eventutil.VK_4)
    , ALT_5 :  createAlt(eventutil.VK_5)
    , ALT_6 :  createAlt(eventutil.VK_6)
    , ALT_7 :  createAlt(eventutil.VK_7)
    , ALT_8 :  createAlt(eventutil.VK_8)
    , ALT_9 :  createAlt(eventutil.VK_9)
    , ALT_A :  createAlt(eventutil.VK_A)
    , ALT_B :  createAlt(eventutil.VK_B)
    , ALT_C :  createAlt(eventutil.VK_C)
    , ALT_D :  createAlt(eventutil.VK_D)
    , ALT_N :  createAlt(eventutil.VK_N)
    , ALT_DEL :  createAlt(eventutil.VK_DEL)

    , CTRL_0: createCtrl(eventutil.VK_0)
    , CTRL_1: createCtrl(eventutil.VK_1)
    , CTRL_2: createCtrl(eventutil.VK_2)
    , CTRL_3: createCtrl(eventutil.VK_3)
    , CTRL_4: createCtrl(eventutil.VK_4)
    , CTRL_5: createCtrl(eventutil.VK_5)
    , CTRL_6: createCtrl(eventutil.VK_6)
    , CTRL_7: createCtrl(eventutil.VK_7)
    , CTRL_8: createCtrl(eventutil.VK_8)
    , CTRL_9: createCtrl(eventutil.VK_9)
    , CTRL_A: createCtrl(eventutil.VK_A)
    , CTRL_B: createCtrl(eventutil.VK_B)
    , CTRL_C: createCtrl(eventutil.VK_C)
    , CTRL_D: createCtrl(eventutil.VK_D)
    , CTRL_N: createCtrl(eventutil.VK_N)
    , CTRL_DEL: createCtrl(eventutil.VK_DEL)

    , SHIFT_0: createShift(eventutil.VK_0)
    , SHIFT_1: createShift(eventutil.VK_1)
    , SHIFT_2: createShift(eventutil.VK_2)
    , SHIFT_3: createShift(eventutil.VK_3)
    , SHIFT_4: createShift(eventutil.VK_4)
    , SHIFT_5: createShift(eventutil.VK_5)
    , SHIFT_6: createShift(eventutil.VK_6)
    , SHIFT_7: createShift(eventutil.VK_7)
    , SHIFT_8: createShift(eventutil.VK_8)
    , SHIFT_9: createShift(eventutil.VK_9)
    , SHIFT_A: createShift(eventutil.VK_A)
    , SHIFT_B: createShift(eventutil.VK_B)
    , SHIFT_C: createShift(eventutil.VK_C)
    , SHIFT_D: createShift(eventutil.VK_D)
    , SHIFT_N: createShift(eventutil.VK_N)
    , SHIFT_DEL: createShift(eventutil.VK_DEL)

    , SHIFT_CTRL_0: createCtrlShift(eventutil.VK_0)
    , SHIFT_CTRL_1: createCtrlShift(eventutil.VK_1)
    , SHIFT_CTRL_2: createCtrlShift(eventutil.VK_2)
    , SHIFT_CTRL_3: createCtrlShift(eventutil.VK_3)
    , SHIFT_CTRL_4: createCtrlShift(eventutil.VK_4)
    , SHIFT_CTRL_5: createCtrlShift(eventutil.VK_5)
    , SHIFT_CTRL_6: createCtrlShift(eventutil.VK_6)
    , SHIFT_CTRL_7: createCtrlShift(eventutil.VK_7)
    , SHIFT_CTRL_8: createCtrlShift(eventutil.VK_8)
    , SHIFT_CTRL_9: createCtrlShift(eventutil.VK_9)
    , SHIFT_CTRL_A: createCtrlShift(eventutil.VK_A)
    , SHIFT_CTRL_B: createCtrlShift(eventutil.VK_B)
    , SHIFT_CTRL_C: createCtrlShift(eventutil.VK_C)
    , SHIFT_CTRL_D: createCtrlShift(eventutil.VK_D)
    , SHIFT_CTRL_N: createCtrlShift(eventutil.VK_N)
    , SHIFT_CTRL_DEL: createCtrlShift(eventutil.VK_DEL)

    , F12 :  createSingleKey(eventutil.VK_F12)
}




accesskeyutil.AccessKeyListener = function (theHrefElement, theAccessKeyEvent) {

    this.onKey = function(aEvent) {
        var keyCode = aEvent.keyCode ;

//        alert(keyCode) ;
        if(keyCode==theAccessKeyEvent.theKeyCode
                && aEvent.ctrlKey==theAccessKeyEvent.theIsCtrl
                && aEvent.shiftKey==theAccessKeyEvent.theIsShift
                && aEvent.altKey==theAccessKeyEvent.theIsAlt) {
            theHrefElement.focus() ;
            if(theHrefElement.onclick) {
                var ok = theHrefElement.onclick() ;
                if(ok) {
                    window.location = theHrefElement.href ;
                }
            } else {
                window.location = theHrefElement.href ;
            }
            return false ;
        }
    }
}

accesskeyutil.registerKey = function (aHrefElement, aAccessKeyEvent) {
    eventutil.addEventListener(document, "keydown"
            , new accesskeyutil.AccessKeyListener(aHrefElement, aAccessKeyEvent).onKey) ;
}
var theTimeout = null ;

/*
 * new dateutil.DateField(element) ;
 */
var snilsutil =
{
    Version: '1.0'
}

snilsutil.SnilsField = function(aElement) {

    aElement.onblur = check ;
    var theElement  = aElement;

    var theFieldError = null ;

    function liveCheck(aEvent) {
        var keyCode = aEvent.keyCode ;
        if(keyCode == eventutil.VK_BACKSPACE) {

        } else {
            var size = theElement.value.length ;
            if(size==3 || size==7 ) {
                theElement.value = theElement.value + "-" ;
            } else if(size==11) {
            	theElement.value = theElement.value + " " ;
            } else if(size>14) {
                theElement.value = theElement.value.substring(0,14) ;
            }
        }
    }
    

    eventutil.addEventListener(aElement, "keydown", liveCheck) ;
   // eventutil.addEventListener(aElement, "click", liveCalendar) ;
    eventutil.addEventListener(aElement, "keyup", liveCheck) ;


    function check(aEvent)
    {
        try
        {
            theFieldError = errorutil.HideError(theElement) ;
            var oldSnils = theElement.value ;
            
            if (!(oldSnils == null || oldSnils == ""))
            {
                var snils = parseSnils(oldSnils);
                /*if(oldSnils!=snils)
                {
                    theElement.value = snils ;
                }*/
//            theFieldError = errorutil.HideError(theElement) ;
            }
            
        }
        catch (e)
        {
            //dump(e) ;
            theFieldError = errorutil.ShowFieldError(theElement, e.message) ;
            return false ;
        }
    }

}

////////////////////////////////////////////////////////////////////////////
//                         PRIVATE FUNCTION                               //
////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////
//                  ADDITION PRIVATE FUNCTION                             //
////////////////////////////////////////////////////////////////////////////

// проверка корректности введенной даты
function parseSnils(inputStr) {
	var snilsReg = new RegExp("[0-9]{3}[-]{1}[0-9]{3}[-]{1}[0-9]{3}[ ]{1}[0-9]{2}") ;
    if (!snilsReg.test(inputStr))
    {
        throw errorutil.SetErrorObj("Форма ввода СНИЛС: NNN-NNN-NNN NN. Например: 111-111-111 11") ;
    }
    return "";
}
var theTimeout = null ;

/*
 * new dateutil.DateField(element) ;
 */
var dateutil =
{
    Version: '1.0'
}

dateutil.DateField = function(aElement) {

	//var calA = document.createElement("SPAN") ;
	//calA.innerHTML="<a href=\"javascript:void(0)\" onclick=\"if(self.gfPop2){gfPop2.fPopCalendar($('"+aElement.id+"'));}return false;\">...</a>" ;
    //	calA.id = 'spanA'+aElement.id;
    	
    //aElement.parentNode.appendChild(calA) ;
   // aElement.parentNode.innerHTML = aElement.parentNode.innerHTML 
    eventutil.addEventListener(aElement, "dblclick", function() {if(self.gfPop2){gfPop2.fPopCalendar($(aElement.id));}}) ;	 
    aElement.onblur = check ;
    var theElement  = aElement;

    var theFieldError = null ;

    function liveCheck(aEvent) {
        var keyCode = aEvent.keyCode ;
        if(keyCode == eventutil.VK_BACKSPACE) {

        } else {
            var size = theElement.value.length ;
            if(size==2 || size==5) {
                theElement.value = theElement.value + "." ;
            } else if(size>10) {
                theElement.value = theElement.value.substring(0,10) ;
            }
        }
    }
    

    eventutil.addEventListener(aElement, "keydown", liveCheck) ;
   // eventutil.addEventListener(aElement, "click", liveCalendar) ;
    eventutil.addEventListener(aElement, "keyup", liveCheck) ;


    function check(aEvent)
    {
        try
        {
            theFieldError = errorutil.HideError(theElement) ;
            var oldDate = theElement.value ;
            if (!(oldDate == null || oldDate == ""))
            {
                var date = parseDate(oldDate);
                if(oldDate!=date)
                {
                    theElement.value = date ;
                }
//            theFieldError = errorutil.HideError(theElement) ;
            }
        }
        catch (e)
        {
            //dump(e) ;
            theFieldError = errorutil.ShowFieldError(theElement, e.message) ;
            return false ;
        }
    }

}

dateutil.PeriodFields = function(aElement, aElementLinker, aPlusYear, aPlusMonth, aPlusDate) {
    try
    {
        aElement.attachEvent('onblur',onLinker);
    } catch (e)
    {
        try { aElement.addEventListener("blur",onLinker,false); } catch (e) {}
    }
    var theElement = aElement ;
    var theLastText = theElement.value ;
    var theElementLinker = aElementLinker ;
    var thePlusYear = parseInt(aPlusYear,10) ;
    var thePlusMonth = parseInt(aPlusMonth,10) ;
    var thePlusDate = parseInt(aPlusDate,10)

    // Методы
    function onLinker(aEvent) {
        try {
//            if(theElementLinker.value=='') {
                var dateString = parseDate(theElement.value);

                var yyyy = parseInt(dateString.substring(6,dateString.length),10) ;
                var dd = parseInt(dateString.substring(0,2),10) ;
                var mm = parseInt(dateString.substring(3,5),10) ;
            var date = new Date(yyyy, mm-1, dd) ;
            theElement.value = monthDayFormat(date.getDate())+"."+monthDayFormat(date.getMonth()+1)+"."+ date.getYear()

            if (thePlusDate!=null && thePlusDate>0) {
                date.setDate(dd+thePlusDate) ;
            }


            if (thePlusMonth!=null && thePlusMonth>0) {
                date.setMonth(mm + thePlusMonth) ;
            }

            if (thePlusYear!=null && thePlusYear>0) {
                    date.setYear(yyyy + thePlusYear) ;
            }
                theElementLinker.value = monthDayFormat(date.getDate())+"."+monthDayFormat(date.getMonth()+1)+"."+ date.getYear() ;
//            } else {
//
//            }
        } catch(e) {

        }
    }



}
dateutil.YearLinkAction = function(aElement, aLinkedElement) {
    // конструктор
    try
    {
        aElement.attachEvent('onblur',onLinker);
    } catch (e)
    {
        try { aElement.addEventListener("blur",onLinker,false); } catch (e) {}
    }
    var theElement  = aElement;
    var theLastText = theElement.value;

    // методы
    function onLinker(aEvent) {
        try {
            if(aLinkedElement.value=='') {

                var dateString = parseDate(theElement.value);
                var yyyy = parseInt(dateString.substring(6,dateString.length),10) ;
                yyyy+=1 ;

                aLinkedElement.value = dateString.substring(0,6)+yyyy ;
            }
        } catch(e) {

        }
    }

}
////////////////////////////////////////////////////////////////////////////
//                         PRIVATE FUNCTION                               //
////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////
//                  ADDITION PRIVATE FUNCTION                             //
////////////////////////////////////////////////////////////////////////////

// проверка корректности введенной даты
function parseDate(inputStr) {
    while (inputStr.indexOf("-") != -1)
    {
        inputStr = replaceString(inputStr,"-","/") ;
    }
    while (inputStr.indexOf(",") != -1)
    {
        inputStr = replaceString(inputStr,",","/") ;
    }
    while (inputStr.indexOf(".") != -1)
    {
        inputStr = replaceString(inputStr,".","/") ;
    }
    var delim1 = inputStr.indexOf("/") ;
    var delim2 = inputStr.lastIndexOf("/") ;
    if (delim1 != -1 && delim1 == delim2)
    {
        throw errorutil.SetErrorObj("Форма ввода даты: ДД.ММ.ГГГГ. Например: 31.12.2004") ;
        //throw setErrorObj("Форма ввода даты: ddmmyyyy, dd/mm/yyyy, or dd-mm-yyyy,  dd.mm.yyyy.") ;
    }
    if (delim1 != -1)
    {
        var dd = parseInt(inputStr.substring(0,delim1),10) ;
        var mm = parseInt(inputStr.substring(delim1 + 1,delim2),10) ;
        var yyyy = parseInt(inputStr.substring(delim2 + 1, inputStr.length),10) ;
    } else
    {
        var dd = parseInt(inputStr.substring(0,2),10) ;
        var mm = parseInt(inputStr.substring(2,4),10) ;
        var yyyy = parseInt(inputStr.substring(4,inputStr.length),10) ;
    }
    if (isNaN(mm) || isNaN(dd) || isNaN(yyyy))
    {
        throw errorutil.SetErrorObj('Неправильно введена дата') ;
    }
    if (mm < 1 || mm > 12)
    {
        throw errorutil.SetErrorObj('Неправильно введен месяц') ;
    }
    if (dd < 1 || dd > 31)
    {
        throw errorutil.SetErrorObj('Неправильно введен день') ;
    }
    if (yyyy < 100)
    {
        if (yyyy >= 15) {
            yyyy += 1900;
        } else {
            yyyy += 2000;
        }
    }
    if (yyyy > 10000 || yyyy < 1000)
    {
        throw errorutil.SetErrorObj('Неправильно введен год') ;
    }
    return monthDayFormat(dd) + "." + monthDayFormat(mm) + "." + yyyy;
}

function onDateFld(aElementSt, aElementEnd)
{
    if (isDate(aElementSt))
    {
        var inputStr = aElementSt.value ;
        var delimfirst=inputStr.indexOf(".")
        var delimlast=inputStr.lastIndexOf(".");
        var dd = parseInt(inputStr.substring(0,delimfirst),10) ;
        var mm = parseInt(inputStr.substring(delimfirst + 1,delimlast),10) ;
        var yyyy=parseInt(inputStr.substring(delimlast + 1, inputStr.length),10) ;
        aElementEnd.value = dd + "." + mm + "." + (yyyy+1) ;
    }
}

// Заменяет символ aSearch в строке aStr на символ aReplaceStr
function replaceString(aStr,aSearchStr,aReplaceStr)
{
        var front = getFront(aStr,aSearchStr);
        var end = getEnd(aStr,aSearchStr);
        if (front != null && end != null)
        {
                return front + aReplaceStr + end;
        }
        return null;
}

function getFront(aStr,aSearchStr)
{
        var foundOffset = aStr.indexOf(aSearchStr);
        if (foundOffset == -1)
        {
                return null;
        }
        return aStr.substring(0,foundOffset);
}

function getEnd(aStr,aSearchStr)
{
        var foundOffset = aStr.indexOf(aSearchStr);
        if (foundOffset == -1)
        {
                return null;
        }
        return aStr.substring(foundOffset+aSearchStr.length,aStr.length);
}

function monthDayFormat(val)
{
	if (isNaN(val) || val == 0)
    {
		return "01";
	}
    else if (val < 10)
    {
		return "0" + val;
	}
	return "" + val;
}

/*
 * Ввод времени в формате 12.46
 *
 * new timeutil.TimeField(element) ;
 */
var timeutil =
{
    Version: '1.0'
}

timeutil.TimeField = function(aElement) {

    aElement.onblur = check ;
    var theElement  = aElement;
    eventutil.addEventListener(aElement, "dblclick", function() {if(self.gfPop1){gfPop1.fPopCalendar($(aElement.id));}}) ;
	//var calA = document.createElement("SPAN") ;
	//calA.innerHTML="<a href=\"javascript:void(0)\" onclick=\"if(self.gfPop1){gfPop1.fPopCalendar($('"+aElement.id+"'));}return false;\">...</a>" ;
    //	calA.id = 'spanA'+aElement.id;
    	
    //aElement.parentNode.appendChild(calA) ;
    var theFieldError = null ;

    function liveCheck(aEvent) {
        var keyCode = aEvent.keyCode ;
        if(keyCode == eventutil.VK_BACKSPACE) {

        } else {
            var size = theElement.value.length ;
            if(size==2) {
                theElement.value = theElement.value + ":" ;
            } else if(size>5) {
                theElement.value = theElement.value.substring(0,5) ;
            }
        }
    }

    eventutil.addEventListener(aElement, "keydown", liveCheck) ;
    eventutil.addEventListener(aElement, "keyup", liveCheck) ;

    function check(aEvent)  {

            theFieldError = errorutil.HideError(theElement) ;
            if(theElement.value=="") {
                return ;
            }
        
            var ar = theElement.value.split(":") ;
            if(ar.length<2) {
                errorutil.ShowFieldError(theElement, "Неправильно введено время") ;
            } else {
                var hour = 0 ;
                var minute = 0 ;
                try {
                    hour = parseInt(ar[0],10) ;

                    if(hour<0 || hour>23) {
                        errorutil.ShowFieldError(theElement, "Неправильно введены часы") ;
                    }
                    try {
                        minute = parseInt(ar[1],10) ;
                        if(minute<0 || minute>59) {
                            errorutil.ShowFieldError(theElement, "Неправильно введены минуты") ;
                        } else {
                            theElement.value = format(hour) +":"+format(minute) ;
                        }
                    } catch (e) {
                        errorutil.ShowFieldError(theElement, "Неправильно введены минуты") ;
                    }
                } catch (e) {
                    errorutil.ShowFieldError(theElement, "Неправильно введены часы") ;
                }
            }
    }

    function format(aNumber) {

        var str = (!isNaN(aNumber)?aNumber:"00")+"" ;
        for(var i=0; str.length<2;i++) {
            str = "0"+str ;
        }
        return str ;
    }

}
function onKeyPress(aEvent) {
    var evt = (aEvent) ? aEvent : window.event
    var charCode = (evt.which) ? evt.which : evt.keyCode
    if(evt.ctrlKey && (charCode==13|| charCode==10)) { // CTRL+ENTER
        // 10 IE or 13 FF
        var button = $('defaultSaveButton') ;
        if(button) {
            button.click() ;
        }
    } else if(charCode==27 || ( (charCode==26 || charCode==122) && evt.ctrlKey)) { // ESC = 27
        // 26 IE or 122 FireFox
        var button = $('defaultCancelButton') ;
        if(button) {
            button.click() ;
        }
    }
}
document.onkeypress = onKeyPress ;

var theTabs = new Array();
var theLastSelectedTabId = null ;


function getElementsByClassName(classname){
        var rl = new Array();
        var re = new RegExp('(^| )'+classname+'( |$)');
        var ael = document.getElementsByTagName('*');
        var op = (navigator.userAgent.indexOf("Opera") != -1) ? true : false;
        if (document.all && !op) ael = document.all;
        for(i=0, j=0 ; i<ael.length ; i++) {
                if(re.test(ael[i].className)) {
                        rl[j]=ael[i];
                        j++;
                }
        }
        return rl;
}

function showTab3(aTabId) {
    Form.enable(document.forms[0]) ;
    Element.removeClassName($('tabbedPaneContent'), "preview") ;
   //$('tabbedPaneContent').className = 'form' ; //setAttribute('class', 'form') ;

   var elements = getElementsByClassName('tabPane');
   var maxWidth = 100 ;
   for (var i = 0; i < elements.length; i++) {
        $(elements[i].id).style.visibility='hidden' ;
        $(elements[i].id).style.position = 'absolute' ;
        if(maxWidth < elements[i].clientWidth) {
           maxWidth = elements[i].clientWidth ;
        }
        if(elements[i].firstChild.className=='previewHeader') {
            //alert(1) ;
            elements[i].removeChild(elements[i].firstChild) ;
        }
        Element.removeClassName($(elements[i].id+'Link'), "selected") ;
   }

   Element.addClassName($(aTabId+'Link'), "selected") ;
   $(aTabId).style.visibility = "visible" ;
//   $('tabbedPane').style.width = (maxWidth + 40) +"px" ;// $(aTabId).style.width +"px" ;
//   $('tabbedPaneFooter').style.width = (maxWidth + 40) +"px" ;// $(aTabId).style.width +"px" ;
   $('tabbedPaneContent').style.height = ($(aTabId).clientHeight + 20) + 'px' ;
   $('tabbedPaneFooter').style.visibility = "visible" ;
   $('tabbedPaneHeader').style.visibility = 'visible' ;
}

function showTab(aTabName) {
    // скрываем старую панель
    if(theLastSelectedTabId!=null) {
        theTabs[theLastSelectedTabId].style.visibility='hidden' ;
        theTabs[theLastSelectedTabId].style.display='none' ;
        // и снимаем выделение с вкладки
        Element.removeClassName(theLastSelectedTabId+'Link', "selected") ;
    }
    // показываем выбранную панель
    theTabs[aTabName].style.visibility='visible' ;
    theTabs[aTabName].style.display='block' ;
    theLastSelectedTabId = aTabName ;
    // и выделяем вкладку
    Element.addClassName(theLastSelectedTabId+'Link', "selected") ;
}

function showPreview() {
   $('tabbedPaneHeader').style.visibility = 'hidden' ;
   Element.addClassName($('tabbedPaneContent'), "preview") ;
    //.setAttribute("preview") ;
   Form.disable(document.forms[0]) ;
   var elements = getElementsByClassName('tabPane');

   for (var i = 0; i < elements.length; i++) {
     var div = document.createElement("div") ;
     Element.addClassName(div, "previewHeader") ;
     var h2 = document.createElement("h2") ;
     h2.appendChild(document.createTextNode(elements[i].title)) ;

     var a = document.createElement("a") ;
     a.setAttribute("href", "javascript:showTab('"+elements[i].id+"')") ;
     a.appendChild(document.createTextNode("[Изменить]")) ;


     div.appendChild(h2) ;
     div.appendChild(a) ;
     elements[i].appendChild(div) ;

     elements[i].insertBefore(div, elements[i].firstChild) ;
     $('tabbedPaneHeader').style.visibility = 'hidden' ;

   }
}

function tabbedPaneInit() {
	eventutil.addObserveListener(window, 'load', _tabbedPaneInit) ;
}

function onKey(aEvent) {
    var keyCode = aEvent.keyCode ;
    //alert(keyCode) ;
    if(keyCode==9) {
        showTab('tabMain') ;
        return false ;
    }
    return true ;
}

function _tabbedPaneInit() {
   var ul =  document.createElement("ul");
   var elements = getElementsByClassName('tabPane');
   var isFirstAlreadyShow = true ;
   var firstTabId = null ;
   for (var i = 0; i < elements.length; i++) {
        if(i==0) firstTabId = elements[i].id ;

        var li = document.createElement("li") ;
        var a  = document.createElement("a") ;
        a.appendChild(document.createTextNode(elements[i].title)) ;
        // elements[i].title = "" ;
        a.setAttribute("href", "javascript:showTab('"+elements[i].id+"')") ;
        a.setAttribute("id", elements[i].id+'Link') ;
        li.appendChild(a) ;
        ul.appendChild(li) ;

        theTabs[elements[i].id] = elements[i] ;

        //if(isFirstAlreadyShow) {
        //    showTab(elements[i].id) ;
        //    isFirstAlreadyShow = false ;
        //}
   }

   $("tabbedPaneHeader").innerHTML = ""  ;
   $("tabbedPaneHeader").appendChild(ul) ;
   $("tabbedPaneHeader").appendChild(document.createElement("hr")) ;
   $('tabbedPaneFooter').style.visibility = "visible" ;
   // showPreview() ;


   showTab(firstTabId) ;
	$(theDefaultFieldName).focus() ;
	$(theDefaultFieldName).select() ;
   setFocusOnField(theDefaultFieldName) ;
}
var theTimeout = null ;

function error(aHtml) {
	try {
		console.error("AutocompleteError!") ;
	} catch (e) {
	}
    //var w = window.open(""
    //        , ""
    //        , "height=500,width=600,scrollbars=yes") ;
    //w.document.write(aHtml);
}

var msh_autocomplete = {
    Version: '1.0'
}

var theMshaHttpRequest ;
var theIsSearching = false ;

// on !IE we only have to initialize it once
if (window.XMLHttpRequest) {
    theMshaHttpRequest = new XMLHttpRequest();
}

function mshaGetElementsByClassName(aElement, className) {
    var children = element.getElementsByTagName('*') ;
    var elements = new Array();

    for (var i = 0; i < children.length; i++) {
        var child = children[i];
        var classNames = child.className.split(' ');
        for (var j = 0; j < classNames.length; j++) {
            if (classNames[j] == className) {
                elements.push(child);
                break;
            }
        }
    }

    return elements;
}


function mshaDoRequestSync(aUrl, aQuery) {
    if (window.XMLHttpRequest) {
        theMshaHttpRequest = new XMLHttpRequest();
    } else if (window.ActiveXObject) { // branch for IE/Windows ActiveX version
        theMshaHttpRequest = new ActiveXObject("Microsoft.XMLHTTP");
    }
    theMshaHttpRequest.open("POST", aUrl, false);
    theMshaHttpRequest.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded; charset=UTF-8');
    theMshaHttpRequest.send(aQuery);
}


function mshaDoRequest(aUrl, aQuery, aCallback) {
    // old
//    try {
//        theMshaHttpRequest.abort() ;
//    } catch (e) {}
    if (theIsSearching) return;
    theIsSearching = true;
    // end old

    //    if(theMshaHttpRequest!=null && theMshaHttpRequest.readyState!=0) {
    //        theMshaHttpRequest.abort() ;
    //    }

    if (window.XMLHttpRequest) {
        theMshaHttpRequest = new XMLHttpRequest();
        //alert(window.XMLHttpRequest) ;
        // branch for IE/Windows ActiveX version
    } else if (window.ActiveXObject) {
        //alert("hello") ;
        theMshaHttpRequest = new ActiveXObject("Microsoft.XMLHTTP");
    }
    theMshaHttpRequest.onreadystatechange = aCallback;
    theMshaHttpRequest.open("POST", aUrl);
    theMshaHttpRequest.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded; charset=UTF-8');
    theMshaHttpRequest.send(aQuery);
}


function debug(aMessage) {
    $('debug').value = $('debug').value + "\n" + aMessage;
}

/*
 * Представление
 */
msh_autocomplete.View = function(aElement, aDiv) {

    var theElement = aElement ;
    var theDiv = aDiv ;
    var theLastSelectedIndex = 0 ;
    ///////////////////////////////////////////////////////
    // PUBLIC FUNCTIONS
    //
    this.setEditabled = function(aEditabled) {
        if(aEditabled) {
            Element.addClassName(theElement, "vocEditabled");
            if(theElement.title==null) {
                theElement.title="" ;
            }
            theElement.title = theElement.title + "  Добавить - [ALT+INSERT], изменить - [F2]" ;
        }
    }

    /*
    *  Создание падающего списка
    */
    this.showBox = function(aXml) {
        var div = document.createElement("div") ;
        div.className = "autocomplete";
        //div.setAttribute("class", "autocomplete") ;
        var ul = document.createElement("ul") ;
        var rows = aXml.getElementsByTagName("row") ;
        for (var i = 0; i < rows.length; i++) {
            var li = createLineElement(rows[i]) ;
            ul.appendChild(li);
        }
        div.appendChild(ul);
        theDiv.innerHTML = "";
        theDiv.appendChild(div);
        setSelected(0);
        theDiv.style.visibility = 'visible';
        theDiv.style.display = 'block';
    }

    this.setSearching = function (aSearching) {
        if (aSearching) {
            Element.addClassName(theElement, "searching");

        } else {
            Element.removeClassName(theElement, "searching");
        }
    }

    this.hide = function() {
        theDiv.innerHTML = "";
        theDiv.style.visibility = 'hidden';
        theDiv.style.display = 'none';
    }

    this.getLastId = function() {
        var lis = theDiv.getElementsByTagName("li") ;
        var li = lis[lis.length - 1] ;
        return getValue(li, "span");
    }

    this.getFirstId = function() {
        var lis = theDiv.getElementsByTagName("li") ;
        var li = lis[0] ;
        return getValue(li, "span");
    }

    this.selectNext = function() {
        return setSelected(theLastSelectedIndex + 1);
    }

    this.selectPrevious = function() {
        return setSelected(theLastSelectedIndex - 1);
    }

    this.getSelectedName = function() {
        return getSelectedBySpanClass('name');
    }

    this.getSelectedId = function() {
        return getSelectedBySpanClass('id');
    }

    function getSelectedBySpanClass(aSpanClass) {
        var lis = theDiv.getElementsByTagName("li") ;
        for (var i = 0; i < lis.length; i++) {
            if (lis[i].className == 'selected') {
                return getLiSpan(lis[i], aSpanClass);
            }
        }
        return null;
    }

    /* Если было выбрано - true */
    function setSelected(aIndex) {
        theLastSelectedIndex = aIndex;
        var lis = theDiv.getElementsByTagName("li") ;
        var selected = false ;
        for (var i = 0; i < lis.length; i++) {
            if (i == aIndex) {
                lis[i].className = "selected";
                selected = true;
            } else {
                lis[i].className = "";
            }
        }
        return selected;
    }

    ///////////////////////////////////////////////////////
    // PRIVATE FUNCTIONS
    //
    function createLineElement(aXmlRow) {
        var name = getValue(aXmlRow, 'name') ;
        var id = getValue(aXmlRow, 'id') ;

        var li = document.createElement("li") ;

        var idSpan = document.createElement("span") ;
        idSpan.className = "id";
        idSpan.appendChild(document.createTextNode(id));
        li.appendChild(idSpan);

        li.appendChild(document.createTextNode("    "));

        var nameSpan = document.createElement("span") ;
        nameSpan.className = "name";
        nameSpan.appendChild(document.createTextNode(name != "" ? name : " --- "));
        if (name == "") {
            nameSpan.className = 'name null';
        }
        li.appendChild(nameSpan);

        return li;
    }

    function getId(aParent) {
        return getLiSpan(aParent, 'id');
    }

    function getName(aParent) {
        return getLiSpan(aParent, 'name');
    }

    function getLiSpan(aParent, aSpanClass) {
        var elements = aParent.getElementsByTagName("span") ;
        for (i = 0; i < elements.length; i++) {
            var elm = elements[i] ;
            if (elm.className == aSpanClass) {
                return elm.firstChild.nodeValue;
            }
        }
        return null;
    }

    /*
     * Возвращает значение
     */
    function getValue(aParent, aNodeName) {
        var elements = aParent.getElementsByTagName(aNodeName) ;
        if (elements.length > 0 && elements[0].firstChild) {
            return elements[0].firstChild.nodeValue;
        } else {
            return "";
        }
    }
}


/*
* Реакция на события
*/
msh_autocomplete.Actions = function(aElement, aIdField, aView, aUrl, theVocKey, theVocTitle, theParent) {

    aElement.onblur = select;
    aElement.onfocus = onFocus ;

    eventutil.addEventListener(aElement, eventutil.EVENT_KEY_DOWN, onKey);
    eventutil.addEventListener(aElement, eventutil.EVENT_KEY_UP, onKeyUp);
    eventutil.addEventListener(aElement, eventutil.EVENT_CLICK, onMouseClick);

    var theUrl = aUrl ;
    var theView = aView ;
    var theIsShow = false ;
    var theElement = aElement ;  // поле со значением
    var theLastText = theElement.value ;
    var theIdField = aIdField ; // поле с идентификатором
    var theVocValueEdit = null ;
    var theOnChangeCallback ;
    var theShowIdInName = false ;
    var theParentId = null ;
    var theCanShow = true ;

    function onFocus() {
        theCanShow = true ;
    }

    this.setVocKey = function(aVocKey) {
        theVocKey = aVocKey ;
        this.setVocId(theIdField.value) ;
    }

    this.setParentId = function(aParentId) {
        theParentId = aParentId ;
    }

    this.setUrl = function(aUrl) {
        theUrl = aUrl ;
        this.setVocId(theIdField.value) ;
    }

    this.setShowIdInName = function(aShow) {
        theShowIdInName = aShow ;
    }

    this.setParent = function(aParent) {
        theParent = aParent ;
    }

    this.addOnChangeCallback = function(aFunction) {
        theOnChangeCallback = aFunction ;
    }

    this.clearValuesWithNoEvents = function() {
        theElement.value = "" ;
        theIdField.value = "" ;
        if(theOnChangeCallback) theOnChangeCallback() ;
    }

    ///////////////////////////////////////////////////////
    // PRIVATE FUNCTIONS
    //
    function getVocValueEdit() {
        if(theVocValueEdit==null) {
            theVocValueEdit = new msh.widget.VocValueEdit(null
                    , theVocKey, theVocTitle, {valueChanged: onNewValue}) ;
        }
        return theVocValueEdit ;
    }
    this.setVocId = function(aId) {
        theView.setSearching(true);
        VocService.getNameById(theVocKey, aId, theParentId, {
            callback: function(aName) {
                theIdField.value = aId ;
                theElement.value = aName ;
                theView.setSearching(false);
            },
            errorHandler:function(message) {
                theElement.value = message ;
                theView.setSearching(false);
            },
            warningHandler:function(message) {
                theElement.value = message ;
                theView.setSearching(false);
            }
        } ) ;


//        theIdField.value = aId ;
//        mshaDoRequestSync(theUrl, 'id=' + aId);
//        var aResponse = theMshaHttpRequest;
//        if (theMshaHttpRequest.status == 200) {
//            var names = aResponse.responseXML.getElementsByTagName("name") ;
//            if(names && names.length>0 && names[0].firstChild) {
//
//                theElement.value = names[0].firstChild.nodeValue ;
//            }
//        } else {
//            alert(aResponse.status + " " + aResponse.statusText);
//            error(aResponse.responseText);
//            throw new Exception(aResponse.responseText) ;
//        }
//        theView.setSearching(false);
    }

    function onVocIdResponse() {
        aResponse = theMshaHttpRequest;

        if (theMshaHttpRequest.readyState == 4) {

            if (theMshaHttpRequest.status == 200) {
                alert(aResponse.responseText) ;
            } else {
                alert(aResponse.status + " " + aResponse.statusText);
                error(aResponse.responseText);
            }
        } else {

        }
    }

    function onNewValue(aId, aName) {
        theElement.value = aName ;
        theIdField.value = aId ;
        //theLastText = theElement.value;
        theElement.focus() ;
        //theElement.select() ;
        findFromEnteredId() ;
        //findNext() ;
        //findFromEnteredId() ;
        //setBoxShowed(true);
    }

    function selectEmpty() {
        var canSendChangeEvent = false ;
        if (isBoxShowed()) {
            canSendChangeEvent = theIdField.value!="" ;
            theElement.value = "";
            theIdField.value = "";
            theLastText = "";
        }
        setBoxShowed(false);
        theView.hide();
        if(canSendChangeEvent && theOnChangeCallback) theOnChangeCallback() ;
    }

    function select() {
        theCanShow = false ;
        var canSendChangeEvent = false ;
        if (isBoxShowed()) {
            var id = theView.getSelectedId() ;
            var name = theView.getSelectedName() ;
            if (name == null) name = "";
            canSendChangeEvent = theIdField.value!=id ;
            if(theShowIdInName) {
                if(id!=null && id!="") {
                    theElement.value = "("+id+") "+name;
                } else {
                    theElement.value = name ;
                }
            } else {
                theElement.value = name;
            }
            theIdField.value = id;
            theLastText = theElement.value;

        }
        setBoxShowed(false);
        theView.hide();
        if(canSendChangeEvent && theOnChangeCallback) theOnChangeCallback() ;
    }



    function findParentId(aAutocomplete) {
        //alert("auto="+aAutocomplete) ;
        if(aAutocomplete==null  || aAutocomplete=="undefined") {
            return null ;
        } else {
            if(aAutocomplete.getVocId()==null || aAutocomplete.getVocId()=="" || aAutocomplete.getVocId()=="undefined") {
                return findParentId(aAutocomplete.getParent()) ;
            } else {
                //alert(aAutocomplete.getVocId()) ;
                return aAutocomplete.getVocId() ;
            }
        }
    }

    function onMouseClick(aEvent) {
        theCanShow = true ;
        findFromEnteredId();
        theElement.select() ;
    }

    function onKeyUp(aEvent) {
        theCanShow = true ;
        //alert("onKeyUp"+aEvent) ;
        var keyCode = aEvent.keyCode ;
        if (13 == keyCode || 9 == keyCode) { // ENTER
            select();
        } else {
            if (theLastText != theElement.value) {
                theLastText = theElement.value;
                findQuery();
            }
        }
    }

    /*
    *  Начать поиск
    */
    function onKey(aEvent) {
        theCanShow = true ;
        //alert("onKeyDown"+aEvent) ;
        var keyCode = aEvent.keyCode ;
        if (keyCode == eventutil.VK_ESCAPE || keyCode == eventutil.VK_DEL) { // пропускаем ESCAPE
            return selectEmpty();
        } else if(aEvent.ctrlKey || aEvent.shiftKey) {
            return false ;
        } else if(aEvent.altKey && keyCode==eventutil.VK_INSERT) {
            //alert("finded: "+findParentId(theParent!=null ? theParent : null )) ;
            getVocValueEdit().insertNewValue(findParentId(theParent!=null ? theParent : null )) ;
            return true ;
        } else {
            if (!isBoxShowed() && keyCode==eventutil.VK_PAGE_DOWN) { // если нет на экране
//                if (13 != keyCode && 9 != keyCode) { // ENTER
                    findFromEnteredId();
//                }
            } else {
//                alert(keyCode) ;
                switch(keyCode) {
                    case eventutil.VK_PAGE_DOWN:
                        findNext() ;
                        break;
                    case eventutil.VK_PAGE_UP:
                        findPrevious() ;
                        break ;
                    case eventutil.VK_DOWN:
                        if (! theView.selectNext()) {
                            findNext();
                        }
                        break ;
                    case eventutil.VK_UP:
                        if (! theView.selectPrevious()) {
                            findPrevious();
                        }
                        break ;
                    case eventutil.VK_ENTER:
                    case eventutil.VK_TAB:
                        select();
                        break ;
                    case eventutil.VK_HOME:
                        mshaDoRequest(theUrl, "", onResponse);
                        break ;
                }
//                if(eventutil.VK_PAGE_DOWN==keyCode) {
//                    findNext() ;
//                } if (40 == keyCode) { // KEY_DOWN
//                    if (! theView.selectNext()) {
//                        findNext();
//                    }
//                } else if (38 == keyCode) { // KEY_UP
//                    if (! theView.selectPrevious()) {
//                        findPrevious();
//                    }
//                } else if (13 == keyCode || 9 == keyCode) { // ENTER
//                    select();
//                } else {
//                    //alert(keyCode) ;
//                }
            }
        }
    }

    function findNextFromFirst() {
        var query = 'id='+createParentQuery() ;
        mshaDoRequest(theUrl, query, onResponse);
    }

    function findNext() {
//        alert(theParent) ;
        var query = 'id=' + theView.getLastId()+createParentQuery() ;
        mshaDoRequest(theUrl, query, onResponse);
    }

    function findPrevious() {
        mshaDoRequest(theUrl, 'direction=backward&id=' + theView.getFirstId(), onResponse);
    }

    function __findQuery() {
        if (theTimeout) {
            window.clearTimeout(theTimeout);
        }
        theTimeout = window.setTimeout(_findQuery, 500);
    }

    function findQuery() {
        if(theElement.value=="") {
            findNextFromFirst() ;
        } else {
            theView.setSearching(true);
            mshaDoRequest(theUrl, 'query=' + theElement.value+createParentQuery(), onResponse);
        }
    }

    function createParentQuery() {
        var query = "" ;
        if(theParent!=null) {
            var parentId = theParent.getVocIdForParent() ;
            if(parentId!=null) {
                query = "&parent="+parentId ;
            }
        }
        if(query=="") {
            if(theParentId!=null) {
                query = "&parent="+theParentId ;
            }
        }
        return query ;
    }

    function findFromEnteredId() {
        mshaDoRequest(theUrl, 'id=' + theIdField.value+createParentQuery(), onResponse);
    }

   /*
    * Завершение поиска
    */
    function onResponse() {
        aResponse = theMshaHttpRequest;
        if (theMshaHttpRequest.readyState == 4) {
            //alert(theMshaHttpRequest.status) ;

            theIsSearching = false;
            if (theMshaHttpRequest.status == 200) {
                if(theCanShow) {
                    theView.showBox(aResponse.responseXML);
    //                alert(aResponse.responseXML) ;
                    //alert(aResponse.responseXML) ;
                    setBoxShowed(true);
                }
                theView.setSearching(false);
            } else {
                alert(aResponse.status + " " + aResponse.statusText);
                error(aResponse.responseText);
            }
        } else {

        }
    }

    function isBoxShowed() {
        return theIsShow;
    }

    function setBoxShowed(aShowed) {
        theIsShow = aShowed;
    }


}

msh_autocomplete.Autocomplete = function() {
    var theNameField ;
    var theIdField ;
    var theDiv ;
    var theUrl ;
    var theAction = null ;
    var theVocKey ;
    var theVocTitle ;
    var theParent ;
    var theOnChangeCallback ;
    var theThis = this ;


    this.getParent = function() {
        return theParent ;
    }

    this.setVocTitle = function(aVocTitle) {
        theVocTitle = aVocTitle ;
    }

    this.setVocKey = function(aVocKey) {
        theVocKey = aVocKey ;
        if(theAction!=null) {
            theAction.setVocKey(aVocKey) ;
        }
    }

    this.setNameFieldId = function(aNameFieldId) {
        theNameField = $(aNameFieldId);
    }
    this.setIdFieldId = function (aIdFieldId) {
        theIdField = $(aIdFieldId);
    }
    this.setDivId = function (aDivId) {
        theDiv = $(aDivId);
    }

    this.setUrl = function (aUrl) {
        theUrl = aUrl;
        if(theAction!=null) {
            theAction.setUrl(aUrl) ;
        }
    }

    this.setParentId = function(aParentId) {
        theAction.setParentId(aParentId) ;
    }

    this.setParent = function(aParent) {
        theParent = aParent ;
        theAction.setParent(aParent) ;
        theParent.addOnChangeCallback(parentOnChange) ;
    }

    function parentOnChange() {
        //theAction.setVocId("") ;
        theAction.clearValuesWithNoEvents() ; //alert(theThis.getVocId())

    }

    this.addOnChangeCallback = function(aFunction) {
        theAction.addOnChangeCallback(aFunction) ;
        //theOnChangeCallback = aFunction ;
    }

    this.build = function () {

        var view = new msh.widget.AutocompleteTableView(theNameField, theDiv) ;//new msh_autocomplete.View(theNameField, theDiv) ;
        theAction = new msh_autocomplete.Actions(theNameField, theIdField, view, theUrl, theVocKey, theVocTitle, theParent) ;
        try {
            theNameField.setAttribute("autocomplete", "off");
        } catch (e) {
        }
        // For minimize traffic check Editabled before insert or edit value
        //try {
        //    VocEditService.isVocEditabled(theVocKey, {
        //       callback: function(aEditabled) {
        //            if(aEditabled) view.setEditabled(true) ;
        //        }
        //    } ) ;
        //} catch (e) {
        //}
    }

    /* Получение фокуса*/
    this.requestFocus = function() {
        theNameField.focus();
    }

    this.getVocIdForParent = function() {
        var ret = null ;
        var id = theIdField.value ;
        if(id==null || id=="") {
            if(theParent!=null) {
                ret = theParent.getVocIdForParent() ;
            }
        } else {
            ret = id ;
        }
        return ret ;
    }

    /**
    * Получение идентификатора из справочника
    */
    this.getVocId = function() {
        return theIdField.value ;
    }

    /**
    * Названия из справочника
    */
    this.getVocName = function() {
        return theNameField.value ;
    }

    this.setVocId = function(aId) {
        theAction.setVocId(aId) ;
    }

    this.setShowIdInName = function(aShow) {
        theAction.setShowIdInName(aShow) ;
    }
	
}

function showAutocompleteWindow(aIdField, aNameField, aSelectedId, aVocName) {
    //    window.open("autocompleteWindow.do?idField="+aIdField+"&nameField="+aNameField
    //                +"&selectedId="+aSelectedId
    //                +"&vocName="+aVocName
    //            ,"Выбор из справочника"
    //            , "height=500,width=400,scrollbars=yes");
    window.open("autocompleteWindow.do?idField=" + aIdField + "&nameField=" + aNameField
            + "&selectedId=" + aSelectedId
            + "&vocName=" + aVocName
            , ""
            , "height=500,width=400,scrollbars=yes");
}

function showAutocomplete(aNameField, aIdField, aUrl) {
    alert(aNameField);
}
var ecom_tree_autocomplete = {
    Version: '0.0'
}

/*
* Реакция на события
*/
ecom_tree_autocomplete.Actions = function(aElement, aIdField, aView, aUrl, theVocKey, theVocTitle, theParent) {

    aElement.onblur = select;
    aElement.onfocus = onFocus ;
    
    eventutil.addEventListener(aElement, eventutil.EVENT_KEY_DOWN, onKey);
    //eventutil.addEventListener(aElement, eventutil.EVENT_KEY_UP, onKeyUp);
    eventutil.addEventListener(aElement, eventutil.EVENT_CLICK, onMouseClick);

    var theUrl = aUrl ;
    var theView = aView ;
    var theIsShow = false ;
    var theElement = aElement ;  // поле со значением
    var theLastText = theElement.value ;
    var theIdField = aIdField ; // поле с идентификатором
    var theVocValueEdit = null ;
    var theOnChangeCallback ;
    var theShowIdInName = false ;
    var theParentId = null ;
    var theCanShow = true ;

    function onFocus() {
        theCanShow = true ;
    }

    this.setVocKey = function(aVocKey) {
        theVocKey = aVocKey ;
        this.setVocId(theIdField.value) ;
    }

    this.setParentId = function(aParentId) {
        theParentId = aParentId ;
    }

    this.setUrl = function(aUrl) {
        theUrl = aUrl ;
        this.setVocId(theIdField.value) ;
    }

    this.setShowIdInName = function(aShow) {
        theShowIdInName = aShow ;
    }

    this.setParent = function(aParent) {
        theParent = aParent ;
    }

    this.addOnChangeCallback = function(aFunction) {
        theOnChangeCallback = aFunction ;
    }

    this.clearValuesWithNoEvents = function() {
        theElement.value = "" ;
        theIdField.value = "" ;
        if(theOnChangeCallback) theOnChangeCallback() ;
    }

    ///////////////////////////////////////////////////////
    // PRIVATE FUNCTIONS
    //
    function getVocValueEdit() {
        if(theVocValueEdit==null) {
            theVocValueEdit = new msh.widget.VocValueEdit(null
                    , theVocKey, theVocTitle, {valueChanged: onNewValue}) ;
        }
        return theVocValueEdit ;
    }
    this.setVocId = function(aId) {
        theView.setSearching(true);
        VocService.getNameById(theVocKey, aId, theParentId, {
            callback: function(aName) {
                theIdField.value = aId ;
                theElement.value = aName ;
                theView.setSearching(false);
            },
            errorHandler:function(message) {
                theElement.value = message ;
                theView.setSearching(false);
            },
            warningHandler:function(message) {
                theElement.value = message ;
                theView.setSearching(false);
            }
        } ) ;


//        theIdField.value = aId ;
//        mshaDoRequestSync(theUrl, 'id=' + aId);
//        var aResponse = theMshaHttpRequest;
//        if (theMshaHttpRequest.status == 200) {
//            var names = aResponse.responseXML.getElementsByTagName("name") ;
//            if(names && names.length>0 && names[0].firstChild) {
//
//                theElement.value = names[0].firstChild.nodeValue ;
//            }
//        } else {
//            alert(aResponse.status + " " + aResponse.statusText);
//            error(aResponse.responseText);
//            throw new Exception(aResponse.responseText) ;
//        }
//        theView.setSearching(false);
    }

    function onVocIdResponse() {
        aResponse = theMshaHttpRequest;

        if (theMshaHttpRequest.readyState == 4) {

            if (theMshaHttpRequest.status == 200) {
                alert(aResponse.responseText) ;
            } else {
                alert(aResponse.status + " " + aResponse.statusText);
                error(aResponse.responseText);
            }
        } else {

        }
    }

    function onNewValue(aId, aName) {
        theElement.value = aName ;
        theIdField.value = aId ;
        //theLastText = theElement.value;
        theElement.focus() ;
        //theElement.select() ;
        findFromEnteredId() ;
        //findNext() ;
        //findFromEnteredId() ;
        //setBoxShowed(true);
    }

    function selectEmpty() {
        var canSendChangeEvent = false ;
        if (isBoxShowed()) {
            canSendChangeEvent = theIdField.value!="" ;
            theElement.value = "";
            theIdField.value = "";
            theLastText = "";
        }
        setBoxShowed(false);
        theView.hide();
        if(canSendChangeEvent && theOnChangeCallback) theOnChangeCallback() ;
    }

    function select() {
    	document.title = "sel"+theView.getPage()+"_"+document.title ;
        if (theView.getPage()>0 ) {
        	if (isBoxShowed()) {
        	 ;
        	} else {
        	}
        	theCanShow = true ;
        	switch(theView.getPage()) {
        		case 1:
        			theView.setPage(0) ;
        			findPrevious() ;
        			break ;
        		case 2:
        			theView.setPage(0) ;
        			findNext() ;
        			break ;
        		
        	}
        	//theView.setSelected(0) ;
        	
        	return false ;
        } else {
	    	document.title = "select_"+document.title ;
	        theCanShow = false ;
	        var canSendChangeEvent = false ;
	        if (isBoxShowed()) {
	            var id = theView.getSelectedId() ;
	            var name = theView.getSelectedName() ;
	            if (name == null) name = "";
	            canSendChangeEvent = theIdField.value!=id ;
	            if(theShowIdInName) {
	                if(id!=null && id!="") {
	                    theElement.value = "("+id+") "+name;
	                } else {
	                    theElement.value = name ;
	                }
	            } else {
	                theElement.value = name;
	            }
	            theIdField.value = id;
	            theLastText = theElement.value;
	
	        }
	        setBoxShowed(false);
	        theView.hide();
	        if(canSendChangeEvent && theOnChangeCallback) theOnChangeCallback() ;
        }
    }



    function findParentId(aAutocomplete) {
        //alert("auto="+aAutocomplete) ;
        if(aAutocomplete==null  || aAutocomplete=="undefined") {
            return null ;
        } else {
            if(aAutocomplete.getVocId()==null || aAutocomplete.getVocId()=="" || aAutocomplete.getVocId()=="undefined") {
                return findParentId(aAutocomplete.getParent()) ;
            } else {
                //alert(aAutocomplete.getVocId()) ;
                return aAutocomplete.getVocId() ;
            }
        }
    }

    function onMouseClick(aEvent) {
    	theCanShow = true ;
    	
    	findFromEnteredId();
    	theElement.select() ;
    }
/*
    function onKeyUp(aEvent) {
        theCanShow = true ;
        //alert("onKeyUp"+aEvent) ;
        var keyCode = aEvent.keyCode ;
        if (13 == keyCode || 9 == keyCode) { // ENTER
            select();
        } else {
            if (theLastText != theElement.value) {
                theLastText = theElement.value;
                findQuery();
            }
        }
    }
*/
    /*
    *  Начать поиск
    */
    function onKey(aEvent) {
        theCanShow = true ;
        
        
        
        document.title = "key_"+document.title ;
        
        var keyCode = aEvent.keyCode ;
        if (keyCode == eventutil.VK_ESCAPE || keyCode == eventutil.VK_DEL) { // пропускаем ESCAPE
            return selectEmpty();
        } else if(aEvent.ctrlKey || aEvent.shiftKey) {
            return false ;
        } else if(aEvent.altKey && keyCode==eventutil.VK_INSERT) {
            //alert("finded: "+findParentId(theParent!=null ? theParent : null )) ;
            getVocValueEdit().insertNewValue(findParentId(theParent!=null ? theParent : null )) ;
            return true ;
        } else {
            if (!isBoxShowed() && keyCode==eventutil.VK_PAGE_DOWN) { // если нет на экране
//                if (13 != keyCode && 9 != keyCode) { // ENTER
                    findFromEnteredId();
//                }
            } else {
//                alert(keyCode) ;
                switch(keyCode) {
                    case eventutil.VK_PAGE_DOWN:
                        findNext() ;
                        break;
                    case eventutil.VK_PAGE_UP:
                        findPrevious() ;
                        break ;
                    case eventutil.VK_LEFT:
                    	alert("НАЗАД") ;
                    	break ;
                    case eventutil.VK_RIGHT:
                    	alert("ВПЕРЕД") ;
                    	break ;
                    case eventutil.VK_DOWN:
                        if (! theView.selectNext()) {
                            findNext();
                        }
                        break ;
                    case eventutil.VK_UP:
                        if (! theView.selectPrevious()) {
                            findPrevious();
                        }
                        break ;
                    case eventutil.VK_ENTER:
                    case eventutil.VK_TAB:
                        select();
                        break ;
                    case eventutil.VK_HOME:
                        mshaDoRequest(theUrl, "", onResponse);
                        break ;
                }
            }
        }
    }

    function findNextFromFirst() {
		document.title = "findNextFromFirst_"+document.title ;
        var query = 'id='+createParentQuery() ;
        mshaDoRequest(theUrl, query, onResponse);
    }

    function findNext() {
//        alert(theParent) ;
		document.title = "findNext_"+document.title ;
        var query = 'id=' + theView.getLastId()+createParentQuery() ;
        mshaDoRequest(theUrl, query, onResponse);
    }

    function findPrevious() {
		document.title = "findPrevious_"+document.title ;
        mshaDoRequest(theUrl, 'direction=backward&id=' + theView.getFirstId(), onResponse);
    }

    function __findQuery() {
        if (theTimeout) {
            window.clearTimeout(theTimeout);
        }
        theTimeout = window.setTimeout(_findQuery, 500);
    }

    function findQuery() {
        if(theElement.value=="") {
            findNextFromFirst() ;
        } else {
            theView.setSearching(true);
            mshaDoRequest(theUrl, 'query=' + theElement.value+createParentQuery(), onResponse);
        }
    }

    function createParentQuery() {
        var query = "" ;
        if(theParent!=null) {
            var parentId = theParent.getVocIdForParent() ;
            if(parentId!=null) {
                query = "&parent="+parentId ;
            }
        }
        if(query=="") {
            if(theParentId!=null) {
                query = "&parent="+theParentId ;
            }
        }
        return query ;
    }

    function findFromEnteredId() {
		document.title = "findFromEnteredId_"+document.title ;
        mshaDoRequest(theUrl, 'id=' + theIdField.value+createParentQuery(), onResponse);
    }

   /*
    * Завершение поиска
    */
    function onResponse() {
		document.title = "response_"+document.title ;
        aResponse = theMshaHttpRequest;
        if (theMshaHttpRequest.readyState == 4) {
            //alert(theMshaHttpRequest.status) ;

            theIsSearching = false;
            if (theMshaHttpRequest.status == 200) {
                if(theCanShow) {
                    theView.showBox(aResponse.responseXML);
    //                alert(aResponse.responseXML) ;
                    //alert(aResponse.responseXML) ;
                    setBoxShowed(true);
                }
                theView.setSearching(false);
            } else {
                alert(aResponse.status + " " + aResponse.statusText);
                error(aResponse.responseText);
            }
        } else {

        }
    }

    function isBoxShowed() {
		document.title = "isBoxShowed_"+document.title ;
        return theIsShow;
    }

    function setBoxShowed(aShowed) {
        theIsShow = aShowed;
    }


}

ecom_tree_autocomplete.Autocomplete = function() {
    var theNameField ;
    var theIdField ;
    var theDiv ;
    var theUrl ;
    var theAction = null ;
    var theVocKey ;
    var theVocTitle ;
    var theParent ;
    var theOnChangeCallback ;
    var theThis = this ;


    this.getParent = function() {
        return theParent ;
    }

    this.setVocTitle = function(aVocTitle) {
        theVocTitle = aVocTitle ;
    }

    this.setVocKey = function(aVocKey) {
        theVocKey = aVocKey ;
        if(theAction!=null) {
            theAction.setVocKey(aVocKey) ;
        }
    }

    this.setNameFieldId = function(aNameFieldId) {
        theNameField = $(aNameFieldId);
    }
    this.setIdFieldId = function (aIdFieldId) {
        theIdField = $(aIdFieldId);
    }
    this.setDivId = function (aDivId) {
        theDiv = $(aDivId);
    }

    this.setUrl = function (aUrl) {
        theUrl = aUrl;
        if(theAction!=null) {
            theAction.setUrl(aUrl) ;
        }
    }

    this.setParentId = function(aParentId) {
        theAction.setParentId(aParentId) ;
    }

    this.setParent = function(aParent) {
        theParent = aParent ;
        theAction.setParent(aParent) ;
        theParent.addOnChangeCallback(parentOnChange) ;
    }

    function parentOnChange() {
        //theAction.setVocId("") ;
        theAction.clearValuesWithNoEvents() ; //alert(theThis.getVocId())

    }

    this.addOnChangeCallback = function(aFunction) {
        theAction.addOnChangeCallback(aFunction) ;
        //theOnChangeCallback = aFunction ;
    }

    this.build = function () {
        var view = new msh.widget.TreeAutocompleteTableView(theNameField, theDiv) ;//new msh_autocomplete.View(theNameField, theDiv) ;
        theAction = new ecom_tree_autocomplete.Actions(theNameField, theIdField, view, theUrl, theVocKey, theVocTitle, theParent) ;
        try {
            theNameField.setAttribute("autocomplete", "off");
        } catch (e) {
        }
        // For minimize traffic check Editabled before insert or edit value
        //try {
        //    VocEditService.isVocEditabled(theVocKey, {
        //       callback: function(aEditabled) {
        //            if(aEditabled) view.setEditabled(true) ;
        //        }
        //    } ) ;
        //} catch (e) {
        //}
    }

    /* Получение фокуса*/
    this.requestFocus = function() {
    	alert("focus") ;
        theNameField.focus();
    }

    this.getVocIdForParent = function() {
        var ret = null ;
        var id = theIdField.value ;
        if(id==null || id=="") {
            if(theParent!=null) {
                ret = theParent.getVocIdForParent() ;
            }
        } else {
            ret = id ;
        }
        return ret ;
    }

    /**
    * Получение идентификатора из справочника
    */
    this.getVocId = function() {
        return theIdField.value ;
    }

    /**
    * Названия из справочника
    */
    this.getVocName = function() {
        return theNameField.value ;
    }

    this.setVocId = function(aId) {
        theAction.setVocId(aId) ;
    }

    this.setShowIdInName = function(aShow) {
        theAction.setShowIdInName(aShow) ;
    }
	
}

function showTreeAutocomplete(aNameField, aIdField, aUrl) {
    alert(aNameField);
}
/**
 * Редактирование/Добавление значения в справочник
 */
msh.widget.VocValueEdit = function(theActionUrl, theVocKey, theVocName, theCallbacks) {

    var theDialog = null ;
    var theIsCreate = false ;
    var theThis = this ;
    var theParentId = null ;


    function initDialog() {
        if (theDialog == null) {
            theDialog = new msh.widget.VocValueEditDialog(theVocKey + "Id", theVocName, theThis);
            theDialog.buildDialog();
        }
    }
    this.insertNewValue = function(aParentId) {
        theParentId = aParentId ;
        initDialog();
        theIsCreate = true;
        theDialog.showInsert();
    }

    this.changeValue = function(aId, aName) {
        initDialog();
        theIsCreate = false;
        theDialog.showEdit(aId, aName);
    }

    this.onSave = function(aIdValue, aNameValue) {
        VocEditService.createVocValue(theVocKey, aIdValue, aNameValue, theParentId, {
            callback: function(aId) {
                theDialog.hide() ;
                theCallbacks.valueChanged(aId, aNameValue) ;
            },
            errorHandler:function(message) {
                alert("Ошибка: " + message);
            },
            warningHandler:function(message) {
                alert("Предупреждение: " + message);
            }

        });
    }

}

msh.widget.VocValueEditDialog = function(theDialogId, theTitle, theController) {

    var theDialog ;
    var theRootPane ;
    var theIdField = null ;
    var theNameField = null ;
    var theSaveButton = null ;
    var theNameH3 = null ;

    this.hide = function() {
        theDialog.hide() ;
    }

    this.showInsert = function() {
        theDialog.show();
        theNameH3.innerHTML = "Создание нового значения" ;
        theNameField.focus();
        theIdField.value = "";
        theNameField.value = "";
        theSaveButton.value = "Создать новое значение";
    }

    this.showEdit = function(aId, aName) {
        theDialog.show();
        theNameH3.innerHTML = "Изменение" ;
        theIdField.value = aId;
        //theIdField.disabled = "true" ;
        theNameField.value = aName
        theNameField.focus();
        theSaveButton.value = "Сохранить изменения";
    }

    function onPressButton() {
        theController.onSave(theIdField.value, theNameField.value);
    }

    function hideDialog() {
        theDialog.hide() ;
    }
    this.buildDialog = function() {
        var div = document.createElement("div") ;
        div.id = theDialogId;
        div.className = "dialog";

        var h2 = document.createElement("h2") ;
        h2.appendChild(document.createTextNode(theTitle));

        var rootPane = document.createElement("div") ;
        rootPane.className = "rootPane";

        theNameH3 = document.createElement("h3") ;


        var form = document.createElement("form") ;
        var table = document.createElement("table") ;
        var tr = document.createElement("tr") ;
        var td = document.createElement("td") ;
        td.className = 'label';
        td.appendChild(document.createTextNode("Идентификатор"));
        tr.appendChild(td);
        td = document.createElement("td");
        var input = document.createElement("input") ;
        input.type = 'text';
        theIdField = input;
        td.appendChild(input);
        tr.appendChild(td);

        // table.appendChild(tr); раскоментировать для ввода значения

        tr = document.createElement("tr");
        td = document.createElement("td");
        td.className = 'label';
        td.appendChild(document.createTextNode("Значение:"));
        tr.appendChild(td);
        td = document.createElement("td");
        input = document.createElement("input");
        input.type = 'text';
        theNameField = input;
        td.appendChild(input);
        tr.appendChild(td);
        table.appendChild(tr);

        form.appendChild(table);

        theSaveButton = document.createElement("input");
        theSaveButton.type = 'button';
        theSaveButton.value = 'Сохранить';
        theSaveButton.onclick = onPressButton;

        var cancelButton = document.createElement("input");
        cancelButton.type = 'button';
        cancelButton.value = 'Отменить';
        cancelButton.onclick = hideDialog ;


        form.appendChild(theSaveButton);
        form.appendChild(document.createTextNode("   "));
        form.appendChild(cancelButton);


        div.appendChild(h2);
        div.appendChild(rootPane);

        rootPane.innerHTML = "";
        rootPane.appendChild(theNameH3);
        rootPane.appendChild(form);

        document.body.appendChild(div);
        theDialog = new msh.widget.Dialog(div);
        theRootPane = rootPane;

        h2.onclick = hideDialog;
    }
}



var theDefaultFieldName ;
var theDefaultEvt ; 
function adjustMessage(text) {
	var MessageObj = document.getElementById('divInstantMessage');
	var isThisMozilla = true ;
	if (isThisMozilla) {var event=theDefaultEvt;}
	var scroll = getScrollXY() ;

	//var rightedge = document.body.clientWidth-clX-scroll[0];
	//var bottomedge = document.body.clientHeight-event.clientY-scroll[1];

	MessageObj.innerHTML = text;
	//	+document.body.scrollTop+' left '
	//	+event.clientY+'--'+document.body.scrollLeft+' ';	
	//MessageObj.style.left = (event.clientX-(MessageObj.offsetWidth/2)) +'px' ;
	//MessageObj.style.top = (event.clientY+10)+'px';
	//if (rightedge < MessageObj.offsetWidth) {
	//	MessageObj.style.left = (scroll[0] + clX - MessageObj.offsetWidth) +'px' ;
		
	//} else {
	//	MessageObj.style.left = (scroll[0] + clX)+'px' ;}
	//if (bottomedge < MessageObj.offsetHeight) {	
	//	MessageObj.style.top = (scroll[1] -10 + event.clientY - MessageObj.offsetHeight)+'px' ;
	//} else {
		//MessageObj.style.top = (scroll[1]+10+event.clientY)+'px' ;
		MessageObj.style.top = (scroll[1]+50)+'px' ;
		MessageObj.style.left = '100px'
	//}
	MessageObj.style.visibility = "visible";
}
function getScrollXY() {
  var scrOfX = 0, scrOfY = 0;
  if( typeof( window.pageYOffset ) == 'number' ) {
    //Netscape compliant
    scrOfY = window.pageYOffset;
    scrOfX = window.pageXOffset;
  } else if( document.body && ( document.body.scrollLeft || document.body.scrollTop ) ) {
    //DOM compliant
    scrOfY = document.body.scrollTop;
    scrOfX = document.body.scrollLeft;
  } else if( document.documentElement && ( document.documentElement.scrollLeft || document.documentElement.scrollTop ) ) {
    //IE6 standards compliant mode
    scrOfY = document.documentElement.scrollTop;
    scrOfX = document.documentElement.scrollLeft;
  }
  return [ scrOfX, scrOfY ];
}
function getDefinition(term,evt){
	var MessageObj=document.getElementById('divInstantMessage');
	var param = term.split("?") ;
	//alert(param[1]) ;
	var query = param[1] ;
        mshaDoRequest(param[0], query, onResponse1);
    theDefaultEvt = evt ;
	
	MessageObj.innerHTML = "Загрузка..." ;
	return false;
}
function goToPage(aPage,aId) {
	var delim = aPage.indexOf('?')==-1 ? '?' : '&' ;
    var url = aPage+delim+'id='+aId+'&tmp='+Math.random() ;
    window.location = url ;
}
function onResponse1() {
	
    var aResponse = theMshaHttpRequest;
    if (theMshaHttpRequest.readyState == 4) {
        //alert(theMshaHttpRequest.status) ;
        var MessageObj = document.getElementById('divInstantMessage');
        theIsSearching = false;
        if (theMshaHttpRequest.status == 200) {
            
            //MessageObj.innerHTML = ;
            
            adjustMessage(aResponse.responseText);
        } else {
        	adjustMessage(aResponse.status + " " + aResponse.statusText+" "+aResponse.responseText);
        }
    } else {

    }
}

function hideMessage(){
	var MessageObj=document.getElementById('divInstantMessage');
	MessageObj.style.visibility="hidden";
	MessageObj.innerHTML = "" ;
}
function getCheckedRadio(aFrm,aFieldName) {
	var radioGrp = aFrm[aFieldName];
	
	if (radioGrp) {
		if (radioGrp.length) {
			for(i=0; i < radioGrp.length; i++){
			  if (radioGrp[i].checked == true){
			    return radioGrp[i].value;
			  }
			}
		} else {
			if (radioGrp.checked == true){
				return radioGrp.value;
			}
		}
	}
	return "" ;
}
function getCheckedCheckBox(aFrm,aFieldName,aRazd) {
	var checkBoxGrp = aFrm.elements[aFieldName];
	var checkValue = ""
		if (checkBoxGrp) {
			if (checkBoxGrp.length) {
				for(i=0; i < checkBoxGrp.length; i++){
					if (checkBoxGrp[i].checked == true){
						checkValue = checkValue+aRazd+checkBoxGrp[i].value;
					}
				}
			} else {
				if (checkBoxGrp.checked == true){
					checkValue = checkValue+aRazd+checkBoxGrp.value;
				}
			}
			
		} 
	if (checkValue!="") {
		checkValue=checkValue.substring(aRazd.length) ;
	}
	return checkValue ;
}
function setCheckedAllRadio(aFrm,aFieldName,aCheck) {
	var radioGrp = aFrm[aFieldName];
	if (radioGrp) {
		if (radioGrp.length) {
			radioGrp[0].checked = aCheck;
		} else {
			radioGrp.checked = aCheck;
		}
	}
}

function setCheckedAllCheckBox(aFrm,aFieldName,aCheck) {
	var checkBoxGrp = aFrm.elements[aFieldName];
	if (checkBoxGrp) {
		if (checkBoxGrp.length) {
			for(i=0; i < checkBoxGrp.length; i++){
				  checkBoxGrp[i].checked = aCheck;
				}
		} else {
			checkBoxGrp.checked = aCheck;
		}
	}
}
function setFocusOnField(aFieldName) {
	theDefaultFieldName = aFieldName ;
	eventutil.addObserveListener(window, 'load', _zetFocusOnField) ;
}

function _zetFocusOnField() {
	try {
	   $(theDefaultFieldName).focus() ;
	} catch (e) {}
	try {
	   $(theDefaultFieldName).select() ;
	} catch (e) {}

}
function getCurrentDate() {
	var dt = new Date() ;
	return format2day(dt.getDate())+"."+format2day(dt.getMonth()+1)+"."+dt.getFullYear() ;
}
function format2day(aCnt) {
	if (aCnt>9) {
		return aCnt ;
	} else {
		return "0"+aCnt ;
	}
}

// Один элемент
msh.widget.OneToManyAuto = function(theSerial, theChild, theTr, theTitle
        , theRemoveFunction, theAddFunction, theRecalcFunction
        , theVocName, theIsView, theParentId, theParentAutocomplete,theViewAction) {
	//alert("one="+theVocName+"#"+theParentId) ;
    var theActionLink = null ;
    var theTitleLabel = null ;
    var theIsRemoveAction = false ;
    var theInput = null ;
    var theHidden = null ;
    var theAutocomplete = null ;


    // идентфикикатор элемента
    this.getSerial = function() {
        return theSerial;
    }

    // создание
    function ce(aName) {
        return document.createElement(aName);
    }

    // добавление строки в таблицу
    this.add = function() {
        var tdLabel = ce("td") ;
        tdLabel.style.className = "label";
        var label = ce("label") ;
        theTitleLabel = label;

        var tdField = ce("td") ;
        var input = ce("input") ;
        if (theIsView) {
        	if (theViewAction!=null && theViewAction!=""&& theViewAction!="null") {
        		input = ce("a") ;
        		input.href=theViewAction+"?id="+(theChild.value ? theChild.value : "") ;
        		input.innerHTML = theChild.name ? theChild.name : "";
        	} else {
        		input = ce("input") ;
        		input.value = theChild.name ? theChild.name : "" ;
   		        input.className = "viewOnly maxHorizontalSize" ;
	            input.disabled = true ;
	            input.style.background = "none" ;
	            input.style.border = "none" ;
	            input.style.color = 'black' ;
	            input.style.className = "" ;
            }
        }else{
        	input = ce("input") ;
        	input.className = "autocomplete maxHorizontalSize" ;
        }
        tdField.appendChild(input);
        //input.style.width = "100%";

        theInput = input;
        theInput.id = "otma_input_"+theSerial ;
        //theInput.size = 50 ; // todo

        var div = ce("div") ;
        tdField.appendChild(div) ;

        var hidden = ce("hidden") ;
        hidden.id = "otma_hidden_"+theSerial ;
        theHidden = hidden ;



        var tdLink = ce("td") ;
        var a = ce("a") ;
        a.innerHTML = "Добавить";
        a.href = "javascript:void(0)";
        tdLink.appendChild(a);
        theActionLink = a;

        //tdLabel.appendChild(label);
        theTr.appendChild(tdLabel);
        theTr.appendChild(tdField);
        if(!theIsView) theTr.appendChild(tdLink);
        //label.innerHTML = theTitle;
        theActionLink.onclick = onClick;

        theHidden.value = "" ;
        theHidden.value = theChild.value ? theChild.value : "" ;
        if (theIsView) {
        	//theInput.className = 'viewOnly horizontalFill' ;
        	
        }else{
        	theInput.value = theChild.name ? theChild.name : "" ;
        }
        

        addAutocomlete(div) ;


        if(theIsView) {

        }
        eventutil.addEventListener(theInput, eventutil.EVENT_BLUR, theRecalcFunction);

    }

    function addAutocomlete(aDiv) {
    	if (!theIsView) {
	        theAutocomplete = new msh_autocomplete.Autocomplete() ;
	        theAutocomplete.setUrl("simpleVocAutocomplete/"+theVocName) ;
	        theAutocomplete.setIdFieldId(theHidden) ;
	        theAutocomplete.setNameFieldId(theInput) ;
	        theAutocomplete.setDivId(aDiv) ;
	        theAutocomplete.setVocKey(theVocName) ;
	        theAutocomplete.setVocTitle(theTitle) ;
	        theAutocomplete.build() ;
	        if (theParentId!=null && theParentId!=""  && theParentId!="null")  {
	        	//alert("parent="+theParentId);
	        	theAutocomplete.setParentId(theParentId) ;
	        	
	        }
	        if (theParentAutocomplete!=null && theParentAutocomplete!="" && theParentAutocomplete!="null") {
	        	theAutocomplete.setParent(theParentAutocomplete+"Autocomplete") ;
	        }
        }
        /*
        eventutil.addEventListener(theInput, "keydown", 
			  	function(aEvent) {
			  		if (aEvent.keyCode == 107) {
			  			onClick;
			  		}
			  		if (aEvent.keyCode == 109) {
			  			onClick;
			  		}
			            
				  	}) ; */
        
        //a.setVocId(theHidden.value) ;
    }
    // нажатие на ссылку
    function onClick() {
        if (theIsRemoveAction) {
            //theHidden.parentNode.removeChild(theHidden);
            theTr.parentNode.removeChild(theTr);
            theRemoveFunction(theSerial);
        } else {
            theAddFunction();
        }
    }

    // тип команды true - удалить, false - добавить
    this.setIsRemoveAction = function(aIsRemove) {
        theIsRemoveAction = aIsRemove;
        theActionLink.innerHTML = aIsRemove ? "Убрать" : "Добавить еще";
        theActionLink.title = aIsRemove ? "Убрать "+theTitle : "Добавить еще один "+theTitle ;
        theActionLink.className = "manyToManyActionLink" ;

    }
    // показывать метку
    this.setTitleVisibled = function(aVisibled) {
        theTitleLabel.innerHTML = aVisibled ? theTitle : "";
        //        alert(theTitleLabel.innerHTML +" "+aVisibled)
    }

    // фокус
    this.focus = function() {
		   theInput.focus() ;
		   theInput.select() ;
    }
    // Очистить данные
    this.clearData = function() {
        theInput.value="" ;
        theHidden.value="" ;
    }
    this.setValue = function(aId,aValue) {
        theInput.value=aValue ;
        theHidden.value=aId ;
    }
    // Присвоить Родителя Id
    this.setParentId = function(aParentId) {
    	theParentId = aParentId ;
        theAutocomplete.setParentId(theParentId) ;
    }

    this.getJson = function() {
        theChild["value"] = theHidden.value;
        return theChild ;
    }

}

// Несколько элементов Autocomplete
msh.widget.OneToManyAutocompletes = function(theInstallDiv, theForm, theFieldName, theTitle, theVocName, theIsView
	, theParentId, theParentAutocomplete, theViewAction) {

    var theTbody = null ;
    var theLegend = null ;
    var theAutos = new Array() ;
    var theLastSerial = 1 ;
	//alert("many="+theVocName+"#"+theParentId) ;

    // установка
    this.install = function() {
        // поиск полей в форме
//        var hiddens = Form.getInputs(theForm, "hidden", theFieldName) ;
        buildSurroundView();

        // через json
        var value = $(theFieldName).value ;
        //alert(value) ;
        if(value!=null && value!="null" && value!="") {
	        var json = eval('(' + $(theFieldName).value + ')') ;
	        //alert(theFieldName.value) ;
	        var childs = json.childs ;
	        for (var i = 0; i < childs.length; i++) {
	            var tr = ce("tr") ;
	            theTbody.appendChild(tr);
	            var one = new msh.widget.OneToManyAuto(getNextSerial(), childs[i], tr, theTitle
	                    , onRemove, onAdd,recalc
	                    , theVocName, theIsView,theParentId, theParentAutocomplete, theViewAction) ;
	            one.add();
	            theAutos.push(one);
	        }
	        if(childs.length==0) {
	            onAdd() ;
	        }
        } else {
            onAdd() ;
        }
        onUpdate();
    }
    this.setIds = function(aJson) {
    	//alert(aJson) ;
        if(aJson!=null && aJson!="null" && aJson!="") {
	        var json = eval('(' + aJson + ')') ;
	        //alert(theFieldName.value) ;
	        var childs = json.childs ;
	        var len = theAutos.length ;
	        for (var i = 0; i < childs.length; i++) {
	        	var child = childs[i] ;
	            if (i<len) {
	            	theAutos[i].setValue(child.value ? child.value : "",child.name ? child.name : "");
	            } else {
		            var tr = ce("tr") ;
		            theTbody.appendChild(tr);
		            var one = new msh.widget.OneToManyAuto(getNextSerial(), child, tr, theTitle
		                    , onRemove, onAdd,recalc
		                    , theVocName, theIsView,theParentId, theParentAutocomplete) ;
		            one.add();
		            theAutos.push(one);
	            }
	        }
        } 
        onUpdate();
    }
    
    this.setParentId = function(aParentId) {
    	//alert(aParentId) ;
    	theParentId=aParentId ;
        for (var i = 0; i < theAutos.length ; i++) {
        	//alert(theAutos[i]) ;
            theAutos[i].setParentId(theParentId);
        }
    }
    this.clearData = function() {
        for (var i = 0; i < theAutos.length ; i++) {
            theAutos[i].clearData() ;
        }
        
    }

    function getNextSerial() {
        return ++theLastSerial;
    }


    // при удалении строки
    function onRemove(aAutoId) {
        var ar = new Array() ;
        var remotedIndex = 0 ;

        for (var i = 0; i < theAutos.length; i++) {
            if (aAutoId != theAutos[i].getSerial()) {
                ar.push(theAutos[i]);
            } else {
                theAutos[i<theAutos.length-1 ? i+1 : 0].focus();
            }
        }
        theAutos = ar;
        onUpdate();
    }

    // при добавлении
    function onAdd() {
        //var hidden = ce("hidden") ;
        //hidden.name = theFieldName;
        //theForm.appendChild(hidden);
        var tr = ce("tr") ;
        theTbody.appendChild(tr);
        var child = new Object() ;
        child["id"] = "" ;
        child["value"] = "" ;

        var one = new msh.widget.OneToManyAuto(getNextSerial(), child, tr, theTitle
                , onRemove, onAdd, recalc
                , theVocName, theIsView, theParentId, theParentAutocomplete) ;
        one.add();
        one.focus();
        theAutos.push(one);
        onUpdate();
    }

    // обновить
    function onUpdate() {
        setTitleVisibled(theAutos.length != 1);
        for (var i = 0; i < theAutos.length - 1; i++) {
            theAutos[i].setIsRemoveAction(true);
        }
        theAutos[theAutos.length - 1].setIsRemoveAction(false);

        recalc() ;
    }

    function recalc() {
        var json = new Object() ;

        var childs = new Array() ;
        for (var i = 0; i < theAutos.length ; i++) {
            childs.push(theAutos[i].getJson()) ;
        }
        json["childs"] = childs ;
        $(theFieldName).value = JSON.stringify(json) ;
    }

    function setTitleVisibled(aVisibled) {
        if (aVisibled) {
            theLegend.parentNode.style.border = "1px solid #999";
        } else {
            theLegend.parentNode.style.border = "none";
        }
        for (var i = 0; i < theAutos.length; i++) {
            theAutos[i].setTitleVisibled(!aVisibled);
        }
        theLegend.innerHTML = aVisibled ? theTitle : "";
    }

    function ce(aName) {
        return document.createElement(aName);
    }

    function buildSurroundView() {
        var fieldset = ce("fieldset") ;
        var legend = ce("legend") ;
        var table = ce("table") ;
        table.border = '0';
        var tbody = ce("tbody") ;

        table.appendChild(tbody);
        fieldset.appendChild(legend);
        fieldset.appendChild(table);
        theInstallDiv.innerHTML = "";
        theInstallDiv.appendChild(fieldset);
        legend.innerHTML = theTitle;
        theTbody = tbody;
        theLegend = legend;
    }
}
