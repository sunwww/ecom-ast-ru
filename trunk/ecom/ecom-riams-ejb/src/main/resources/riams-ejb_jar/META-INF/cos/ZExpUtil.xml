<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="20" zv="Cache for UNIX (Linux AMD64/64-bit) 5.2 (Build 329)" ts="2008-05-20 15:25:49">
<Routine name="ZExpUtil" type="MAC" languagemode="0" timestamp="61133,49201"><![CDATA[
ZExpUtil  ; Compiled March 3, 2008 15:40:48
errf	q ""
	//проверка кода МКБ (0-нет,1-есть) 
CheckKodMkb(kodMkb,date)
	s $zt="errf"
	n res
	s res=1		;"0#неверное значение поля DS"
	d
	.i $g(kodMkb)="" q
	.i $$IsExists^ZVocLib1("VocIdc10",kodMkb,.date) s res=1
	q res
 
CheckKodDSS(kodMkb,date)
	s $zt="errf"
	n res
	s res=1
	d
	.i $g(kodMkb)="" q 		 //можно пустое
	.i +$$CheckKodMkb(kodMkb,.date) q
	.s res="0#2" q		;"0#неверное значение поля DS_S"
	q 
 
	//проверка на разрешенность МКБ по ОМС (0-нет,1-да) 
CheckEnableMkb(kodMkb,date)
	s $zt="errf"
	n res
	s res="0#3"		;код МКБ не входит в ОМС"
	d
	.i $g(kodMkb)="" q
	.i $$GetAttrVoc^ZVocLib1("VocIdc10",kodMkb,"omcPermission",.date) s res=1   //FIXME-
	q res
 
	//проверка на соответствие диагноза МКБ И услуги при диспансеризации (0-нет,1-да) +
ifMkbDispEqualUsluga(kodMkb,Usluga,Sgroup,Frm)
	s $zt="errf"
	n res
	s res="0#4"			;несоответствие поля FRM услуге (профосмотр)"
	d
	.i $g(Sgroup)'=10 s res=1 q
	.i Frm="Д" i '$$ifProfosmotr(Usluga) q 
	.i kodMkb="Z00.8" i '$$ifProfosmotr(Usluga) q 
	.s res=1
	q res
 
	//проверка кода vidLpu на "стационарность"
IsVidLpuStac(vidLpu)
	n res
	s res=0
	d
	.i $g(vidLpu)="" q 
	.i (vidLpu=1)!((vidLpu>4)&(vidLpu<8)) s res=1 q 
	q res
 
	//проверка кода As (0-нет,1-есть) если указан vidLpu то только для стационара
CheckKodAs(kodAs,date,vidLpu)
	s $zt="errf"
	n res
	s res="0#5"		;#неверное значение поля AS"
	s kodAs=$g(kodAs)
	d
	.i '$$IsVidLpuStac(vidLpu) i kodAs="" s res=1 q 		 //для нестационаров можно пустое
	.i $g(kodAs)="" q 
	.i $$IsExists^ZVocLib1("OMCAS",kodAs,date) s res=1 q
	q res
 
	//проверка кода Frm (0-нет,1-есть) 
CheckKodFrm(kodFrm,date)
	s $zt="errf"
	n res
	s res="0#6"		;неверное значение поля FRM"
	i $$IsExists^ZVocLib1("OMCFRM",.kodFrm,.date) s res=1
	q res
 
	//коды 12-14 только для стационаров +
	//проверка кода Resg (0-нет,1-есть)
CheckKodResg(kodResg,date,vidLpu)
	s $zt="errf"
	n res
	s res="0#7"			;неверное значение поля RES_G"
	d
	.i $g(kodResg)="" q	
	.i $$IsExists^ZVocLib1("OMCRESG",.kodResg,.date) s res=1 q
	.i '$$IsVidLpuStac(vidLpu) i (kodResg>11)&(kodResg<15) s res="0#8" q		;стационарный код res_g у поликлинической услуги"
	q res	
 
	//проверка кода ЛПУ (0-нет,1-есть) 
CheckKodLpu(kodLpu,date)
	s $zt="errf"
	n res
	s res="0#111"		;неверное значение поля KOD_LPU"
	d
	.i $g(kodLpu)="" q 
	.i $$IsExists^ZVocLib1("OMCLPU",.kodLpu,.date) s res=1
	q res		
 
	//проверка профиля ЛПУ (0-нет,1-есть) 
CheckProfLpu(profLpu,date)
	s $zt="errf"
	n res
	s res="0#9"			;неверное значение поля PROF_LPU"
	d
	.i $g(profLpu)="" q 
	.i $$IsExists^ZVocLib1("OMCPROFILDS",.profLpu,.date) s res=1
	q res
	
	//проверка кода СК 0-нет,1-есть) 
CheckSK(SK,date)
	s $zt="errf"
	n res
	s res="0#10"			;неверное значение поля SK"
	d
	.i $g(SK)="" q 
	.i $$IsExists^ZVocLib1("OMCSK",.SK,.date) s res=1 
	q res
 
	/*/проверка соответствия кода СК коду СК из параметра проверки(0-нет,1-есть) 
CheckSkEqualParam(SK,idExp)
	i SK=$$GetParamExp(idExp,"kodSK") q 1
	q "0#поле SK не соответствует заданному параметру"		
 	*/
 	
	//проверка кода услуги (0-нет,1-есть) 
CheckKodUsl(kodUsl,date)
	s $zt="errf"
	n res
	s res="0#11"			;неверное значение поля USLUGA"
	d
	.i $g(kodUsl)="" q 
	.i $$IsExists^ZVocLib1("OMCTARIFF",kodUsl,.date) s res=1
	q res
 
	//проверка регистрационного номера по справочнику VocOrg(0-нет,1-есть,2-номер правильный но нет в ORG) 
CheckRnumber(Rnumber,Rnumber15,date)
	s $zt="errf"
	n res
	s res="0#12"			;неверное значение поля Rnumber"
	d
	.i $g(Rnumber)="" d  q
	..i $g(Rnumber15)="" s res="0#13" q		;пустые поля RNUMBER и RNUMBER15" q
	..;i $g(Rnumber15)="" s res="0#пустое поле RNUMBER" q
	..s res=1
	.i $$IsExists^ZVocLib1("VocOrg",Rnumber,.date) s res=1 q
	.n region,number
	.s region=$p(Rnumber,"-")
	.s number=$p(Rnumber,"-",2)
	.i $$CheckKodRegion(region) i number?6n s res="3#15" q		;поле RNUMBER правильного формата но отсутствует в справочнике ORG"	
	q res	
 
	//проверка 15-го регистрационного номера по справочнику ORG(0-нет,1-есть,2-номер правильный но нет в ORG15)
	//пока не используется!!!
CheckRnumber15(Rnumber15,date)
	s $zt="errf"
	n res
	s res="0#16"		;неверное значение поля RNUMBER15"
	d
	.i $g(Rnumber)="" s res=1 q 									//можно пустое
	.i Rnumber15'?15n q
	.i $$IsExists^ZVocLib1("VocOrg",Rnumber15,.date) s res=1 q 	//FIXME+ есть еще VocOrg?
	.n kr15
	.s kr15=$e(Rnumber15,3,5)
	.i $e(Rnumber15,1,2)'=12 q
	.i '((kr15=205)!(kr15=210)!(kr15=215)!(kr15=220)!(kr15=225)!(kr15=230)!(kr15=235)!(kr15=240)!(kr15=242)!(kr15=245)!(kr15=250)!(kr15=467)!(kr15=472)!(kr15=481)!(kr15=483)!(kr15=419)) q
	.s res="2#17" q		;поле RNUMBER15 правильного формата но отсутствует в справочнике ORG" q	 //FIXME
	q res	
 
 	//прверка соответсвия 6 и 15-значного номера
CheckRnumberEqualRnumber15(rnumber,rnumber15,date,update)
	s $zt="errf"
	n res,rn15voc
	s res=1
	d
	.i $g(rnumber15)="" q
	.s rn15voc=$$GetAttrVoc^ZVocLib1("VocOrg",rnumber,"fondNumber",.date)
	.i rn15voc'=rnumber15 s res="0#19"		;поля RNUMBER15 и RNUMBER принадлежат разным страхователям по справочнику ORG" 
	.i $g(update) d  q
	..s res="2#20" q		;15-й код не соответствует справочному значению#"_rn15voc 
	q res
 
 	//проверка соответствия полей услуга и профиль услуги +
CheckProfilEqualUsluga(Profil,Usluga)
	s $zt="errf"
	n res
	s res=1
	d
	.i ($g(Profil)="")!($g(Usluga)="") s res="0#21" q		;пустое значение поля USLUGA или PROF_LPU" q		
	.i $g(Profil)'=$e(Usluga,5,6) s res="0#22" q		;поле PROF_LPU не соответствует полю USLUGA" q
	q 		
	
	//проверка соответствия кода ЛПУ коду ЛПУ из параметра проверки(0-нет,1-есть) 
CheckLpuEqualParam(Lpu,idExp)
	s $zt="errf"
	n res
	s res=1
	i Lpu'=$$GetParamExp^ZExpUtil(idExp,"LpuExt") s res="0#23" q		;поле KOD_LPU не соответствует проверяемому ЛПУ"
	q res		
 
	//проверка правильности поля DAT_POSTUP (0-нет,1-да) +
CheckDatPostup(DatPostup,vidLpu,DatExpStop,DatWipis)
	s $zt="errf"
	n res
	d
	.i $g(DatPostup)="" i '$$ifPolikByVidLpu(vidLpu) s res="0#24"		;пустое поле DAT_POSTUP" q
	.i DatPostup>DatExpStop s res="0#25" q	;поле DAT_POSTUP не входит в экспернтый период" q		
	.i DatPostup>DatWipis s res="0#26" q		;поле DAT_POSTUP позже DAT_WIPIS "		
	.s res=1
	q res
 
	//проверка правильности поля DAT_WIPIS (0-нет,1-да) +
CheckDatWipis(DatWipis,DatExpStart,DatExpStop)
	s $zt="errf"
	n res
	d
	.i $g(DatWipis)="" s res="0#27" q		;пустое поле DAT_WIPIS" q
	.i (DatWipis<DatExpStart)!(DatWipis>DatExpStop) s res="0#28" q		;поле DAT_WIPIS не входит в экспернтый период "	q
	.s res=1	
	q res
 
	//проверка правильности поля DAT_PEREVOD (0-нет,1-да) +
CheckDatPerevod(DatPerevod,DatPostup,DatWipis)
	s $zt="errf"
	n res
	d
	.s res=1
	.i $g(DatPerevod)="" q 				//можно пустое
	.i DatPerevod<DatPostup s res="0#29" q		;поле DAT_PEREVOD раньше DAT_POSTUP " q
	.i DatWipis<DatPerevod s res="0#30" q		;поле DAT_PEREVOD позже DAT_WIPIS " q
	q res
 
	//проверка правильности поля DAT_OPER (0-нет,1-да) 
CheckDatOper(DatOper,DatPostup,DatWipis)
	s $zt="errf"
	n res
	d
	.s res=1
	.i $g(DatOper)="" q 				//можно пустое
	.i DatOper<DatPostup s res="0#31" q		;поле DAT_OPER раньше DAT_POSTUP "		
	.i DatOper>DatWipis s res="0#32" q		;поле DAT_OPER позже DAT_WIPIS "		
	q res
 
	//проверка правильности поля DLISTIN (0-нет,1-да) 
CheckDatListIn(DatListIn,DatExpStart,DatExpStop)
	s $zt="errf"
	n res
	d
	.s res=1
	.i $g(DatListIn)="" q 				//можно пустое
	.i DatListIn<DatExpStart s res="0#33" q		;поле DLISTIN не входит в экспернтый период " q		
	.i DatListIn>DatExpStop s res="0#33" q
	q res
 
	//проверка правильности поля DLISTOUT (0-нет,1-да) 
CheckDatListOut(DatListOut,DatExpStart,DatExpStop,DatListIn)
	s $zt="errf"
	n res
	d
	.s res=1
	.i $g(DatListOut)="" d  q
	..i DatListIn'="" s res="0#34" q		;поле DLISTOUT пустое при заполненом поле DLISTIN"
	.i (DatListOut<DatExpStart)!(DatListOut>DatExpStop) s res="0#35" q
	.i DatListOut<DatListIn s res="0#36" q
	q res 
 
	//проверка соответствия поля DATA_SCHET дате из параметра проверки(0-нет,1-да) 
CheckDatSchetEqualParam(DatSchet,DateSchetExt,update)
	s $zt="errf"
	n res
	d
	.s res=1
	.i $g(DatSchet)="" s res="0#37" q		;пустое поле DATA_SCHET" q
	.i DatSchet=DateSchetExt q 
	.s res="0#38" q			;поле DATA_SCHET не соответствует дате счета"
	.i '$g(update) q
	.s res="2#114#"_DateSchetExt
	q res	
 
	//проверка правильности поля N_IST_BOL (0-нет,1-да) 
CheckNistBol(NistBol)
	s $zt="errf"
	n res
	d
	.s res=1
	.i $g(NistBol)="" s res="0#39" q		;пустое поле N_IST_BOL" q
	q res
 
	//проверка правильности поля REESTR (0-нет,1-да) 
CheckReestr(Reestr)
	s $zt="errf"
	n res
	d
	.s res=1
	.i $g(Reestr)="" s res="0#40" q		;пустое поле REESTR" q
	.i Reestr'?1.4n s res="0#41" q		;неверный формат поля REESTR" q
	q res
 
	//проверка соответствия поля NOM_SCHET номеру из параметра проверки(0-нет,1-да) 
CheckNomSchetEqualParamExp(NomSchet,pNomSchetExp,update)
	s $zt="errf"
	n res
	d
	.s res=1
	.i $g(NomSchet)="" s res="0#42" q			;пустое поле NOM_SCHET" q
	.i NomSchet=pNomSchetExp q
	.s res="0#43" 								;поле NOM_SCHET не соответствует бумажному счету"
	.i '$g(update) q
	.s res="2#115#"_pNomSchetExp
	q res	
 
	//проверка кода направившего ЛПУ (0-нет,1-есть) 
CheckKodHD(kodLpu,date)
	s $zt="errf"
	n res
	d
	.s res=1
	.i '$$CheckKodLpu(kodLpu,.date) s res="0#44" q			;неверное значение поля HD" q
	q res	
 
	//проверка вида ЛПУ (0-нет,1-есть) 
CheckVidLpu(vidLpu,date)
	s $zt="errf"
	n res
	d
	.s res="0#45"
	.i $g(vidLpu)="" q
	.i $$IsExists^ZVocLib1("OMCVIDLPU",vidLpu,.date) s res=1 q
	q res	
 
	//проверка группы страхования на доменное значение(0-нет,1-есть) 
CheckSgroup(Sgroup,date)
	s $zt="errf"
	n res
	d
	.s res="0#46"
	.i $g(Sgroup)="" q 
	.i $$IsExists^ZVocLib1("OMCSGROUP",Sgroup,.date) s res=1 q
	q res
 
	//проверка пола на домен (0-нет,1-есть) 
CheckSex(Sex)
	s $zt="errf"
	n res
	d
	.s res="0#47"
	.i $g(Sex)="" q 
	.i $$IsExists^ZVocLib1("OMCSEX",Sex) s res=1 q
	q res	
 
	//проверка района на домен (0-нет,1-есть) 
CheckKodRegion(Region,date)
	s $zt="errf"
	n res
	d
	.s res="0#48"
	.i $g(Region)="" q 
	.i $$IsExists^ZVocLib1("OMCRAYON",Region,.date) s res=1 q
	q res
 
	//проверка типа улицы на домен (0-нет,1-есть) 
CheckStreetTyp(StreetTyp,date)
	s $zt="errf"
	n res
	d
	.s res="0#49"
	.i $$IsExists^ZVocLib1("OMCSTREETTYPE",.StreetTyp,.date) s res=1 q
	q res
 
 
	//проверка на домен справочника уровне ЛПУ(0-нет,1-есть) 
CheckKodKL(kodKL,date)
	s $zt="errf"
	n res
	d
	.s res="0#51"
	.i $$IsExists^ZVocLib1("OMCKL",.kodKL,.date) s res=1 q
	q res
 
	//проверка на домен справочника осложнений(0-нет,1-есть) 
CheckKodOSL(kodOSL,date)
	s $zt="errf"
	n res
	d
	.s res="0#52"
	.i $$IsExists^ZVocLib1("OMCOSL",.kodOSL,.date) s res=1 q
	q res
	
	//проверка на домен справочника характер заболевания (0-нет,1-есть) 
CheckKodQZ(kodQZ,date)
	s $zt="errf"
	n res
	d
	.s res="0#53"
	.i $$IsExists^ZVocLib1("OMCQZ",.kodQZ,.date) s res=1 q
	q res
 
	//проверка поля SSD (0-нет,1-да) 
CheckSSD(Ssd) 
	s $zt="errf"
	n res
	d
	.s res="0#54"
	.i $g(Ssd)="" q
	.s res=$$CheckSNILS(Ssd)
	.i res=1 q
	.i +res=2 s res="2#55#"_$p(res,"#",3)
	q res
 
	//проверка поля SS (0-нет,1-да) 
CheckSS(Ss) 
	s $zt="errf"
	n res
	d
	.s res="0#56"
	.i $g(Ssd)="" q
	.s res=$$CheckSNILS(Ss)
	.i res=1 q
	.i +res=2 s res="2#57#"_$p(res,"#",3)
	q res 
 
	//проверка на корректность заполненния поля KOL_DNEY(0-нет,1-да) 
CheckKolDayCorrect(KolDay,Usluga)
	s $zt="errf"
	n res
	s res="0#58"
	d
	.i $g(KolDay)="" q
	.i KolDay<1 q
	.i KolDay'?1.3n.".".2n s res="0#59" q
	..i '$$ifStac(Usluga) d  q 
	.i KolDay=1 s res=1 q
	.i KolDay'>$$ifManyUsl^ZExpUtil(Usluga) s res=1 q		//необходим справочник макс кол-ва услуг
	.s res="0#60"
	q res
 
	//проверка на домен справочника PRVD (0-нет,1-есть) 
CheckKodRRVD(kodPRVD,date)
	s $zt="errf"
	n res
	d
	.s res="0#61"
	.i $$IsExists^ZVocLib1("OMCPRVD",.kodPRVD,.date) s res=1 q
	q res
 
	//проверка на корректность заполненния поля POVTOR_GOS (0-нет,1-да) 
CheckPovtorGos(PovtorGos)
	n res
	s res="0#62"
	d
	.i $g(PovtorGos)="" q 
	i (PovtorGos=1)!(PovtorGos=2) s res=1 q
	q res
 
	//проверка на корректность заполненния поля KOL_REC (0-нет,1-да) 
CheckKolRec(KolRec)
	n res
	d
	.i $g(KolRec)="" s res=1 q
	.i KolRec'?1n s res="0#63" q
	q res
 
	//проверка разрешенности услуги в ЛПУ (0-нет,1-да) !! - не реализовано!!
CheckUslEnablLpu(Usluga,kodLpu,DateCalc) 
	n res
	d
	.s res=1
	.s res="0#64"
	q res
 
	//проверка соответствия услуги возрасту (0-нет,1-да) +
CheckUslugaEqualAge(Usluga,DOB,DateCalc) 
	s $zt="errf"
	n res
	d
	.i $$ifChild(DOB,DateCalc)=$$ifChildUsluga(Usluga) s res=1 q
	.s res="0#65"
	q res
 
	//проверка соответствия уровня ЛПУ полю KL(0-нет,1-да) 
CheckLpuEqualKL(Lpu,Usluga,KL,date)
	n res
	s res=1
	d
	.i '$$ifStac(Usluga) d  q 
	..i KL=4 q 
	..s res="0#66"
	.// $$IdentifyByList^ZIdentify("OmcLpuDepartmentLevel","omcDepartmentType,omcLpu","0H,10")
	.i $$GetUrovLpu^ZExpUtil(Lpu,Usluga,date)'>KL q
	.s res="0#67"	
	q res
 
	//проверка соответствия району страхования для неработающих (0-нет,1-да) 
CheckRegionEqualSK(sgroup,Region,SK,date,update)
	n res,kodSK
	s res=1
	d
	.i $g(sgroup)=10 q 
	.s kodSK=$$GetRegionSK^ZVocLib(.Region,.SK,.date)
	.i kodSK=SK q 
	.s res="0#68#"_kodSK	
	.i '$g(update) q
	.s res="2#68#"_kodSK	
	q res
 
	//проверка соответствия района и населенного пункта, пока только Астрахань (0-нет,1-да) 
CheckRegionAstrakhan(Region,Punct)
	n res
	s res=1
	d
	.i Punct'["АСТРАХАНЬ" q
	.i $g(Region)="" q 
	.i "КЛСТ"[Region q 
	.s res="0#69"	
	q res
 
	//проверка соответствия вида ЛПУ услуге(0-нет,1-да) +
CheckVidLpuEqualUsluga(vidLpu,Usluga)
	s $zt="errf"
	n res
	d
	.s res="0#70"	
	.i vidLpu=1 d  q		//1 круглосуточный стационар
	..i $$ifStac(Usluga) s res=1
	.i vidLpu=2 d  q 		//2 ПОЛИКЛИНИКА (ПО ПОСЕЩЕНИЮ)
	..i $$ifPolikPos(Usluga) s res=1 q
	.i vidLpu=3 d  q 		//3 ПОЛИКЛИНИКА (ПО УСЛУГАМ)
	..i $$ifUsluga(Usluga) s res=1 q
	.i vidLpu=4 d  q 		//4 УСЛУГИ СТАЦИОНАРА
	..i $$ifUsluga(Usluga) s res=1 q
	.i vidLpu=5 d  q 		//5 СТАЦИОНАР НА ДОМУ
	..i $$ifStacDom(Usluga) s res=1 q
	.i vidLpu=6 d  q 		//6 СТАЦИОНАР ДНЕВНОГО ПРЕБЫВАНИЯ (ПРИ КРУГЛОСУТ)
	..i $$ifStacDnev(Usluga) s res=1 q
	.i vidLpu=7 d  q 		//7 ДНЕВНОЙ СТАЦИОНАР (ПРИ АПУ)
	..i $$ifStacDnev(Usluga) s res=1 q
	q res
 
	//проверка соответствия должности профилю услуги (0-нет,1-да) 
	//проверка идет по справочнику РОСНО!!! возможно он не учитывает все случаи
CheckPrvdEqualProfLpu(Prvd,ProfLpu,Usluga,date)
	s $zt="errf"
	n res
	d
	.i $$ifUsluga(Usluga) s res=1 q 	 //для услуг не проверяем
	.i $$GetAttrVoc^ZVocLib1("OMCPRVD",.Prvd,"voccode",.date)'=ProfLpu d  q  //FIXME
	..s res="0#71"
	.i $$ifChildUsluga(Usluga) d  q 
	..i $$ifStac(Usluga) s res=1 q			//во взрослом стационаре ребенка можно лечить
	..i $e(Usluga,6)="O" s res=1 q 			//в стоматологии тоже 
	..i $$GetAttrVoc^ZVocLib1("PRVD",.Prvd,"DETI",.date) s res=1 q  //FIXME
	..s result="0#72"
	.i $$GetAttrVoc^ZVocLib1("PRVD",.Prvd,"VZROS",.date) s res=1 q  //FIXME
	.s res="0#73"
	q res
 
	///-----внутренние проверки------------------------------
	//проверка на ребенка
ifChild(DOB,DateCalc)
	q +$$dif^Zcdat($zd(DOB,8),$zd(DateCalc,8))<18 
	 
ifChildUsluga(Usluga)
	q $e(Usluga,3)="Д"	
 
	//проверка на стационарность услуги (круглосуточный стационар!!!!)
ifStac(Usluga)
	q "AB"[$e(Usluga,4)
 
	//проверка на стационар на дому
ifStacDom(Usluga)
	q $e(Usluga,4)="N"
 
	//проверка на стационар дневного пребывания при круглосуточном
ifStacDnev(Usluga)
	q "VJ"[$e(Usluga,4)
 
	//проверка на стационар при АПУ
ifStacAPU(Usluga)
	q "MW"[$e(Usluga,4)
 
	//проверка на провизорную госпитализацию
ifProv(Usluga)
	q $e(Usluga,4)="A"
 
	//проверка на аборт
ifAbort(Usluga)
	q $g(Usluga)="000B15"
 
	//проверка на профосмотр
ifProfosmotr(Usluga)
	q $e(Usluga,4)="E"
 
	//проверка на стацзам помощь по услуге
ifStacZam(Usluga)
	q $$GetAttrVoc^ZVocLib1("OMCTARIFF",Usluga,"lpuKind")="DS" 
 
	//проверка на поликлинические посещения по услуге
ifPolik(Usluga)
	q $$ifPolikPos(Usluga)!$$ifUsluga(Usluga)
	
	//проверка на поликлинические посещения по услуге
ifPolikPos(Usluga)
	q $$GetAttrVoc^ZVocLib1("OMCTARIF",Usluga,"lpuKind")="PL"  
 
	//проверка на услуги 
ifUsluga(Usluga)
	q $$GetAttrVoc^ZVocLib1("OMCTARIF",Usluga,"lpuKind")="US"  
 
	//проверка на поликлиническую услугу
ifPolikByVidLpu(vidLpu)
	q ((vidLpu=2)!(vidLpu=3)!(vidLpu=4))
	///----конец внутренних проверок
 
	//проверка на max кол-во поликл услуг за раз
ifManyUsl(Usluga)
	q 1
 
 	//получить дату для вычисления возраста (начала госп для стационара и выписка для п-ки)
GetDataCalcAge(DatePostup,DateWipis,Usluga)
	i $$ifPolik(Usluga) q DateWipis //для п-ки по дате выписки
	q DatePostup 
 
	//заполнено место работы
ifWorkPlaceFill(WorkPlace)
	q $g(WorkPlace)'=""
 
	//заполнен населенный пункт
ifPunctFill(Punct)
	q $g(Punct)'=""
 
 
	//проверка заполнения серии полиса (0-нет,1-да) 
CheckSerPolisFill(SerPolis)
	n res
	d
	.i $g(SerPolis)="" s res="0#74" q
	.s res=1
	q res
 
	//проверка заполнения номера полиса (0-нет,1-да) 
CheckNomPolisFill(NomPolis)
	n res
	d
	.i $g(NomPolis)'?1.7n s res="0#75"
	.s res=1
	q res
 
	//проверка соответствия серии полиса страховой компании(0-нет,1-да) 
IsSerPolisCorrectSK(SerPolis,SK)
	s $zt="errf"
	n res
	s res=1
	d
	.i SerPolis="" q
	.i SK="" q
	.i SerPolis="ГМС" i SK'=7 s res="0#76"
	q res
		
 	//проверка соответствия Sgroup другим полям (дата рождения и код страхователя)
	//возвращает (0-нет,1-да) _#_текст ошибки
CheckSgroupCorrect(Sgroup,DatOB,Rnumber,DateCalc)
	s $zt="errf"
	s DatOB=$zdate(DatOB,8)
	s DateCalc=$zdate(DateCalc,8)
	n res,age
	s res=1
	s age=+$$dif^Zcdat(DateCalc,DatOB,3)
	d
	.i Sgroup="" q		//проверить невозможно
	.i Sgroup="55" i age'<15 s res="0#77" q
	.i Sgroup="50" i age'<18 s res="0#78" q
	.i Sgroup="10" i age'<15 s res="0#79" q
	.i Sgroup="10" i age>90 s res="0#80" q
	.i Sgroup="10" i Rnumber="Д-055555" s res="0#81" q
	.i Sgroup="80" i (age<14)!(age>45) s res="0#82" q
	.i Sgroup'="10" i Rnumber'="Д-055555" s res="0#83" q
	q res
 
	//проверка правильности заполнения фамилии
	//Заполняется прописными русскими буквами (допускается использование символа "-" и " "
	//возвращает (0-нет,1-да)_#_текст ошибки
	//если update=1 то исправить английские на русские
CheckFamCorrect(Fam,update)
	n res
	s res=1
	d
	.i $g(Fam)="" s res="0#84" q
	.i $l(Fam)<1 s res="0#85" q
	.i '$$ifRuss($tr(Fam," -","")) d  q
	..s res="0#86" 
	..i '$g(update) q
	..s Fam=$tr(Fam,"AOPEHTMBCX","АОРЕНТМВСХ")
	..i '$$ifRuss($tr(Fam," -","")) q
	..s res="2#87#"_Fam
	.i Fam'?2.15U.(1" ",1"-")2.15U s res="0#88" q
	q res
 
	//проверка правильности заполнения имени
	//Заполняется прописными русскими буквами (допускается использование символа "-" и " "
	//возвращает (0-нет,1-да)_#_текст ошибки
	//если update=1 то исправить английские на русские
CheckFirstNameCorrect(FirstName,update)
	n res
	s res=1
	d
	.i $g(FirstName)="" s res="0#89" q
	.i $l(FirstName)<2 s res="0#90" q
	.i '$$ifRuss($tr(FirstName," -","")) d  q
	..s res="0#91" 
	..i '$g(update) q
	..s FirstName=$tr(FirstName,"AOPEHTMBCX","АОРЕНТМВСХ")
	..i '$$ifRuss($tr(FirstName," -","")) q
	..s res="2#92#"_FirstName
	.i FirstName'?2.15U.(1" ",1"-")2.15U s res="0#93"
	q res
 
	//проверка правильности заполнения отчества noEmpty-обязательность заполнения
	//Заполняется прописными русскими буквами (допускается использование символа "-" и " "
	//возвращает (0-нет,1-да)_#_текст ошибки
	//если update=1 то исправить английские на русские
CheckSecNameCorrect(SecName,update)
	n res
	s res=1
	d
	.i $g(SecName)="" q 
	.i $l(SecName)<2 s res="0#94" q
	.i '$$ifRuss($tr(SecName,"- ","")) d  q
	..s res="0#95" q
	..i '$g(update) q
	..s SecName=$tr(SecName,"AOPEHTMBCX","АОРЕНТМВСХ")
	..i '$$ifRuss($tr(SecName," -","")) q
	..s res="2#96#"_SecName
	.i SecName'?2.15U.(1" ",1"-")2.15U s res="0#97"
	q res
 
	//проверка на правильность пола по отчеству
	//возвращает (0-нет,1-да)_#_текст ошибки
CheckSecNameSexCorrect(SecName,Sex,update)
	n res
	s res=1
	d
	.i $g(SecName)="" q
	.n okon,exit
	.s okon=$e(SecName,$l(SecName)-1,$l(SecName))
	.i Sex=1 d  q 
	..i okon="НА" s res="0#98" q
	..i okon="ЗЫ" s res="0#98" q
	.i Sex=2 d  q 
	..i okon="ИЧ" s res="0#98" q
	..i okon="ЛЫ" s res="0#98" q
	i $g(update) i res'=1 s sex=$s(sex=1:2,1:1) s res="2#99#"_sex
	q res
 
	//проверка поля DR
	//возвращает (0-нет,1-да) _#_текст ошибки
CheckDRCorrect(DOB,DateCalc)
	n res
	s res=1
	d
	.i DOB>DateCalc s res="0#100" q
	.s age=+$$dif^Zcdat($zd(DOB,8),$zd(DateCalc,8),3)
	.i age>100 s res="0#101" q
	q res
 
	//проверка на правильность СНИЛСА по алгоритму ФОНДА
	//возвращает (0-неправильный формат,1-правильный,2-правильный по числам 
	//неправильны по маске возвращает 0_#_текст ошибки, 1, 2_#_правильный формат СНИЛСА
CheckSNILS(Snils,CheckTyp)
	i $g(Snils)="" q "0#102"
	n sn,nsum,n,ost,nn,i,CheckSum,result
	//вычисляем правильность контрольной суммы СНИЛСА
	n res
	s res=1
	d
	.s sn=$tr(Snils,"- ")
	.i $l(sn)'=11 s res=0 q
	.s nsum=0,nn=1
	.f i=9:-1:1 s n=$e(sn,i) s nsum=nsum+(n*nn),nn=nn+1
	.d
	..i nsum=100 s nsum="00" q
	..i nsum=200 s nsum="99" q
	..i nsum=201 s nsum="00" q
	..i nsum>100 s nsum=$e(nsum,2,3)-$e(nsum,1)
	.i $l(nsum)=1 s nsum="0"_nsum
	.s CheckSum=(nsum=$e(sn,10,11)) //получили контрольная сумма правильная(1) или нет(0)
	.i Snils?3n1"-"3n1"-"3n1" "2n d  q 
	..i CheckSum q				//правильный формат и контрольная сумма
	..s res="0#103"		//правильный формат и неверная контрольная сумма
	//если неверный формат по маске
	.i 'CheckSum s res="0#104" q
	.s sn=$tr(sn,$tr(sn,"1234567890")) 
	.s sn=$e(sn,1,3)_"-"_$e(sn,4,6)_"-"_$e(sn,7,9)_" "_$e(sn,10,11)
	.s res="2#105#"_sn q		//вернули СНИЛС в правильном формате
	q res
	//////
 
	//проверяет на русские буквы
ifRuss(string)
	q $tr(string,"юабцдефгхийклмнопярстужвьызшэщчъЮАБЦДЕФГХИЙКЛМНОПЯРСТУЖВЬЫЗШЭЩЧЪ","")=""
	
 
	//возвращает строку, проверяемую на дубли
GetStringDubl(ListAtr,rg)
	;b
	n stringDubl,i,lL,atr
	s lL=$l(ListAtr,",")
	s stringDubl=""
	f i=1:1:lL x "s atr=rg."_$p(ListAtr,",",i) s stringDubl=stringDubl_","_atr
	s $e(stringDubl)=""
	q stringDubl
 
	//возвращает есть ли дубль в файле если allUsl=1 то по всей базе услуг (не реализовано)
ifDubl(stringDubl,idExp,allUsl)
	//i $g(allUsl) 
	i $d(^tempExp(idExp,"dubleIndex",stringDubl)) q 1
	q 0
 
ifDetUsluga(Usluga)
	q $e(Usluga,3)="Д"
 
	//получить уровень ЛПУ по отделению
GetUrovLpu(Lpu,Usluga,date)
	n profil,idLevLpu
	s profil=$e(Usluga,5,6)
	;s idLevLpu=$$IdentifyByList^ZIdentify("OmcLpuDepartmentLevel","omcDepartmentType,omcLpu",profil_","_Lpu)
	q $$GetAttrVoc^ZVocLib1("OmcLpuDepartmentLevel",profil_","_Lpu,"omcLevel",date)
	
GetCoefficientExtr()
 	q 1.16
 
 	//проверяет цену случая
	//возвращает 1-правильная 0 -неправильная
CheckCenaSluch(CenaSluch,Usluga,Lpu,DatWipis,Mkb,KolDney,Extr,update)
	s $zt="errf"
	n cost
	n res
	s res=1
	d
	.s cost=$$GetCenaSluch(Usluga,Lpu,DatWipis,Mkb,KolDney,Extr)
	.i cost=0 s res="0#106" q
	.i CenaSluch=cost q 
	.s res="0#107#"_cost
	.i '$g(update) q
	.s res="2#113#"_cost
	q res
 
GetCenaSluch(Usluga,Lpu,Date,Mkb,KolDney,Extr)
	s $zt="ErrChekCenaSluch"
	n cost,date,ksgKD,uslKD,ksgUR,lpuUR,typAgeUr,typAgeKD,maxKD,kF,typSZ
	s date=Date
	s Extr=$g(Extr)
	s kF=1
	i Extr="ЭК" s kF=1.16 
	s cost=0
	s lpuUR=$$GetUrovLpu^ZExpUtil(Lpu,Usluga,date)
	//для провизорки
	d
	.i $$ifProv(Usluga) d  q  
	..i lpuUR="" s cost=0 q
	..i KolDney>4 s KolDney=4 //спорный вопрос-что нужно подавать - реальное или расчетное
	..s cost=$$GetAttrVoc^ZVocLib1("OMCTARIFF",Usluga,"x"_lpuUR,date)*KolDney  //FIXME+
	..s cost=$j(cost*kF,".",2)
	.//для абортика
	.i Usluga="000B15" d  q 
	..s cost=$j($$GetAttrVoc^ZVocLib1("OMCTARIFF",Usluga,"x3",date)*1.5,".",2) //FIXME+
	.//стационар
	.i $$ifStac(Usluga) d  q 
	..i lpuUR="" s cost=0 q
	..i $$ifDetUsluga(Usluga)=1 s typAgeUr="childLevel",typAgeKD="childDays"
	..e  s typAgeUr="adultLevel",typAgeKD="adultDays"
	..s ksgUR=$$GetAttrVoc^ZVocLib1("OMCKSG",Mkb,typAgeUr,date) i ksgUR>0 d  q 	//есть КСГ //FIXME
	...s ksgKD=$$GetAttrVoc^ZVocLib1("OMCKSG",Mkb,typAgeKD,date)	//FIXME
	...i ksgKD<1 s cost=0 q													//ошибка справочника - не указана длит-ть
	...s cost=$$GetAttrVoc^ZVocLib1("OMCTARIFF",Usluga,"x"_ksgUR,date)*ksgKD	//FIXME+
	...s cost=$j(cost,".",2)
	..//нет КСГ - по среднему
	..s uslKD=$$GetAttrVoc^ZVocLib1("OMCDEPTYPE",$e(Usluga,5,6),"averageDays",date)  //FIXME-
	..s cost=$$GetAttrVoc^ZVocLib1("OMCTARIFF",Usluga,"x"_lpuUR,date)*uslKD  //FIXME+
	..s cost=$j(cost*kF,".",2)
	.//для стационарозамещающей помощи
	.i $$ifStacZam(Usluga) d  q  
	..d
	...i $$ifStacDom(Usluga) s typSZ=1 q
	...i $$ifStacDnev(Usluga) s typSZ=2 q
	...s typSZ=3								
	..//вычислили мах КД...
	..d
	...i $$ifDetUsluga(Usluga)=1 d  q			//для детей
	....s maxKD=$$GetAttrVoc^ZVocLib1("OMCPROFILDS",Usluga,"child"_typSZ,date)  
	...//или взрослых
	...s maxKD=$$GetAttrVoc^ZVocLib1("OMCPROFILDS",Usluga,"adult"_typSZ,date)  
	..i maxKD=0 s cost=0 q
	..i KolDney>maxKD s KolDney=maxKD
	..s cost=$$GetAttrVoc^ZVocLib1("OMCTARIFF",Usluga,"x4",date)*KolDney 
	..s cost=$j(cost,".",2)
	.//поликлиника
	.s cost=$$GetAttrVoc^ZVocLib1("OMCTARIFF",Usluga,"x4",date)  //FIXME+
	.s cost=$j(cost*KolDney,".",2)
	q cost
 
ErrChekCenaSluch
	q "0#106"
	
	//тело проверки записи
CheckRegistry(regId,idExp,update,RegOid)
	//set $ztrap="ErrChekRegistry"
	n rg,ListError,resRule,listArg,zR,DateCalc,stopCheck
	n DateStart,DateEnd,LpuExt,DateSchetExt,NomSchetExt,DateCalc,stopCheck
	s update=$g(update)
	s ListError=""
	s zR=","
	s rg=$s(RegOid'="":RegOid,1:##class(User.RegistryEntry).%OpenId(regId))
	//exit?
	i '$IsObject(rg) q 0		
	
	s rg.expert=""
	//получили внешние параметры экспертизы
	s expOid=##class(User.Review).%OpenId(idExp)
	
	i expOid="" d  q 0 
	.s rg.expert="не определены праметры экспертизы, проверка прервана"
	.d rg.%Save()
	
	;получили параметры экспертизы для проверок
	s DateStart=expOid.dateStart
	s DateEnd=expOid.dateStop
	s LpuExt=expOid.kodLpu
	s DateSchetExt=expOid.dateAccountExt
	s NomSchetExt=expOid.accountExt
	
	s DateCalc=rg.admissionDate
	
	;проверяем грубые ошибки при которых проверка не производится
	s stopCheck=1 d  
	.i rg.lastName="" s ListError="не заполнено поле фамилия, проверка прервана" q
	.i rg.render="" s ListError="не заполнено поле услуга, проверка прервана" q
	.i rg.casePrice="" s ListError="не заполнено поле цена случая, проверка прервана" q
	.i rg.birthDate="" s ListError="не заполнено поле дата рождения, проверка прервана" q
	.s stopCheck=0
	  
	i stopCheck d  q 0
	.s rg.expert=ListError
	.d rg.%Save()
	
	
	d ListCheck	
 
	//убрали последнюю запятую
	i $e(ListError,1)="," s $e(ListError,1)=""
	s rg.expert=ListError
	d rg.%Save()
	d
	.i ListError="" s res=1 q
	.s res=0
	q res
 
Error
	q "0#ошибка обработки правила"
	
ErrChekRegistry
	//do BACK^%ETN	
	q
	//проверяем, было ли вычисление этого правила, если да, то возвращаем вычисленное значение
	// если нет, то вычисляем и записываем в массив вычисленных правил...
	// проверяем только вызовы с аргументами!!!
CalcRule(idExp,nameRule,listArg,update)
	s $zt="ErrCalcRule"
	i $g(nameRule)="" q "0#ошибка обработки правила, не определена точка вызова"
	i $g(listArg)="" q "0#ошибка обработки правила "_nameRule_", пустой список аргументов"
	n resRule
	i $d(^tempExp(idExp,nameRule,listArg)) d  q resRule   
	.s resRule=^tempExp(idExp,nameRule,listArg)
	x "s resRule=$$"_nameRule_"^ZExpUtil("_listArg_","_update_")"
	i resRule="" s resRule="0#ошибка обработки правила "_nameRule_" c аргументами "_$g(listArg)
	s ^tempExp(idExp,nameRule,listArg)=resRule
	q resRule	
 
ErrCalcRule
	q "0#ошибка обработки правила "_$g(nameRule)_" c аргументами "_$g(listArg)
 
AddError(resRule,field)
	s ListError=ListError_","_$p(resRule,"#",2)
	d AddMess(resRule,field)
	q
 	
 	;добавляет сообщение в класс User.ExpResult
 	;параметры:	resRule-результат срабатывания правила
 	;		   	field-имя поля в формате ТФ
 	;			oldValue-старое исправляемое значение
 	;			newValue-новое значение
AddMess(resRule,field,oldValue,newValue,messText)
	n messOid,typMess,sc
	s typMess=$p(resRule,"#",2)
	s messOid=##class(User.ExpResult).%New()
	s messOid.registryEntryid=rg.%Id
	s messOid.reviewid=idExp
	s messOid.messReviewid=typMess
	i typMess=2 d
	.s messOid.oldValue=$g(oldValue)
	.s messOid.newValue=$g(newValue)
	;-тип сообщения 1-error,2-warn,3-info,4-debug
	s messOid.resultType=$s(typMess=0:1,typMess=2:2,1:3)
	s messOid.propertyName=field
	s messOid.resultText=messText
	s sc=messOid.%Save()
	i 'sc					//FIXME - как правильно обработать "несохранение" сообщения?
	q
 
	//НАЧАЛО новой экспертизы
GetIdNewExp(dateStart,dateStop,lpuExt,nomSchetExt,dateSchetExt,update,impTime)
	n expOid,res,lpuOid
	;s lpuOid=##class(User.OMCLPU).%OpenId(lpuExt)
	s expOid=##class(User.Review).%New()
	s expOid.holder=$$princ^Zutil()
	s expOid.updateEnable=$g(update,1)
	s expOid.kodLpu=lpuExt
	s expOid.dateStart=dateStart
	s expOid.dateStop=dateStop
	s expOid.importTime=impTime
	s expOid.timeStart=$zts
	s expOid.state=0
	s expOid.accountExt=nomSchetExt
	s expOid.dateAccountExt=dateSchetExt
	d 
	.s sc=expOid.%Save() i 'sc s res="0#NewExpErr:"_$g(%objlasterror) q
	.s res=expOid.%Id()
	q res
	
	/*
	s idExp=$o(^tempExp(""),-1)+1 s ^tempExp(idExp)=$h_"#"_paramId
	s ^tempExp(idExp,"param","DateStart")=DateStart	
	s ^tempExp(idExp,"param","DateEnd")=DateEnd	
	s ^tempExp(idExp,"param","LpuExt")=LpuExt	
	s ^tempExp(idExp,"param","NomSchetExt")=NomSchetExt	
	s ^tempExp(idExp,"param","DateSchetExt")=DateSchetExt
	;s ^tempExp(idExp,"param","kodSKExt")=kodSKExt
	//на всякий случай почистили служебные ветки для расчета дублей, вычисленных правил и сообщений
	/*k ^tempExp(idExp,"dubleIndex")
	k ^tempExp(idExp,"calcRules")
	k ^tempExp(idExp,"mess")*/
	q idExp
 
	//ошибку не отрабатываю - вывалимся по общей ошибке
GetParamExp(idExp,nameParam)
	q ^tempExp(idExp,"param",nameParam)
 	;$zobjproperty(OREF,PropertyName,arglist)
 	
Up(str)
	q $zcvt(str,"U")
	;q $tr(str,"юабцдефгхийклмнопярстужвьызшэщчъ","ЮАБЦДЕФГХИЙКЛМНОПЯРСТУЖВЬЫЗШЭЩЧЪ")
 
	//получить текст ошибки 
GetErrorText(idErr)
 	n res
 	d
 	.i $g(idErr)="" s res="исключительная ошибка экспертизы" q
 	.i '$d(^User.OmcExpertResult(idErr)) s res="код ошибки "_idErr q
 	.s res=$p(^User.OmcExpertResult(idErr),"#",2)
 	q res
test
	
	w !,"Тестовая экспертиза",!
	n cnt
	//b 
	s regId=""
	s start=$p($h,",",2)
	f cnt=1:1:100 d
	.s regId=$o(^User.RegistryEntryD(regId),-1)
	.i '(cnt#100) w !,cnt\100," сотня, -",$p($h,",",2)-start," сек."
	.d CheckRegistry(regId,1,1)
 	
viewTest 
	w !,"Просмотр результатов теста",!
	n cnt,rg,start,stop
	s start=$p($h,",",2)
	s regId=""
	f cnt=1:1:100 d
	.s regId=$o(^User.RegistryEntryD(regId),-1)
	.;i '(cnt#1000) w !,cnt\100," тысяча, -",$p($h,",",2)-start," сек."
	.s rg=##class(User.RegistryEntry).%OpenId(regId)
	.w " ",rg.expert,!
	q
	
	
ListCheck	
	//проверяем по очередности полей по структуре ТФ
	//НАЧАЛО проверки кода ЛПУ
	;на справочник
	
	s listArg=rg.kodLpu_zR_DateCalc
	s resRule=$$CalcRule(idExp,"CheckKodLpu",listArg)
	i 'resRule d AddError(resRule,"KOD_LPU")
	;на соответствие внешнему параметру проверки
	s listArg=rg.kodLpu_zR_LpuExt
	s resRule=$$CalcRule(idExp,"CheckLpuEqualParam",listArg)
	i 'resRule d AddError(resRule,"KOD_LPU")
	//КОНЕЦ проверки кода ЛПУ
	
	//НАЧАЛО проверки вида ЛПУ
	s listArg=rg.vidLpu_zR_DateStart
	s resRule=$$CalcRule(idExp,"CheckVidLpu",listArg)
	i 'resRule d AddError(resRule,"VID_LPU")
	//КОНЕЦ проверки вида ЛПУ
	
	//НАЧАЛО проверки SGROUP
	s listArg=rg.sgroup_zR_DateStart
	s resRule=$$CalcRule(idExp,"CheckSgroup",listArg)
	i 'resRule d AddError(resRule,"SGROUP")
	
	s listArg=rg.sgroup_zR_rg.birthDate_zR_rg.worksOldCode_zR_DateCalc
	s resRule=$$CalcRule(idExp,"CheckSgroupCorrect",listArg)
	i 'resRule d AddError(resRule,"SGROUP")
	//КОНЕЦ проверки SGROUP
	
	//НАЧАЛО проверки S_POLIS
	s resRule=$$CheckSerPolisFill(rg.SPolis)
	i 'resRule d AddError(resRule,"S_POLIS")
	s listArg=rg.SPolis_zR_rg.insuranceCompany
	s resRule=$$CalcRule(idExp,"IsSerPolisCorrectSK",listArg)
	i 'resRule d AddError(resRule,"S_POLIS")
	//КОНЕЦ проверки S_POLIS
	
	//НАЧАЛО проверки N_POLIS
	s resRule=$$CheckNomPolisFill(rg.NPolis)
	i 'resRule d AddError(resRule,"N_POLIS")
	//КОНЕЦ проверки N_POLIS
	
	//НАЧАЛО проверки F
	s rg.lastname=$$Up(rg.lastname)
	s resRule=$$CalcRule(idExp,"CheckFamCorrect",rg.lastname,update)
	d
	.i +resRule=1 q
	.i 'resRule d AddError(resRule,"F") q
	.d
	..d AddMess(resRule,"F",rg.lastName,$p(resRule,"#",3))
	..s rg.lastName=$p(resRule,"#",3)
	//КОНЕЦ проверки F
	
	//НАЧАЛО проверки I
	s rg.firstname=$$Up(rg.firstname)
	s resRule=$$CalcRule(idExp,"CheckFirstNameCorrect",rg.firstname,update)
	d
	.i +resRule=1 q
	.i 'resRule d AddError(resRule,"I") q
	.d
	..d AddMess(resRule,"I",rg.firstname,$p(resRule,"#",3))
	..s rg.firstname=$p(resRule,"#",3)
	//КОНЕЦ проверки I
	
	//НАЧАЛО проверки O
	s rg.middlename=$$Up(rg.middlename)
	s resRule=$$CalcRule(idExp,"CheckSecNameCorrect",rg.middlename,update)
	d
	.i +resRule=1 q
	.i 'resRule d AddError(resRule,"O") q
	.d
	..d AddMess(resRule,"O",rg.middlename,$p(resRule,"#",3))
	..s rg.middlename=$p(resRule,"#",3)
	
	s listArg=rg.middlename_zR_rg.sex
	s resRule=$$CalcRule(idExp,"CheckSecNameSexCorrect",listArg,update)
	d
	.i +resRule=1 q
	.i 'resRule d AddError(resRule,"SEX") q
	.d
	..d AddMess(resRule,"SEX",rg.sex,$p(resRule,"#",3),"исправлено несоответствие пола и отчества")
	..s rg.sex=$p(resRule,"#",3)
	//КОНЕЦ проверки O
	
	//НАЧАЛО проверки DR
	s listArg=rg.birthDate_zR_DateCalc
	s resRule=$$CalcRule(idExp,"CheckDRCorrect",listArg)
	i 'resRule d AddError(resRule,"DR")
	//КОНЕЦ проверки DR
	
	//НАЧАЛО проверки SEX
	s resRule=$$CalcRule(idExp,"CheckSex",rg.sex)
	i 'resRule d AddError(resRule,"SEX")
	//КОНЕЦ проверки SEX
	
	//НАЧАЛО проверки RNUMBER
	s listArg=rg.worksOldCode_zR_rg.worksCode_zR_DateCalc
	s resRule=$$CalcRule(idExp,"CheckRnumber",listArg)
	d
	.i +resRule=1 q
	.i 'resRule d AddError(resRule,"RNUMBER") q
	.d AddMess(resRule,"RNUMBER")
	
	//КОНЕЦ проверки RNUMBER
	
	//НАЧАЛО проверки RNUMBER15
	s listArg=rg.worksOldCode_zR_rg.worksCode_zR_DateCalc
	s resRule=$$CalcRule(idExp,"CheckRnumberEqualRnumber15",listArg,update)
	d
	.i +resRule=1 q
	.i 'resRule d AddError(resRule,"RNUMBER15") q
	.d
	..d AddMess(resRule,"RNUMBER15",rg.worksCode,$p(resRule,"#",3))
	..s rg.worksCode=$p(resRule,"#",3)
	//КОНЕЦ проверки RNUMBER15	
	
	//НАЧАЛО проверки M_RABOT
	s resRule=$$ifWorkPlaceFill(rg.worksName)
	i 'resRule d AddError(resRule,"M_RABOT") 
	//КОНЕЦ проверки M_RABOT
	
	//НАЧАЛО проверки REGION
	s resRule=$$CalcRule(idExp,"CheckKodRegion",rg.region)
	i 'resRule d AddError(resRule,"REGION") 
	
	s listArg=rg.sgroup_zR_rg.region_zR_rg.insuranceCompany_zR_DateCalc
	s resRule=$$CalcRule(idExp,"CheckRegionEqualSK",listArg)
	d
	.i +resRule=1 q
	.i 'resRule d AddError(resRule,"SK")
	.d
	..d AddMess(resRule,"SK",rg.insuranceCompany,$p(resRule,"#",3))
	..s rg.insuranceCompany=$p(resRule,"#",3)
	
	s listArg=rg.region_zR_rg.settlement
	s resRule=$$CalcRule(idExp,"CheckRegionAstrakhan",listArg)
	i 'resRule d AddError(resRule,"REGION")
	//КОНЕЦ проверки REGION	
	
	//НАЧАЛО проверки PUNCT
	s resRule=$$ifPunctFill(rg.settlement)
	i 'resRule d AddError(resRule,"PUNCT") 
	//КОНЕЦ проверки PUNCT
	
	//НАЧАЛО проверки STREET_T
	s listArg=rg.streetType_zR_DateCalc
	s resRule=$$CalcRule(idExp,"CheckStreetTyp",listArg)
	i 'resRule d AddError(resRule,"STREET_T")
	//КОНЕЦ проверки STREET_T
	
	//НАЧАЛО проверки SK
	s listArg=rg.insuranceCompany_zR_DateCalc
	s resRule=$$CalcRule(idExp,"CheckSK",listArg)
	i 'resRule d AddError(resRule,"SK")
	//КОНЕЦ проверки SK
	
	//НАЧАЛО проверки USLUGA
	//-на справочник
	s prop="USLUGA"
	s listArg=rg.render_zR_DateCalc
	s resRule=$$CalcRule(idExp,"CheckKodUsl",listArg)
	i 'resRule d AddError(resRule,"USLUGA") 
	// на соответствие возрасту
	s listArg=rg.render_zR_rg.birthDate_zR_DateCalc
	s resRule=$$CalcRule(idExp,"CheckUslugaEqualAge",listArg)
	i 'resRule d AddError(resRule,prop) 
	// на соответствие услуги и профиля
	s listArg=rg.render_zR_rg.depType
	s resRule=$$CalcRule(idExp,"CheckProfilEqualUsluga",listArg)
	i 'resRule d AddError(resRule,prop) 
	// на соответствие диспансерной услуги и МКБ
	s listArg=rg.diagnosisMain_zR_rg.render_zR_rg.sgroup_zR_rg.lpuFromUnit
	s resRule=$$CalcRule(idExp,"ifMkbDispEqualUsluga",listArg)
	i 'resRule d AddError(resRule,prop) 
	// на соответствие услуги виду ЛПУ
	s listArg=rg.vidLpu_zR_rg.render
	s resRule=$$CalcRule(idExp,"CheckVidLpuEqualUsluga",listArg)
	i 'resRule d AddError(resRule,prop) 
	// на разрешенность услуги для данного ЛПУ
	s listArg=rg.render_zR_rg.kodLpu_zR_DateCalc
	s resRule=$$CalcRule(idExp,"CheckUslEnablLpu",listArg)
	i 'resRule d AddError(resRule,prop) 
	//КОНЕЦ проверки USLUGA	
	
	//НАЧАЛО проверки DS
	//На справочник
	s listArg=rg.diagnosisMain_zR_DateCalc
	s resRule=$$CalcRule(idExp,"CheckKodMKB",listArg)
	i 'resRule d AddError(resRule,"DS")
	//на разрешенность по территориальной программе
	s resRule=$$CalcRule(idExp,"CheckEnableMkb",listArg)
	i 'resRule d AddError(resRule,"DS")
	//КОНЕЦ проверки DS
	
	//НАЧАЛО проверки DSS
	//На справочник
	s listArg=rg.diagnosisConcomitant_zR_DateCalc
	s resRule=$$CalcRule(idExp,"CheckKodDSS",listArg)
	i 'resRule d AddError(resRule,"DSS")
	//КОНЕЦ проверки DSS
	
	//НАЧАЛО проверки DAT_POSTUP
	s listArg=rg.admissionDate_zR_rg.vidLpu_zR_DateEnd_zR_rg.dischargeDate
	s resRule=$$CalcRule(idExp,"CheckDatPostup",listArg)
	i 'resRule d AddError(resRule,"DAT_POSTUP")
	//КОНЕЦ проверки DAT_POSTUP
	
	//НАЧАЛО проверки PEREVOD
	s listArg=rg.transferDate_zR_rg.admissionDate_zR_rg.dischargeDate
	s resRule=$$CalcRule(idExp,"CheckDatPerevod",listArg)
	i 'resRule d AddError(resRule,"PEREVOD")
	//КОНЕЦ проверки PEREVOD
	
	//НАЧАЛО проверки DATA_WIPIS
	s listArg=rg.dischargeDate_zR_DateStart_zR_DateEnd
	s resRule=$$CalcRule(idExp,"CheckDatWipis",listArg)
	i 'resRule d AddError(resRule,"DATA_WIPIS")
	//КОНЕЦ проверки DATA_WIPIS
		
	//НАЧАЛО проверки KOL_DNEY
	s listArg=rg.render_zR_rg.bedDays
	s resRule=$$CalcRule(idExp,"CheckKolDayCorrect",listArg)
	i 'resRule d AddError(resRule,"KOL_DNEY") 
	//КОНЕЦ проверки KOL_DNEY
	
	//НАЧАЛО проверки RES_G
	s listArg=rg.result_zR_DateCalc_zR_rg.vidLpu
	s resRule=$$CalcRule(idExp,"CheckKodResg",listArg)
	i 'resRule d AddError(resRule,"RES_G")
	//КОНЕЦ проверки RES_G
		
	//НАЧАЛО проверки POVTOR_GOS
	s resRule=$$CalcRule(idExp,"CheckPovtorGos",rg.rehospitalization)
	i 'resRule d AddError(resRule,"POVTOR_GOS")
	//КОНЕЦ проверки POVTOR_GOS	
	
	//НАЧАЛО проверки CENA_SLUCH
	s listArg=rg.casePrice_zR_rg.render_zR_rg.kodLpu_zR_rg.dischargeDate_zR_rg.diagnosisMain_zR_rg.bedDays_zR_rg.directionType
	s resRule=$$CalcRule(idExp,"CheckCenaSluch",listArg,update)
	d
	.i +resRule=1 q
	.i 'resRule d AddError(resRule,"CENA_SLUCH") q
	.d
	..d AddMess(resRule,"CENA_SLUCH",rg.casePrice,$p(resRule,"#",3))
	..s rg.casePrice=$p(resRule,"#",3)
	//КОНЕЦ проверки CENA_SLUCH	
	
	//НАЧАЛО проверки DATA_SCHET
	s listArg=rg.billDate_zR_DateSchetExt
	s resRule=$$CalcRule(idExp,"CheckDatSchetEqualParam",listArg,update)
	d
	.i +resRule=1 q
	.i 'resRule d AddError(resRule,"DATA_SCHET") q
	.d
	..d AddMess(resRule,"DATA_SCHET",rg.billDate,$p(resRule,"#",3))
	..s rg.billDate=DateSchetExt
	//КОНЕЦ проверки DATA_SCHET	
	
	//НАЧАЛО проверки NOM_SCHET
	s listArg=rg.billNumber_zR_NomSchetExt
	s resRule=$$CalcRule(idExp,"CheckNomSchetEqualParamExp",listArg)
	d
	.i +resRule=1 q
	.i 'resRule d AddError(resRule,"NOM_SCHET") q
	.d
	..d AddMess(resRule,"NOM_SCHET",rg.billDate,$p(resRule,"#",3))
	..s rg.billNumber=NomSchetExt
	//КОНЕЦ проверки NOM_SCHET	
	
	//НАЧАЛО проверки SSD
	s resRule=$$CalcRule(idExp,"CheckSSD",rg.doctorSnils,update)
	d
	.i +resRule=1 q						;no update - quit
	.i 'resRule d AddError(resRule) q	;error - quit
	.d
	..d AddMess(resRule,"SSD",rg.doctorSnils,$p(resRule,"#",3))
	..s rg.doctorSnils=$p(resRule,"#",3)	;update
	
	//КОНЕЦ проверки SSD	
	
	//НАЧАЛО проверки PRVD
	;на справочник
	s listArg=rg.doctorPost_zR_DateCalc
	s resRule=$$CalcRule(idExp,"CheckKodPRVD",listArg)
	i 'resRule d AddError(resRule,"PRVD")
	;на соответствие услуге (по справлчнику РОСНО!)
	s listArg=rg.doctorPost_zR_rg.depType_zR_rg.render_zR_DateCalc
	s resRule=$$CalcRule(idExp,"CheckPrvdEqualProfLpu",listArg)
	i 'resRule d AddError(resRule,"PRVD")
	//КОНЕЦ проверки PRVD
	
	//НАЧАЛО проверки N_IST_BOL
	s resRule=$$CalcRule(idExp,"CheckNistBol",rg.caseHistoryNumber)
	i 'resRule d AddError(resRule,"N_IST_BOL")
	//КОНЕЦ проверки N_IST_BOL	
 
	//НАЧАЛО проверки поля HD
	;на справочник
	s listArg=rg.lpuFrom_zR_DateCalc
	s resRule=$$CalcRule(idExp,"CheckLpuHD",listArg)
	i 'resRule d AddError(resRule,"HD")
	//КОНЕЦ проверки HD	
	
	//НАЧАЛО проверки поля FRM
	;на справочник
	s listArg=rg.lpuFromUnit_zR_DateCalc
	s resRule=$$CalcRule(idExp,"CheckKodFrm",listArg)
	i 'resRule d AddError(resRule,"FRM")
	//КОНЕЦ проверки FRM	
 
	//НАЧАЛО проверки поля AS
	;на справочник
	s listArg=rg.lpuFromUnit_zR_DateCalc
	s resRule=$$CalcRule(idExp,"CheckKodAs",listArg)
	i 'resRule d AddError(resRule,"AS")
	//КОНЕЦ проверки AS	
 
	//НАЧАЛО проверки REESTR
	s resRule=$$CalcRule(idExp,"CheckReestr",rg.registryNumber)
	i 'resRule d AddError(resRule,"REESTR")
	//КОНЕЦ проверки REESTR	
 
	//НАЧАЛО проверки поля KL
	;на справочник
	s listArg=rg.level_zR_DateCalc
	s resRule=$$CalcRule(idExp,"CheckKodKL",listArg)
	i 'resRule d AddError(resRule,"KL")
	//КОНЕЦ проверки KL	
 
	//НАЧАЛО проверки SS
	s resRule=$$CalcRule(idExp,"CheckSS",rg.patientSnils,update)
	d
	.i +resRule=1 q						;good - quit
	.i 'resRule d AddError(resRule,"SS") q	;error - quit
	.d
	..d AddMess(resRule,"SS",rg.patientSnils,$p(resRule,"#",3))
	..s rg.patientSnils=$p(resRule,"#",3)	;update
	//КОНЕЦ проверки SSD
	
	//НАЧАЛО проверки поля PROF_LPU
	;на справочник
	s listArg=rg.depType_zR_DateCalc
	s resRule=$$CalcRule(idExp,"CheckProfLpu",listArg)
	i 'resRule d AddError(resRule,"PROF_LPU")
	//КОНЕЦ проверки PROF_LPU	
 
	//НАЧАЛО проверки поля OSL
	;на справочник
	s listArg=rg.osl_zR_DateCalc
	s resRule=$$CalcRule(idExp,"CheckKodOSL",listArg)
	i 'resRule d AddError(resRule,"OSL")
	//КОНЕЦ проверки OSL	
 
	//НАЧАЛО проверки поля D_LISTIN
	s listArg=rg.disabilityOpen_zR_DateStart_zR_DateEnd
	s resRule=$$CalcRule(idExp,"CheckDatListIn",listArg)
	i 'resRule d AddError(resRule,"D_LISTIN")
	//КОНЕЦ проверки D_LISTIN
	
	//НАЧАЛО проверки поля D_LISTOUT
	s listArg=rg.disabilityClose_zR_DateStart_zR_DateEnd_zR_rg.disabilityOpen
	s resRule=$$CalcRule(idExp,"CheckDatListIn",listArg)
	i 'resRule d AddError(resRule,"D_LISTOUT")
	//КОНЕЦ проверки D_LISTOUT
	
	//НАЧАЛО проверки поля Q_Z
	;на справочник
	s listArg=rg.qz_zR_DateCalc
	s resRule=$$CalcRule(idExp,"CheckKodQZ",listArg)
	i 'resRule d AddError(resRule,"Q_Z")
	//КОНЕЦ проверки Q_Z	
	
	//НАЧАЛО проверки поля DAT_OPER
	s listArg=rg.operationDate_zR_DateStart_zR_DateEnd
	s resRule=$$CalcRule(idExp,"CheckDatOper",listArg)
	i 'resRule d AddError(resRule,"DAT_OPER")
	//КОНЕЦ проверки DAT_OPER
 
	//НАЧАЛО проверки поля KOL_REC
	s resRule=$$CalcRule(idExp,"CheckKolRec",rg.privilegeRecipeAmount)
	i 'resRule d AddError(resRule,"KOL_REC")
	//КОНЕЦ проверки KOL_REC
	
	;-сохранили для записи исправлений чтобы проверить на дубли
	;d rg.%Save()
	
	//НАЧАЛО проверки на дубль внутри файла
	n ListDublFields
	s ListDublFields=$$GetStringDubl("kodLpu,lastname,firstname,middlename,birthDate,render,admissionDate,dischargeDate,doctorSnils",rg)
	d
	.;i ListDublFields="" d AddError("0#ошибка определения строки для вычисления дублей") q
	.i $$ifDubl(ListDublFields,idExp) d AddError("0#116") q
	.s ^tempExp(idExp,"dubleIndex",ListDublFields)=rg
	//КОНЕЦ проверки на дубль
	q	
]]></Routine>
</Export>
